//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** These definitions represent vendors' locations and relevant display information at different times in the game. */
public struct DestinyDefinitionsVendorsDestinyVendorLocationDefinition: APIModel {

    /** The relative path to the background image representing this Vendor at this location, for use in a banner. */
    public var backgroundImagePath: String?

    /** The hash identifier for a Destination at which this vendor may be located. Each destination where a Vendor may exist will only ever have a single entry. */
    public var destinationHash: Int?

    public init(backgroundImagePath: String? = nil, destinationHash: Int? = nil) {
        self.backgroundImagePath = backgroundImagePath
        self.destinationHash = destinationHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        backgroundImagePath = try container.decodeIfPresent("backgroundImagePath")
        destinationHash = try container.decodeIfPresent("destinationHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(backgroundImagePath, forKey: "backgroundImagePath")
        try container.encodeIfPresent(destinationHash, forKey: "destinationHash")
    }

    public static func == (lhs: DestinyDefinitionsVendorsDestinyVendorLocationDefinition, rhs: DestinyDefinitionsVendorsDestinyVendorLocationDefinition) -> Bool {
        guard lhs.backgroundImagePath == rhs.backgroundImagePath else { return false }
        guard lhs.destinationHash == rhs.destinationHash else { return false }
        return true
    }
}

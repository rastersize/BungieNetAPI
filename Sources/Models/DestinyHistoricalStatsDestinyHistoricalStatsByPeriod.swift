//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinyHistoricalStatsDestinyHistoricalStatsByPeriod: APIModel {

    public var allTime: [String: DestinyHistoricalStatsDestinyHistoricalStatsValue]?

    public var allTimeTier1: [String: DestinyHistoricalStatsDestinyHistoricalStatsValue]?

    public var allTimeTier2: [String: DestinyHistoricalStatsDestinyHistoricalStatsValue]?

    public var allTimeTier3: [String: DestinyHistoricalStatsDestinyHistoricalStatsValue]?

    public var daily: [DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup]?

    public var monthly: [DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup]?

    public init(allTime: [String: DestinyHistoricalStatsDestinyHistoricalStatsValue]? = nil, allTimeTier1: [String: DestinyHistoricalStatsDestinyHistoricalStatsValue]? = nil, allTimeTier2: [String: DestinyHistoricalStatsDestinyHistoricalStatsValue]? = nil, allTimeTier3: [String: DestinyHistoricalStatsDestinyHistoricalStatsValue]? = nil, daily: [DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup]? = nil, monthly: [DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup]? = nil) {
        self.allTime = allTime
        self.allTimeTier1 = allTimeTier1
        self.allTimeTier2 = allTimeTier2
        self.allTimeTier3 = allTimeTier3
        self.daily = daily
        self.monthly = monthly
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        allTime = try container.decodeIfPresent("allTime")
        allTimeTier1 = try container.decodeIfPresent("allTimeTier1")
        allTimeTier2 = try container.decodeIfPresent("allTimeTier2")
        allTimeTier3 = try container.decodeIfPresent("allTimeTier3")
        daily = try container.decodeArrayIfPresent("daily")
        monthly = try container.decodeArrayIfPresent("monthly")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(allTime, forKey: "allTime")
        try container.encodeIfPresent(allTimeTier1, forKey: "allTimeTier1")
        try container.encodeIfPresent(allTimeTier2, forKey: "allTimeTier2")
        try container.encodeIfPresent(allTimeTier3, forKey: "allTimeTier3")
        try container.encodeIfPresent(daily, forKey: "daily")
        try container.encodeIfPresent(monthly, forKey: "monthly")
    }

    public static func == (lhs: DestinyHistoricalStatsDestinyHistoricalStatsByPeriod, rhs: DestinyHistoricalStatsDestinyHistoricalStatsByPeriod) -> Bool {
        guard lhs.allTime == rhs.allTime else { return false }
        guard lhs.allTimeTier1 == rhs.allTimeTier1 else { return false }
        guard lhs.allTimeTier2 == rhs.allTimeTier2 else { return false }
        guard lhs.allTimeTier3 == rhs.allTimeTier3 else { return false }
        guard lhs.daily == rhs.daily else { return false }
        guard lhs.monthly == rhs.monthly else { return false }
        return true
    }
}

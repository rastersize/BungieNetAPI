//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct FireteamFireteamMember: APIModel {

    public var bungieNetUserInfo: UserUserInfoCard?

    public var characterId: Int?

    public var dateJoined: DateTime?

    public var destinyUserInfo: FireteamFireteamUserInfoCard?

    public var hasMicrophone: Bool?

    public var lastPlatformInviteAttemptDate: DateTime?

    public var lastPlatformInviteAttemptResult: Int?

    public init(bungieNetUserInfo: UserUserInfoCard? = nil, characterId: Int? = nil, dateJoined: DateTime? = nil, destinyUserInfo: FireteamFireteamUserInfoCard? = nil, hasMicrophone: Bool? = nil, lastPlatformInviteAttemptDate: DateTime? = nil, lastPlatformInviteAttemptResult: Int? = nil) {
        self.bungieNetUserInfo = bungieNetUserInfo
        self.characterId = characterId
        self.dateJoined = dateJoined
        self.destinyUserInfo = destinyUserInfo
        self.hasMicrophone = hasMicrophone
        self.lastPlatformInviteAttemptDate = lastPlatformInviteAttemptDate
        self.lastPlatformInviteAttemptResult = lastPlatformInviteAttemptResult
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        bungieNetUserInfo = try container.decodeIfPresent("bungieNetUserInfo")
        characterId = try container.decodeIfPresent("characterId")
        dateJoined = try container.decodeIfPresent("dateJoined")
        destinyUserInfo = try container.decodeIfPresent("destinyUserInfo")
        hasMicrophone = try container.decodeIfPresent("hasMicrophone")
        lastPlatformInviteAttemptDate = try container.decodeIfPresent("lastPlatformInviteAttemptDate")
        lastPlatformInviteAttemptResult = try container.decodeIfPresent("lastPlatformInviteAttemptResult")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(bungieNetUserInfo, forKey: "bungieNetUserInfo")
        try container.encodeIfPresent(characterId, forKey: "characterId")
        try container.encodeIfPresent(dateJoined, forKey: "dateJoined")
        try container.encodeIfPresent(destinyUserInfo, forKey: "destinyUserInfo")
        try container.encodeIfPresent(hasMicrophone, forKey: "hasMicrophone")
        try container.encodeIfPresent(lastPlatformInviteAttemptDate, forKey: "lastPlatformInviteAttemptDate")
        try container.encodeIfPresent(lastPlatformInviteAttemptResult, forKey: "lastPlatformInviteAttemptResult")
    }

    public static func == (lhs: FireteamFireteamMember, rhs: FireteamFireteamMember) -> Bool {
        guard lhs.bungieNetUserInfo == rhs.bungieNetUserInfo else { return false }
        guard lhs.characterId == rhs.characterId else { return false }
        guard lhs.dateJoined == rhs.dateJoined else { return false }
        guard lhs.destinyUserInfo == rhs.destinyUserInfo else { return false }
        guard lhs.hasMicrophone == rhs.hasMicrophone else { return false }
        guard lhs.lastPlatformInviteAttemptDate == rhs.lastPlatformInviteAttemptDate else { return false }
        guard lhs.lastPlatformInviteAttemptResult == rhs.lastPlatformInviteAttemptResult else { return false }
        return true
    }
}

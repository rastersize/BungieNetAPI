//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** If an item is "instanced", this will contain information about the item's instance that doesn't fit easily into other components. One might say this is the "essential" instance data for the item.
Items are instanced if they require information or state that can vary. For instance, weapons are Instanced: they are given a unique identifier, uniquely generated stats, and can have their properties altered. Non-instanced items have none of these things: for instance, Glimmer has no unique properties aside from how much of it you own.
You can tell from an item's definition whether it will be instanced or not by looking at the DestinyInventoryItemDefinition's definition.inventory.isInstanceItem property. */
public struct DestinyEntitiesItemsDestinyItemInstanceComponent: APIModel {

    /** If populated, this item has a breaker type corresponding to the given value. See DestinyBreakerTypeDefinition for more details. */
    public enum BreakerType: Int, Codable, Equatable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /** If populated, this item has a breaker type corresponding to the given value. See DestinyBreakerTypeDefinition for more details. */
    public var breakerType: BreakerType?

    /** If populated, this is the hash identifier for the item's breaker type. See DestinyBreakerTypeDefinition for more details. */
    public var breakerTypeHash: Int?

    /** If this is an equippable item, you can check it here. There are permanent as well as transitory reasons why an item might not be able to be equipped: check cannotEquipReason for details. */
    public var canEquip: Bool?

    /** If you cannot equip the item, this is a flags enum that enumerates all of the reasons why you couldn't equip the item. You may need to refine your UI further by using unlockHashesRequiredToEquip and equipRequiredLevel. */
    public var cannotEquipReason: Int?

    /** If the item has a damage type, this is the item's current damage type. */
    public var damageType: Int?

    /** The current damage type's hash, so you can look up localized info and icons for it. */
    public var damageTypeHash: Int?

    /** IF populated, this item supports Energy mechanics (i.e. Armor 2.0), and these are the current details of its energy type and available capacity to spend energy points. */
    public var energy: [String: Any]?

    /** If the item cannot be equipped until you reach a certain level, that level will be reflected here. */
    public var equipRequiredLevel: Int?

    /** Is the item currently equipped on the given character? */
    public var isEquipped: Bool?

    /** The Item's "Level" has the most significant bearing on its stats, such as Light and Power. */
    public var itemLevel: Int?

    /** The item stat that we consider to be "primary" for the item. For instance, this would be "Attack" for Weapons or "Defense" for armor. */
    public var primaryStat: [String: Any]?

    /** The "Quality" of the item has a lesser - but still impactful - bearing on stats like Light and Power. */
    public var quality: Int?

    /** Sometimes, there are limitations to equipping that are represented by character-level flags called "unlocks".
This is a list of flags that they need in order to equip the item that the character has not met. Use these to look up the descriptions to show in your UI by looking up the relevant DestinyUnlockDefinitions for the hashes. */
    public var unlockHashesRequiredToEquip: [Int]?

    public init(breakerType: BreakerType? = nil, breakerTypeHash: Int? = nil, canEquip: Bool? = nil, cannotEquipReason: Int? = nil, damageType: Int? = nil, damageTypeHash: Int? = nil, energy: [String: Any]? = nil, equipRequiredLevel: Int? = nil, isEquipped: Bool? = nil, itemLevel: Int? = nil, primaryStat: [String: Any]? = nil, quality: Int? = nil, unlockHashesRequiredToEquip: [Int]? = nil) {
        self.breakerType = breakerType
        self.breakerTypeHash = breakerTypeHash
        self.canEquip = canEquip
        self.cannotEquipReason = cannotEquipReason
        self.damageType = damageType
        self.damageTypeHash = damageTypeHash
        self.energy = energy
        self.equipRequiredLevel = equipRequiredLevel
        self.isEquipped = isEquipped
        self.itemLevel = itemLevel
        self.primaryStat = primaryStat
        self.quality = quality
        self.unlockHashesRequiredToEquip = unlockHashesRequiredToEquip
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        breakerType = try container.decodeIfPresent("breakerType")
        breakerTypeHash = try container.decodeIfPresent("breakerTypeHash")
        canEquip = try container.decodeIfPresent("canEquip")
        cannotEquipReason = try container.decodeIfPresent("cannotEquipReason")
        damageType = try container.decodeIfPresent("damageType")
        damageTypeHash = try container.decodeIfPresent("damageTypeHash")
        energy = try container.decodeAnyIfPresent("energy")
        equipRequiredLevel = try container.decodeIfPresent("equipRequiredLevel")
        isEquipped = try container.decodeIfPresent("isEquipped")
        itemLevel = try container.decodeIfPresent("itemLevel")
        primaryStat = try container.decodeAnyIfPresent("primaryStat")
        quality = try container.decodeIfPresent("quality")
        unlockHashesRequiredToEquip = try container.decodeArrayIfPresent("unlockHashesRequiredToEquip")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(breakerType, forKey: "breakerType")
        try container.encodeIfPresent(breakerTypeHash, forKey: "breakerTypeHash")
        try container.encodeIfPresent(canEquip, forKey: "canEquip")
        try container.encodeIfPresent(cannotEquipReason, forKey: "cannotEquipReason")
        try container.encodeIfPresent(damageType, forKey: "damageType")
        try container.encodeIfPresent(damageTypeHash, forKey: "damageTypeHash")
        try container.encodeAnyIfPresent(energy, forKey: "energy")
        try container.encodeIfPresent(equipRequiredLevel, forKey: "equipRequiredLevel")
        try container.encodeIfPresent(isEquipped, forKey: "isEquipped")
        try container.encodeIfPresent(itemLevel, forKey: "itemLevel")
        try container.encodeAnyIfPresent(primaryStat, forKey: "primaryStat")
        try container.encodeIfPresent(quality, forKey: "quality")
        try container.encodeIfPresent(unlockHashesRequiredToEquip, forKey: "unlockHashesRequiredToEquip")
    }

    public static func == (lhs: DestinyEntitiesItemsDestinyItemInstanceComponent, rhs: DestinyEntitiesItemsDestinyItemInstanceComponent) -> Bool {
        guard lhs.breakerType == rhs.breakerType else { return false }
        guard lhs.breakerTypeHash == rhs.breakerTypeHash else { return false }
        guard lhs.canEquip == rhs.canEquip else { return false }
        guard lhs.cannotEquipReason == rhs.cannotEquipReason else { return false }
        guard lhs.damageType == rhs.damageType else { return false }
        guard lhs.damageTypeHash == rhs.damageTypeHash else { return false }
        guard NSDictionary(dictionary: lhs.energy ?? [:]).isEqual(to: rhs.energy ?? [:]) else { return false }
        guard lhs.equipRequiredLevel == rhs.equipRequiredLevel else { return false }
        guard lhs.isEquipped == rhs.isEquipped else { return false }
        guard lhs.itemLevel == rhs.itemLevel else { return false }
        guard NSDictionary(dictionary: lhs.primaryStat ?? [:]).isEqual(to: rhs.primaryStat ?? [:]) else { return false }
        guard lhs.quality == rhs.quality else { return false }
        guard lhs.unlockHashesRequiredToEquip == rhs.unlockHashesRequiredToEquip else { return false }
        return true
    }
}

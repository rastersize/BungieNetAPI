//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Defines a canonical "Season" of Destiny: a range of a few months where the game highlights certain challenges, provides new loot, has new Clan-related rewards and celebrates various seasonal events. */
public struct DestinyDefinitionsSeasonsDestinySeasonDefinition: APIModel {

    public var backgroundImagePath: String?

    public var displayProperties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition?

    public var endDate: DateTime?

    /** The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to. */
    public var hash: Int?

    /** The index of the entity as it was found in the investment tables. */
    public var index: Int?

    /** If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry! */
    public var redacted: Bool?

    public var seasonNumber: Int?

    public var seasonPassHash: Int?

    public var seasonPassProgressionHash: Int?

    public var startDate: DateTime?

    public init(backgroundImagePath: String? = nil, displayProperties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition? = nil, endDate: DateTime? = nil, hash: Int? = nil, index: Int? = nil, redacted: Bool? = nil, seasonNumber: Int? = nil, seasonPassHash: Int? = nil, seasonPassProgressionHash: Int? = nil, startDate: DateTime? = nil) {
        self.backgroundImagePath = backgroundImagePath
        self.displayProperties = displayProperties
        self.endDate = endDate
        self.hash = hash
        self.index = index
        self.redacted = redacted
        self.seasonNumber = seasonNumber
        self.seasonPassHash = seasonPassHash
        self.seasonPassProgressionHash = seasonPassProgressionHash
        self.startDate = startDate
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        backgroundImagePath = try container.decodeIfPresent("backgroundImagePath")
        displayProperties = try container.decodeIfPresent("displayProperties")
        endDate = try container.decodeIfPresent("endDate")
        hash = try container.decodeIfPresent("hash")
        index = try container.decodeIfPresent("index")
        redacted = try container.decodeIfPresent("redacted")
        seasonNumber = try container.decodeIfPresent("seasonNumber")
        seasonPassHash = try container.decodeIfPresent("seasonPassHash")
        seasonPassProgressionHash = try container.decodeIfPresent("seasonPassProgressionHash")
        startDate = try container.decodeIfPresent("startDate")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(backgroundImagePath, forKey: "backgroundImagePath")
        try container.encodeIfPresent(displayProperties, forKey: "displayProperties")
        try container.encodeIfPresent(endDate, forKey: "endDate")
        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(index, forKey: "index")
        try container.encodeIfPresent(redacted, forKey: "redacted")
        try container.encodeIfPresent(seasonNumber, forKey: "seasonNumber")
        try container.encodeIfPresent(seasonPassHash, forKey: "seasonPassHash")
        try container.encodeIfPresent(seasonPassProgressionHash, forKey: "seasonPassProgressionHash")
        try container.encodeIfPresent(startDate, forKey: "startDate")
    }

    public static func == (lhs: DestinyDefinitionsSeasonsDestinySeasonDefinition, rhs: DestinyDefinitionsSeasonsDestinySeasonDefinition) -> Bool {
        guard lhs.backgroundImagePath == rhs.backgroundImagePath else { return false }
        guard lhs.displayProperties == rhs.displayProperties else { return false }
        guard lhs.endDate == rhs.endDate else { return false }
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.index == rhs.index else { return false }
        guard lhs.redacted == rhs.redacted else { return false }
        guard lhs.seasonNumber == rhs.seasonNumber else { return false }
        guard lhs.seasonPassHash == rhs.seasonPassHash else { return false }
        guard lhs.seasonPassProgressionHash == rhs.seasonPassProgressionHash else { return false }
        guard lhs.startDate == rhs.startDate else { return false }
        return true
    }
}

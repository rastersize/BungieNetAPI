//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Primarily for Quests, this is the definition of properties related to the item if it is a quest and its various quest steps. */
public struct DestinyDefinitionsDestinyItemSetBlockDefinition: APIModel {

    /** A collection of hashes of set items, for items such as Quest Metadata items that possess this data. */
    public var itemList: [DestinyDefinitionsDestinyItemSetBlockEntryDefinition]?

    /** If true, items in the set can only be added in increasing order, and adding an item will remove any previous item. For Quests, this is by necessity true. Only one quest step is present at a time, and previous steps are removed as you advance in the quest. */
    public var requireOrderedSetItemAdd: Bool?

    /** If true, the UI should treat this quest as "featured" */
    public var setIsFeatured: Bool?

    /** A string identifier we can use to attempt to identify the category of the Quest. */
    public var setType: String?

    public init(itemList: [DestinyDefinitionsDestinyItemSetBlockEntryDefinition]? = nil, requireOrderedSetItemAdd: Bool? = nil, setIsFeatured: Bool? = nil, setType: String? = nil) {
        self.itemList = itemList
        self.requireOrderedSetItemAdd = requireOrderedSetItemAdd
        self.setIsFeatured = setIsFeatured
        self.setType = setType
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        itemList = try container.decodeArrayIfPresent("itemList")
        requireOrderedSetItemAdd = try container.decodeIfPresent("requireOrderedSetItemAdd")
        setIsFeatured = try container.decodeIfPresent("setIsFeatured")
        setType = try container.decodeIfPresent("setType")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(itemList, forKey: "itemList")
        try container.encodeIfPresent(requireOrderedSetItemAdd, forKey: "requireOrderedSetItemAdd")
        try container.encodeIfPresent(setIsFeatured, forKey: "setIsFeatured")
        try container.encodeIfPresent(setType, forKey: "setType")
    }

    public static func == (lhs: DestinyDefinitionsDestinyItemSetBlockDefinition, rhs: DestinyDefinitionsDestinyItemSetBlockDefinition) -> Bool {
        guard lhs.itemList == rhs.itemList else { return false }
        guard lhs.requireOrderedSetItemAdd == rhs.requireOrderedSetItemAdd else { return false }
        guard lhs.setIsFeatured == rhs.setIsFeatured else { return false }
        guard lhs.setType == rhs.setType else { return false }
        return true
    }
}

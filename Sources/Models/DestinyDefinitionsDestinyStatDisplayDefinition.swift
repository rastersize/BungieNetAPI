//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Describes the way that an Item Stat (see DestinyStatDefinition) is transformed using the DestinyStatGroupDefinition related to that item. See both of the aforementioned definitions for more information about the stages of stat transformation.
This represents the transformation of a stat into a "Display" stat (the closest value that BNet can get to the in-game display value of the stat) */
public struct DestinyDefinitionsDestinyStatDisplayDefinition: APIModel {

    /** If this is true, the stat should be displayed as a number. Otherwise, display it as a progress bar. Or, you know, do whatever you want. There's no displayAsNumeric police. */
    public var displayAsNumeric: Bool?

    /** The interpolation table representing how the Investment Stat is transformed into a Display Stat. 
See DestinyStatDefinition for a description of the stages of stat transformation. */
    public var displayInterpolation: [InterpolationInterpolationPoint]?

    /** Regardless of the output of interpolation, this is the maximum possible value that the stat can be. It should also be used as the upper bound for displaying the stat as a progress bar (the minimum always being 0) */
    public var maximumValue: Int?

    /** The hash identifier for the stat being transformed into a Display stat.
Use it to look up the DestinyStatDefinition, or key into a DestinyInventoryItemDefinition's stats property. */
    public var statHash: Int?

    public init(displayAsNumeric: Bool? = nil, displayInterpolation: [InterpolationInterpolationPoint]? = nil, maximumValue: Int? = nil, statHash: Int? = nil) {
        self.displayAsNumeric = displayAsNumeric
        self.displayInterpolation = displayInterpolation
        self.maximumValue = maximumValue
        self.statHash = statHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        displayAsNumeric = try container.decodeIfPresent("displayAsNumeric")
        displayInterpolation = try container.decodeArrayIfPresent("displayInterpolation")
        maximumValue = try container.decodeIfPresent("maximumValue")
        statHash = try container.decodeIfPresent("statHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(displayAsNumeric, forKey: "displayAsNumeric")
        try container.encodeIfPresent(displayInterpolation, forKey: "displayInterpolation")
        try container.encodeIfPresent(maximumValue, forKey: "maximumValue")
        try container.encodeIfPresent(statHash, forKey: "statHash")
    }

    public static func == (lhs: DestinyDefinitionsDestinyStatDisplayDefinition, rhs: DestinyDefinitionsDestinyStatDisplayDefinition) -> Bool {
        guard lhs.displayAsNumeric == rhs.displayAsNumeric else { return false }
        guard lhs.displayInterpolation == rhs.displayInterpolation else { return false }
        guard lhs.maximumValue == rhs.maximumValue else { return false }
        guard lhs.statHash == rhs.statHash else { return false }
        return true
    }
}

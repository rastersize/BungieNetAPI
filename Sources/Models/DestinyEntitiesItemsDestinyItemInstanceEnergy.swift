//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinyEntitiesItemsDestinyItemInstanceEnergy: APIModel {

    /** The total capacity of Energy that the item currently has, regardless of if it is currently being used. */
    public var energyCapacity: Int?

    /** This is the enum version of the Energy Type value, for convenience. */
    public var energyType: Int?

    /** The type of energy for this item. Plugs that require Energy can only be inserted if they have the "Any" Energy Type or the matching energy type of this item. This is a reference to the DestinyEnergyTypeDefinition for the energy type, where you can find extended info about it. */
    public var energyTypeHash: Int?

    /** The amount of energy still available for inserting new plugs. */
    public var energyUnused: Int?

    /** The amount of Energy currently in use by inserted plugs. */
    public var energyUsed: Int?

    public init(energyCapacity: Int? = nil, energyType: Int? = nil, energyTypeHash: Int? = nil, energyUnused: Int? = nil, energyUsed: Int? = nil) {
        self.energyCapacity = energyCapacity
        self.energyType = energyType
        self.energyTypeHash = energyTypeHash
        self.energyUnused = energyUnused
        self.energyUsed = energyUsed
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        energyCapacity = try container.decodeIfPresent("energyCapacity")
        energyType = try container.decodeIfPresent("energyType")
        energyTypeHash = try container.decodeIfPresent("energyTypeHash")
        energyUnused = try container.decodeIfPresent("energyUnused")
        energyUsed = try container.decodeIfPresent("energyUsed")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(energyCapacity, forKey: "energyCapacity")
        try container.encodeIfPresent(energyType, forKey: "energyType")
        try container.encodeIfPresent(energyTypeHash, forKey: "energyTypeHash")
        try container.encodeIfPresent(energyUnused, forKey: "energyUnused")
        try container.encodeIfPresent(energyUsed, forKey: "energyUsed")
    }

    public static func == (lhs: DestinyEntitiesItemsDestinyItemInstanceEnergy, rhs: DestinyEntitiesItemsDestinyItemInstanceEnergy) -> Bool {
        guard lhs.energyCapacity == rhs.energyCapacity else { return false }
        guard lhs.energyType == rhs.energyType else { return false }
        guard lhs.energyTypeHash == rhs.energyTypeHash else { return false }
        guard lhs.energyUnused == rhs.energyUnused else { return false }
        guard lhs.energyUsed == rhs.energyUsed else { return false }
        return true
    }
}

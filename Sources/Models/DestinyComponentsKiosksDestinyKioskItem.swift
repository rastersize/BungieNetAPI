//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinyComponentsKiosksDestinyKioskItem: APIModel {

    /** If true, the user can not only see the item, but they can acquire it. It is possible that a user can see a kiosk item and not be able to acquire it. */
    public var canAcquire: Bool?

    /** Indexes into failureStrings for the Vendor, indicating the reasons why it failed if any. */
    public var failureIndexes: [Int]?

    /** I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for "flavor" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item. */
    public var flavorObjective: [String: Any]?

    /** The index of the item in the related DestinyVendorDefintion's itemList property, representing the sale. */
    public var index: Int?

    public init(canAcquire: Bool? = nil, failureIndexes: [Int]? = nil, flavorObjective: [String: Any]? = nil, index: Int? = nil) {
        self.canAcquire = canAcquire
        self.failureIndexes = failureIndexes
        self.flavorObjective = flavorObjective
        self.index = index
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        canAcquire = try container.decodeIfPresent("canAcquire")
        failureIndexes = try container.decodeArrayIfPresent("failureIndexes")
        flavorObjective = try container.decodeAnyIfPresent("flavorObjective")
        index = try container.decodeIfPresent("index")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(canAcquire, forKey: "canAcquire")
        try container.encodeIfPresent(failureIndexes, forKey: "failureIndexes")
        try container.encodeAnyIfPresent(flavorObjective, forKey: "flavorObjective")
        try container.encodeIfPresent(index, forKey: "index")
    }

    public static func == (lhs: DestinyComponentsKiosksDestinyKioskItem, rhs: DestinyComponentsKiosksDestinyKioskItem) -> Bool {
        guard lhs.canAcquire == rhs.canAcquire else { return false }
        guard lhs.failureIndexes == rhs.failureIndexes else { return false }
        guard NSDictionary(dictionary: lhs.flavorObjective ?? [:]).isEqual(to: rhs.flavorObjective ?? [:]) else { return false }
        guard lhs.index == rhs.index else { return false }
        return true
    }
}

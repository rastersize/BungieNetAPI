//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Information about a single inventory bucket in a vendor flyout UI and how it is shown. */
public struct DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition: APIModel {

    /** If true, the inventory bucket should be able to be collapsed visually. */
    public var collapsible: Bool?

    /** The inventory bucket whose contents should be shown. */
    public var inventoryBucketHash: Int?

    /** The methodology to use for sorting items from the flyout. */
    public var sortItemsBy: Int?

    public init(collapsible: Bool? = nil, inventoryBucketHash: Int? = nil, sortItemsBy: Int? = nil) {
        self.collapsible = collapsible
        self.inventoryBucketHash = inventoryBucketHash
        self.sortItemsBy = sortItemsBy
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        collapsible = try container.decodeIfPresent("collapsible")
        inventoryBucketHash = try container.decodeIfPresent("inventoryBucketHash")
        sortItemsBy = try container.decodeIfPresent("sortItemsBy")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(collapsible, forKey: "collapsible")
        try container.encodeIfPresent(inventoryBucketHash, forKey: "inventoryBucketHash")
        try container.encodeIfPresent(sortItemsBy, forKey: "sortItemsBy")
    }

    public static func == (lhs: DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition, rhs: DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition) -> Bool {
        guard lhs.collapsible == rhs.collapsible else { return false }
        guard lhs.inventoryBucketHash == rhs.inventoryBucketHash else { return false }
        guard lhs.sortItemsBy == rhs.sortItemsBy else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct GroupsV2GroupOptionsEditAction: APIModel {

    /** Minimum Member Level allowed to host guided games
    Always Allowed: Founder, Acting Founder, Admin
    Allowed Overrides: None, Member, Beginner
    Default is Member for clans, None for groups, although this means nothing for groups. */
    public enum HostGuidedGamePermissionOverride: Int, Codable, Equatable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
    }

    /** Level to join a member at when accepting an invite, application, or joining an open clan
    Default is Beginner. */
    public enum JoinLevel: Int, Codable, Equatable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
    }

    /** Minimum Member Level allowed to host guided games
Always Allowed: Founder, Acting Founder, Admin
Allowed Overrides: None, Member, Beginner
Default is Member for clans, None for groups, although this means nothing for groups. */
    public var hostGuidedGamePermissionOverride: HostGuidedGamePermissionOverride?

    /** Minimum Member Level allowed to invite new members to group
Always Allowed: Founder, Acting Founder
True means admins have this power, false means they don't
Default is false for clans, true for groups. */
    public var invitePermissionOverride: Bool?

    /** Level to join a member at when accepting an invite, application, or joining an open clan
Default is Beginner. */
    public var joinLevel: JoinLevel?

    /** Minimum Member Level allowed to update banner
Always Allowed: Founder, Acting Founder
True means admins have this power, false means they don't
Default is false for clans, true for groups. */
    public var updateBannerPermissionOverride: Bool?

    /** Minimum Member Level allowed to update group culture
Always Allowed: Founder, Acting Founder
True means admins have this power, false means they don't
Default is false for clans, true for groups. */
    public var updateCulturePermissionOverride: Bool?

    public init(hostGuidedGamePermissionOverride: HostGuidedGamePermissionOverride? = nil, invitePermissionOverride: Bool? = nil, joinLevel: JoinLevel? = nil, updateBannerPermissionOverride: Bool? = nil, updateCulturePermissionOverride: Bool? = nil) {
        self.hostGuidedGamePermissionOverride = hostGuidedGamePermissionOverride
        self.invitePermissionOverride = invitePermissionOverride
        self.joinLevel = joinLevel
        self.updateBannerPermissionOverride = updateBannerPermissionOverride
        self.updateCulturePermissionOverride = updateCulturePermissionOverride
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        hostGuidedGamePermissionOverride = try container.decodeIfPresent("HostGuidedGamePermissionOverride")
        invitePermissionOverride = try container.decodeIfPresent("InvitePermissionOverride")
        joinLevel = try container.decodeIfPresent("JoinLevel")
        updateBannerPermissionOverride = try container.decodeIfPresent("UpdateBannerPermissionOverride")
        updateCulturePermissionOverride = try container.decodeIfPresent("UpdateCulturePermissionOverride")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(hostGuidedGamePermissionOverride, forKey: "HostGuidedGamePermissionOverride")
        try container.encodeIfPresent(invitePermissionOverride, forKey: "InvitePermissionOverride")
        try container.encodeIfPresent(joinLevel, forKey: "JoinLevel")
        try container.encodeIfPresent(updateBannerPermissionOverride, forKey: "UpdateBannerPermissionOverride")
        try container.encodeIfPresent(updateCulturePermissionOverride, forKey: "UpdateCulturePermissionOverride")
    }

    public static func == (lhs: GroupsV2GroupOptionsEditAction, rhs: GroupsV2GroupOptionsEditAction) -> Bool {
        guard lhs.hostGuidedGamePermissionOverride == rhs.hostGuidedGamePermissionOverride else { return false }
        guard lhs.invitePermissionOverride == rhs.invitePermissionOverride else { return false }
        guard lhs.joinLevel == rhs.joinLevel else { return false }
        guard lhs.updateBannerPermissionOverride == rhs.updateBannerPermissionOverride else { return false }
        guard lhs.updateCulturePermissionOverride == rhs.updateCulturePermissionOverride else { return false }
        return true
    }
}

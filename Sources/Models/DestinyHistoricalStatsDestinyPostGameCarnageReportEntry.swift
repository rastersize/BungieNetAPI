//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinyHistoricalStatsDestinyPostGameCarnageReportEntry: APIModel {

    /** ID of the player's character used in the activity. */
    public var characterId: Int?

    /** Extended data extracted from the activity blob. */
    public var extended: [String: Any]?

    /** Identity details of the player */
    public var player: [String: Any]?

    /** Score of the player if available */
    public var score: [String: Any]?

    /** Standing of the player */
    public var standing: Int?

    /** Collection of stats for the player in this activity. */
    public var values: [String: DestinyHistoricalStatsDestinyHistoricalStatsValue]?

    public init(characterId: Int? = nil, extended: [String: Any]? = nil, player: [String: Any]? = nil, score: [String: Any]? = nil, standing: Int? = nil, values: [String: DestinyHistoricalStatsDestinyHistoricalStatsValue]? = nil) {
        self.characterId = characterId
        self.extended = extended
        self.player = player
        self.score = score
        self.standing = standing
        self.values = values
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        characterId = try container.decodeIfPresent("characterId")
        extended = try container.decodeAnyIfPresent("extended")
        player = try container.decodeAnyIfPresent("player")
        score = try container.decodeAnyIfPresent("score")
        standing = try container.decodeIfPresent("standing")
        values = try container.decodeIfPresent("values")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(characterId, forKey: "characterId")
        try container.encodeAnyIfPresent(extended, forKey: "extended")
        try container.encodeAnyIfPresent(player, forKey: "player")
        try container.encodeAnyIfPresent(score, forKey: "score")
        try container.encodeIfPresent(standing, forKey: "standing")
        try container.encodeIfPresent(values, forKey: "values")
    }

    public static func == (lhs: DestinyHistoricalStatsDestinyPostGameCarnageReportEntry, rhs: DestinyHistoricalStatsDestinyPostGameCarnageReportEntry) -> Bool {
        guard lhs.characterId == rhs.characterId else { return false }
        guard NSDictionary(dictionary: lhs.extended ?? [:]).isEqual(to: rhs.extended ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.player ?? [:]).isEqual(to: rhs.player ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.score ?? [:]).isEqual(to: rhs.score ?? [:]) else { return false }
        guard lhs.standing == rhs.standing else { return false }
        guard lhs.values == rhs.values else { return false }
        return true
    }
}

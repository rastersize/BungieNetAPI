//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Represents a reference to a Challenge, which for now is just an Objective. */
public struct DestinyDefinitionsDestinyActivityChallengeDefinition: APIModel {

    /** The rewards as they're represented in the UI. Note that they generally link to "dummy" items that give a summary of rewards rather than direct, real items themselves.
If the quantity is 0, don't show the quantity. */
    public var dummyRewards: [DestinyDestinyItemQuantity]?

    /** The hash for the Objective that matches this challenge. Use it to look up the DestinyObjectiveDefinition. */
    public var objectiveHash: Int?

    public init(dummyRewards: [DestinyDestinyItemQuantity]? = nil, objectiveHash: Int? = nil) {
        self.dummyRewards = dummyRewards
        self.objectiveHash = objectiveHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        dummyRewards = try container.decodeArrayIfPresent("dummyRewards")
        objectiveHash = try container.decodeIfPresent("objectiveHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(dummyRewards, forKey: "dummyRewards")
        try container.encodeIfPresent(objectiveHash, forKey: "objectiveHash")
    }

    public static func == (lhs: DestinyDefinitionsDestinyActivityChallengeDefinition, rhs: DestinyDefinitionsDestinyActivityChallengeDefinition) -> Bool {
        guard lhs.dummyRewards == rhs.dummyRewards else { return false }
        guard lhs.objectiveHash == rhs.objectiveHash else { return false }
        return true
    }
}

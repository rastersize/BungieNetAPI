//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** An individual Destiny Entity returned from the entity search. */
public struct DestinyDefinitionsDestinyEntitySearchResultItem: APIModel {

    /** Basic display properties on the entity, so you don't have to look up the definition to show basic results for the item. */
    public var displayProperties: [String: Any]?

    /** The type of entity, returned as a string matching the DestinyDefinition's contract class name. You'll have to have your own mapping from class names to actually looking up those definitions in the manifest databases. */
    public var entityType: String?

    /** The hash identifier of the entity. You will use this to look up the DestinyDefinition relevant for the entity found. */
    public var hash: Int?

    /** The ranking value for sorting that we calculated using our relevance formula. This will hopefully get better with time and iteration. */
    public var weight: Double?

    public init(displayProperties: [String: Any]? = nil, entityType: String? = nil, hash: Int? = nil, weight: Double? = nil) {
        self.displayProperties = displayProperties
        self.entityType = entityType
        self.hash = hash
        self.weight = weight
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        displayProperties = try container.decodeAnyIfPresent("displayProperties")
        entityType = try container.decodeIfPresent("entityType")
        hash = try container.decodeIfPresent("hash")
        weight = try container.decodeIfPresent("weight")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeAnyIfPresent(displayProperties, forKey: "displayProperties")
        try container.encodeIfPresent(entityType, forKey: "entityType")
        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(weight, forKey: "weight")
    }

    public static func == (lhs: DestinyDefinitionsDestinyEntitySearchResultItem, rhs: DestinyDefinitionsDestinyEntitySearchResultItem) -> Bool {
        guard NSDictionary(dictionary: lhs.displayProperties ?? [:]).isEqual(to: rhs.displayProperties ?? [:]) else { return false }
        guard lhs.entityType == rhs.entityType else { return false }
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.weight == rhs.weight else { return false }
        return true
    }
}

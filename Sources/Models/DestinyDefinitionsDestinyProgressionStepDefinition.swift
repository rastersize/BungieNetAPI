//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** This defines a single Step in a progression (which roughly equates to a level. See DestinyProgressionDefinition for caveats). */
public struct DestinyDefinitionsDestinyProgressionStepDefinition: APIModel {

    /** This appears to be, when you "level up", whether a visual effect will display and on what entity. See DestinyProgressionStepDisplayEffect for slightly more info. */
    public var displayEffectType: Int?

    /** If this progression step has a specific icon related to it, this is the icon to show. */
    public var icon: String?

    /** The total amount of progression points/"experience" you will need to initially reach this step. If this is the last step and the progression is repeating indefinitely (DestinyProgressionDefinition.repeatLastStep), this will also be the progress needed to level it up further by repeating this step again. */
    public var progressTotal: Int?

    /** A listing of items rewarded as a result of reaching this level. */
    public var rewardItems: [DestinyDestinyItemQuantity]?

    /** Very rarely, Progressions will have localized text describing the Level of the progression. This will be that localized text, if it exists. Otherwise, the standard appears to be to simply show the level numerically. */
    public var stepName: String?

    public init(displayEffectType: Int? = nil, icon: String? = nil, progressTotal: Int? = nil, rewardItems: [DestinyDestinyItemQuantity]? = nil, stepName: String? = nil) {
        self.displayEffectType = displayEffectType
        self.icon = icon
        self.progressTotal = progressTotal
        self.rewardItems = rewardItems
        self.stepName = stepName
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        displayEffectType = try container.decodeIfPresent("displayEffectType")
        icon = try container.decodeIfPresent("icon")
        progressTotal = try container.decodeIfPresent("progressTotal")
        rewardItems = try container.decodeArrayIfPresent("rewardItems")
        stepName = try container.decodeIfPresent("stepName")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(displayEffectType, forKey: "displayEffectType")
        try container.encodeIfPresent(icon, forKey: "icon")
        try container.encodeIfPresent(progressTotal, forKey: "progressTotal")
        try container.encodeIfPresent(rewardItems, forKey: "rewardItems")
        try container.encodeIfPresent(stepName, forKey: "stepName")
    }

    public static func == (lhs: DestinyDefinitionsDestinyProgressionStepDefinition, rhs: DestinyDefinitionsDestinyProgressionStepDefinition) -> Bool {
        guard lhs.displayEffectType == rhs.displayEffectType else { return false }
        guard lhs.icon == rhs.icon else { return false }
        guard lhs.progressTotal == rhs.progressTotal else { return false }
        guard lhs.rewardItems == rhs.rewardItems else { return false }
        guard lhs.stepName == rhs.stepName else { return false }
        return true
    }
}

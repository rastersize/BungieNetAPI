//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ApplicationsApplication: APIModel {

    /** Unique ID assigned to the application */
    public var applicationId: Int?

    public var applicationType: Int?

    /** Date the application was first added to our database. */
    public var creationDate: DateTime?

    /** Date the first time the application status entered the 'Public' status. */
    public var firstPublished: DateTime?

    /** Link to website for the application where a user can learn more about the app. */
    public var link: String?

    /** Name of the application */
    public var name: String?

    /** Value of the Origin header sent in requests generated by this application. */
    public var origin: String?

    /** URL used to pass the user's authorization code to the application */
    public var redirectUrl: String?

    /** Permissions the application needs to work */
    public var scope: Int?

    /** Current status of the application. */
    public var status: Int?

    /** Date the application status last changed. */
    public var statusChanged: DateTime?

    /** List of team members who manage this application on Bungie.net. Will always consist of at least the application owner. */
    public var team: [ApplicationsApplicationDeveloper]?

    public init(applicationId: Int? = nil, applicationType: Int? = nil, creationDate: DateTime? = nil, firstPublished: DateTime? = nil, link: String? = nil, name: String? = nil, origin: String? = nil, redirectUrl: String? = nil, scope: Int? = nil, status: Int? = nil, statusChanged: DateTime? = nil, team: [ApplicationsApplicationDeveloper]? = nil) {
        self.applicationId = applicationId
        self.applicationType = applicationType
        self.creationDate = creationDate
        self.firstPublished = firstPublished
        self.link = link
        self.name = name
        self.origin = origin
        self.redirectUrl = redirectUrl
        self.scope = scope
        self.status = status
        self.statusChanged = statusChanged
        self.team = team
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        applicationId = try container.decodeIfPresent("applicationId")
        applicationType = try container.decodeIfPresent("applicationType")
        creationDate = try container.decodeIfPresent("creationDate")
        firstPublished = try container.decodeIfPresent("firstPublished")
        link = try container.decodeIfPresent("link")
        name = try container.decodeIfPresent("name")
        origin = try container.decodeIfPresent("origin")
        redirectUrl = try container.decodeIfPresent("redirectUrl")
        scope = try container.decodeIfPresent("scope")
        status = try container.decodeIfPresent("status")
        statusChanged = try container.decodeIfPresent("statusChanged")
        team = try container.decodeArrayIfPresent("team")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(applicationId, forKey: "applicationId")
        try container.encodeIfPresent(applicationType, forKey: "applicationType")
        try container.encodeIfPresent(creationDate, forKey: "creationDate")
        try container.encodeIfPresent(firstPublished, forKey: "firstPublished")
        try container.encodeIfPresent(link, forKey: "link")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(origin, forKey: "origin")
        try container.encodeIfPresent(redirectUrl, forKey: "redirectUrl")
        try container.encodeIfPresent(scope, forKey: "scope")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(statusChanged, forKey: "statusChanged")
        try container.encodeIfPresent(team, forKey: "team")
    }

    public static func == (lhs: ApplicationsApplication, rhs: ApplicationsApplication) -> Bool {
        guard lhs.applicationId == rhs.applicationId else { return false }
        guard lhs.applicationType == rhs.applicationType else { return false }
        guard lhs.creationDate == rhs.creationDate else { return false }
        guard lhs.firstPublished == rhs.firstPublished else { return false }
        guard lhs.link == rhs.link else { return false }
        guard lhs.name == rhs.name else { return false }
        guard lhs.origin == rhs.origin else { return false }
        guard lhs.redirectUrl == rhs.redirectUrl else { return false }
        guard lhs.scope == rhs.scope else { return false }
        guard lhs.status == rhs.status else { return false }
        guard lhs.statusChanged == rhs.statusChanged else { return false }
        guard lhs.team == rhs.team else { return false }
        return true
    }
}

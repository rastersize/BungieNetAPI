//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The details of an overlay prompt to show to a user. They are all fairly self-explanatory localized strings that can be shown. */
public struct DestinyDefinitionsDestinyVendorCategoryOverlayDefinition: APIModel {

    public var choiceDescription: String?

    /** If this overlay has a currency item that it features, this is said featured item. */
    public var currencyItemHash: Int?

    public var description: String?

    public var icon: String?

    public var title: String?

    public init(choiceDescription: String? = nil, currencyItemHash: Int? = nil, description: String? = nil, icon: String? = nil, title: String? = nil) {
        self.choiceDescription = choiceDescription
        self.currencyItemHash = currencyItemHash
        self.description = description
        self.icon = icon
        self.title = title
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        choiceDescription = try container.decodeIfPresent("choiceDescription")
        currencyItemHash = try container.decodeIfPresent("currencyItemHash")
        description = try container.decodeIfPresent("description")
        icon = try container.decodeIfPresent("icon")
        title = try container.decodeIfPresent("title")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(choiceDescription, forKey: "choiceDescription")
        try container.encodeIfPresent(currencyItemHash, forKey: "currencyItemHash")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(icon, forKey: "icon")
        try container.encodeIfPresent(title, forKey: "title")
    }

    public static func == (lhs: DestinyDefinitionsDestinyVendorCategoryOverlayDefinition, rhs: DestinyDefinitionsDestinyVendorCategoryOverlayDefinition) -> Bool {
        guard lhs.choiceDescription == rhs.choiceDescription else { return false }
        guard lhs.currencyItemHash == rhs.currencyItemHash else { return false }
        guard lhs.description == rhs.description else { return false }
        guard lhs.icon == rhs.icon else { return false }
        guard lhs.title == rhs.title else { return false }
        return true
    }
}

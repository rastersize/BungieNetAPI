//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** As/if presentation nodes begin to host more entities as children, these lists will be added to. One list property exists per type of entity that can be treated as a child of this presentation node, and each holds the identifier of the entity and any associated information needed to display the UI for that entity (if anything) */
public struct DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock: APIModel {

    public var collectibles: [DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry]?

    public var presentationNodes: [DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry]?

    public var records: [DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry]?

    public init(collectibles: [DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry]? = nil, presentationNodes: [DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry]? = nil, records: [DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry]? = nil) {
        self.collectibles = collectibles
        self.presentationNodes = presentationNodes
        self.records = records
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        collectibles = try container.decodeArrayIfPresent("collectibles")
        presentationNodes = try container.decodeArrayIfPresent("presentationNodes")
        records = try container.decodeArrayIfPresent("records")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(collectibles, forKey: "collectibles")
        try container.encodeIfPresent(presentationNodes, forKey: "presentationNodes")
        try container.encodeIfPresent(records, forKey: "records")
    }

    public static func == (lhs: DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock, rhs: DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock) -> Bool {
        guard lhs.collectibles == rhs.collectibles else { return false }
        guard lhs.presentationNodes == rhs.presentationNodes else { return false }
        guard lhs.records == rhs.records else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Represents this player's personal completion status for the Activity under a Milestone, if the activity has trackable completion and progress information. (most activities won't, or the concept won't apply. For instance, it makes sense to talk about a tier of a raid as being Completed or having progress, but it doesn't make sense to talk about a Crucible Playlist in those terms. */
public struct DestinyMilestonesDestinyMilestoneActivityCompletionStatus: APIModel {

    /** If the activity has been "completed", that information will be returned here. */
    public var completed: Bool?

    /** If the Activity has discrete "phases" that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity. */
    public var phases: [DestinyMilestonesDestinyMilestoneActivityPhase]?

    public init(completed: Bool? = nil, phases: [DestinyMilestonesDestinyMilestoneActivityPhase]? = nil) {
        self.completed = completed
        self.phases = phases
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        completed = try container.decodeIfPresent("completed")
        phases = try container.decodeArrayIfPresent("phases")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(completed, forKey: "completed")
        try container.encodeIfPresent(phases, forKey: "phases")
    }

    public static func == (lhs: DestinyMilestonesDestinyMilestoneActivityCompletionStatus, rhs: DestinyMilestonesDestinyMilestoneActivityCompletionStatus) -> Bool {
        guard lhs.completed == rhs.completed else { return false }
        guard lhs.phases == rhs.phases else { return false }
        return true
    }
}

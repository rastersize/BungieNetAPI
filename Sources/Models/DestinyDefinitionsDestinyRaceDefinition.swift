//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** In Destiny, "Races" are really more like "Species". Sort of. I mean, are the Awoken a separate species from humans? I'm not sure. But either way, they're defined here. You'll see Exo, Awoken, and Human as examples of these Species. Players will choose one for their character. */
public struct DestinyDefinitionsDestinyRaceDefinition: APIModel {

    public var displayProperties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition?

    /** A localized string referring to the singular form of the Race's name when referred to in gendered form. Keyed by the DestinyGender. */
    public var genderedRaceNames: [String: String]?

    public var genderedRaceNamesByGenderHash: [String: String]?

    /** The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to. */
    public var hash: Int?

    /** The index of the entity as it was found in the investment tables. */
    public var index: Int?

    /** An enumeration defining the existing, known Races/Species for player characters. This value will be the enum value matching this definition. */
    public var raceType: Int?

    /** If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry! */
    public var redacted: Bool?

    public init(displayProperties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition? = nil, genderedRaceNames: [String: String]? = nil, genderedRaceNamesByGenderHash: [String: String]? = nil, hash: Int? = nil, index: Int? = nil, raceType: Int? = nil, redacted: Bool? = nil) {
        self.displayProperties = displayProperties
        self.genderedRaceNames = genderedRaceNames
        self.genderedRaceNamesByGenderHash = genderedRaceNamesByGenderHash
        self.hash = hash
        self.index = index
        self.raceType = raceType
        self.redacted = redacted
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        displayProperties = try container.decodeIfPresent("displayProperties")
        genderedRaceNames = try container.decodeIfPresent("genderedRaceNames")
        genderedRaceNamesByGenderHash = try container.decodeIfPresent("genderedRaceNamesByGenderHash")
        hash = try container.decodeIfPresent("hash")
        index = try container.decodeIfPresent("index")
        raceType = try container.decodeIfPresent("raceType")
        redacted = try container.decodeIfPresent("redacted")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(displayProperties, forKey: "displayProperties")
        try container.encodeIfPresent(genderedRaceNames, forKey: "genderedRaceNames")
        try container.encodeIfPresent(genderedRaceNamesByGenderHash, forKey: "genderedRaceNamesByGenderHash")
        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(index, forKey: "index")
        try container.encodeIfPresent(raceType, forKey: "raceType")
        try container.encodeIfPresent(redacted, forKey: "redacted")
    }

    public static func == (lhs: DestinyDefinitionsDestinyRaceDefinition, rhs: DestinyDefinitionsDestinyRaceDefinition) -> Bool {
        guard lhs.displayProperties == rhs.displayProperties else { return false }
        guard lhs.genderedRaceNames == rhs.genderedRaceNames else { return false }
        guard lhs.genderedRaceNamesByGenderHash == rhs.genderedRaceNamesByGenderHash else { return false }
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.index == rhs.index else { return false }
        guard lhs.raceType == rhs.raceType else { return false }
        guard lhs.redacted == rhs.redacted else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Characters can not only have Inventory buckets (containers of items that are generally matched by their type or functionality), they can also have Equipment Slots.
The Equipment Slot is an indicator that the related bucket can have instanced items equipped on the character. For instance, the Primary Weapon bucket has an Equipment Slot that determines whether you can equip primary weapons, and holds the association between its slot and the inventory bucket from which it can have items equipped.
An Equipment Slot must have a related Inventory Bucket, but not all inventory buckets must have Equipment Slots. */
public struct DestinyDefinitionsDestinyEquipmentSlotDefinition: APIModel {

    /** If True, equipped items should have their custom art dyes applied when rendering the item. Otherwise, custom art dyes on an item should be ignored if the item is equipped in this slot. */
    public var applyCustomArtDyes: Bool?

    /** The Art Dye Channels that apply to this equipment slot. */
    public var artDyeChannels: [DestinyDefinitionsDestinyArtDyeReference]?

    /** The inventory bucket that owns this equipment slot. */
    public var bucketTypeHash: Int?

    public var displayProperties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition?

    /** These technically point to "Equipment Category Definitions". But don't get excited. There's nothing of significant value in those definitions, so I didn't bother to expose them. You can use the hash here to group equipment slots by common functionality, which serves the same purpose as if we had the Equipment Category definitions exposed. */
    public var equipmentCategoryHash: Int?

    /** The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to. */
    public var hash: Int?

    /** The index of the entity as it was found in the investment tables. */
    public var index: Int?

    /** If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry! */
    public var redacted: Bool?

    public init(applyCustomArtDyes: Bool? = nil, artDyeChannels: [DestinyDefinitionsDestinyArtDyeReference]? = nil, bucketTypeHash: Int? = nil, displayProperties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition? = nil, equipmentCategoryHash: Int? = nil, hash: Int? = nil, index: Int? = nil, redacted: Bool? = nil) {
        self.applyCustomArtDyes = applyCustomArtDyes
        self.artDyeChannels = artDyeChannels
        self.bucketTypeHash = bucketTypeHash
        self.displayProperties = displayProperties
        self.equipmentCategoryHash = equipmentCategoryHash
        self.hash = hash
        self.index = index
        self.redacted = redacted
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        applyCustomArtDyes = try container.decodeIfPresent("applyCustomArtDyes")
        artDyeChannels = try container.decodeArrayIfPresent("artDyeChannels")
        bucketTypeHash = try container.decodeIfPresent("bucketTypeHash")
        displayProperties = try container.decodeIfPresent("displayProperties")
        equipmentCategoryHash = try container.decodeIfPresent("equipmentCategoryHash")
        hash = try container.decodeIfPresent("hash")
        index = try container.decodeIfPresent("index")
        redacted = try container.decodeIfPresent("redacted")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(applyCustomArtDyes, forKey: "applyCustomArtDyes")
        try container.encodeIfPresent(artDyeChannels, forKey: "artDyeChannels")
        try container.encodeIfPresent(bucketTypeHash, forKey: "bucketTypeHash")
        try container.encodeIfPresent(displayProperties, forKey: "displayProperties")
        try container.encodeIfPresent(equipmentCategoryHash, forKey: "equipmentCategoryHash")
        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(index, forKey: "index")
        try container.encodeIfPresent(redacted, forKey: "redacted")
    }

    public static func == (lhs: DestinyDefinitionsDestinyEquipmentSlotDefinition, rhs: DestinyDefinitionsDestinyEquipmentSlotDefinition) -> Bool {
        guard lhs.applyCustomArtDyes == rhs.applyCustomArtDyes else { return false }
        guard lhs.artDyeChannels == rhs.artDyeChannels else { return false }
        guard lhs.bucketTypeHash == rhs.bucketTypeHash else { return false }
        guard lhs.displayProperties == rhs.displayProperties else { return false }
        guard lhs.equipmentCategoryHash == rhs.equipmentCategoryHash else { return false }
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.index == rhs.index else { return false }
        guard lhs.redacted == rhs.redacted else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Very basic info about a user as returned by the Account server, but including CrossSave information. Do NOT use as a request contract. */
public struct UserCrossSaveUserMembership: APIModel {

    /** The list of Membership Types indicating the platforms on which this Membership can be used.
 Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list */
    public var applicableMembershipTypes: [Int]?

    /** If there is a cross save override in effect, this value will tell you the type that is overridding this one. */
    public var crossSaveOverride: Int?

    /** Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API. */
    public var displayName: String?

    /** If True, this is a public user membership. */
    public var isPublic: Bool?

    /** Membership ID as they user is known in the Accounts service */
    public var membershipId: Int?

    /** Type of the membership. Not necessarily the native type. */
    public var membershipType: Int?

    public init(applicableMembershipTypes: [Int]? = nil, crossSaveOverride: Int? = nil, displayName: String? = nil, isPublic: Bool? = nil, membershipId: Int? = nil, membershipType: Int? = nil) {
        self.applicableMembershipTypes = applicableMembershipTypes
        self.crossSaveOverride = crossSaveOverride
        self.displayName = displayName
        self.isPublic = isPublic
        self.membershipId = membershipId
        self.membershipType = membershipType
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        applicableMembershipTypes = try container.decodeArrayIfPresent("applicableMembershipTypes")
        crossSaveOverride = try container.decodeIfPresent("crossSaveOverride")
        displayName = try container.decodeIfPresent("displayName")
        isPublic = try container.decodeIfPresent("isPublic")
        membershipId = try container.decodeIfPresent("membershipId")
        membershipType = try container.decodeIfPresent("membershipType")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(applicableMembershipTypes, forKey: "applicableMembershipTypes")
        try container.encodeIfPresent(crossSaveOverride, forKey: "crossSaveOverride")
        try container.encodeIfPresent(displayName, forKey: "displayName")
        try container.encodeIfPresent(isPublic, forKey: "isPublic")
        try container.encodeIfPresent(membershipId, forKey: "membershipId")
        try container.encodeIfPresent(membershipType, forKey: "membershipType")
    }

    public static func == (lhs: UserCrossSaveUserMembership, rhs: UserCrossSaveUserMembership) -> Bool {
        guard lhs.applicableMembershipTypes == rhs.applicableMembershipTypes else { return false }
        guard lhs.crossSaveOverride == rhs.crossSaveOverride else { return false }
        guard lhs.displayName == rhs.displayName else { return false }
        guard lhs.isPublic == rhs.isPublic else { return false }
        guard lhs.membershipId == rhs.membershipId else { return false }
        guard lhs.membershipType == rhs.membershipType else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** This is a reference to, and summary data for, a specific item that you can get as a result of Using or Acquiring some other Item (For example, this could be summary information for an Emote that you can get by opening an an Eververse Box) See DestinyDerivedItemCategoryDefinition for more information. */
public struct DestinyDefinitionsItemsDestinyDerivedItemDefinition: APIModel {

    /** An icon for the item. */
    public var iconPath: String?

    /** A brief description of the item. */
    public var itemDescription: String?

    /** Additional details about the derived item, in addition to the description. */
    public var itemDetail: String?

    /** The hash for the DestinyInventoryItemDefinition of this derived item, if there is one. Sometimes we are given this information as a manual override, in which case there won't be an actual DestinyInventoryItemDefinition for what we display, but you can still show the strings from this object itself. */
    public var itemHash: Int?

    /** The name of the derived item. */
    public var itemName: String?

    /** If the item was derived from a "Preview Vendor", this will be an index into the DestinyVendorDefinition's itemList property. Otherwise, -1. */
    public var vendorItemIndex: Int?

    public init(iconPath: String? = nil, itemDescription: String? = nil, itemDetail: String? = nil, itemHash: Int? = nil, itemName: String? = nil, vendorItemIndex: Int? = nil) {
        self.iconPath = iconPath
        self.itemDescription = itemDescription
        self.itemDetail = itemDetail
        self.itemHash = itemHash
        self.itemName = itemName
        self.vendorItemIndex = vendorItemIndex
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        iconPath = try container.decodeIfPresent("iconPath")
        itemDescription = try container.decodeIfPresent("itemDescription")
        itemDetail = try container.decodeIfPresent("itemDetail")
        itemHash = try container.decodeIfPresent("itemHash")
        itemName = try container.decodeIfPresent("itemName")
        vendorItemIndex = try container.decodeIfPresent("vendorItemIndex")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(iconPath, forKey: "iconPath")
        try container.encodeIfPresent(itemDescription, forKey: "itemDescription")
        try container.encodeIfPresent(itemDetail, forKey: "itemDetail")
        try container.encodeIfPresent(itemHash, forKey: "itemHash")
        try container.encodeIfPresent(itemName, forKey: "itemName")
        try container.encodeIfPresent(vendorItemIndex, forKey: "vendorItemIndex")
    }

    public static func == (lhs: DestinyDefinitionsItemsDestinyDerivedItemDefinition, rhs: DestinyDefinitionsItemsDestinyDerivedItemDefinition) -> Bool {
        guard lhs.iconPath == rhs.iconPath else { return false }
        guard lhs.itemDescription == rhs.itemDescription else { return false }
        guard lhs.itemDetail == rhs.itemDetail else { return false }
        guard lhs.itemHash == rhs.itemHash else { return false }
        guard lhs.itemName == rhs.itemName else { return false }
        guard lhs.vendorItemIndex == rhs.vendorItemIndex else { return false }
        return true
    }
}

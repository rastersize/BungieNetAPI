//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The properties of an individual checklist item. Note that almost everything is optional: it is *highly* variable what kind of data we'll actually be able to return: at times we may have no other relationships to entities at all.
Whatever UI you build, do it with the knowledge that any given entry might not actually be able to be associated with some other Destiny entity. */
public struct DestinyDefinitionsChecklistsDestinyChecklistEntryDefinition: APIModel {

    public var activityHash: Int?

    /** Note that a Bubble's hash doesn't uniquely identify a "top level" entity in Destiny. Only the combination of location and bubble can uniquely identify a place in the world of Destiny: so if bubbleHash is populated, locationHash must too be populated for it to have any meaning.
You can use this property if it is populated to look up the DestinyLocationDefinition's associated .locationReleases[].activityBubbleName property. */
    public var bubbleHash: Int?

    public var destinationHash: Int?

    /** Even if no other associations exist, we will give you *something* for display properties. In cases where we have no associated entities, it may be as simple as a numerical identifier. */
    public var displayProperties: [String: Any]?

    /** The identifier for this Checklist entry. Guaranteed unique only within this Checklist Definition, and not globally/for all checklists. */
    public var hash: Int?

    public var itemHash: Int?

    public var locationHash: Int?

    /** The scope at which this specific entry can be computed. */
    public var scope: Int?

    public var vendorHash: Int?

    public var vendorInteractionIndex: Int?

    public init(activityHash: Int? = nil, bubbleHash: Int? = nil, destinationHash: Int? = nil, displayProperties: [String: Any]? = nil, hash: Int? = nil, itemHash: Int? = nil, locationHash: Int? = nil, scope: Int? = nil, vendorHash: Int? = nil, vendorInteractionIndex: Int? = nil) {
        self.activityHash = activityHash
        self.bubbleHash = bubbleHash
        self.destinationHash = destinationHash
        self.displayProperties = displayProperties
        self.hash = hash
        self.itemHash = itemHash
        self.locationHash = locationHash
        self.scope = scope
        self.vendorHash = vendorHash
        self.vendorInteractionIndex = vendorInteractionIndex
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        activityHash = try container.decodeIfPresent("activityHash")
        bubbleHash = try container.decodeIfPresent("bubbleHash")
        destinationHash = try container.decodeIfPresent("destinationHash")
        displayProperties = try container.decodeAnyIfPresent("displayProperties")
        hash = try container.decodeIfPresent("hash")
        itemHash = try container.decodeIfPresent("itemHash")
        locationHash = try container.decodeIfPresent("locationHash")
        scope = try container.decodeIfPresent("scope")
        vendorHash = try container.decodeIfPresent("vendorHash")
        vendorInteractionIndex = try container.decodeIfPresent("vendorInteractionIndex")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(activityHash, forKey: "activityHash")
        try container.encodeIfPresent(bubbleHash, forKey: "bubbleHash")
        try container.encodeIfPresent(destinationHash, forKey: "destinationHash")
        try container.encodeAnyIfPresent(displayProperties, forKey: "displayProperties")
        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(itemHash, forKey: "itemHash")
        try container.encodeIfPresent(locationHash, forKey: "locationHash")
        try container.encodeIfPresent(scope, forKey: "scope")
        try container.encodeIfPresent(vendorHash, forKey: "vendorHash")
        try container.encodeIfPresent(vendorInteractionIndex, forKey: "vendorInteractionIndex")
    }

    public static func == (lhs: DestinyDefinitionsChecklistsDestinyChecklistEntryDefinition, rhs: DestinyDefinitionsChecklistsDestinyChecklistEntryDefinition) -> Bool {
        guard lhs.activityHash == rhs.activityHash else { return false }
        guard lhs.bubbleHash == rhs.bubbleHash else { return false }
        guard lhs.destinationHash == rhs.destinationHash else { return false }
        guard NSDictionary(dictionary: lhs.displayProperties ?? [:]).isEqual(to: rhs.displayProperties ?? [:]) else { return false }
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.itemHash == rhs.itemHash else { return false }
        guard lhs.locationHash == rhs.locationHash else { return false }
        guard lhs.scope == rhs.scope else { return false }
        guard lhs.vendorHash == rhs.vendorHash else { return false }
        guard lhs.vendorInteractionIndex == rhs.vendorInteractionIndex else { return false }
        return true
    }
}

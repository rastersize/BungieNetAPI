//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** This component contains essential/summary information about the vendor from the perspective of a character-agnostic view. */
public struct DestinyComponentsVendorsDestinyPublicVendorComponent: APIModel {

    /** If True, the Vendor is currently accessible. 
If False, they may not actually be visible in the world at the moment. */
    public var enabled: Bool?

    /** The date when this vendor's inventory will next rotate/refresh.
Note that this is distinct from the date ranges that the vendor is visible/available in-game: this field indicates the specific time when the vendor's available items refresh and rotate, regardless of whether the vendor is actually available at that time. Unfortunately, these two values may be (and are, for the case of important vendors like Xur) different.
Issue https://github.com/Bungie-net/api/issues/353 is tracking a fix to start providing visibility date ranges where possible in addition to this refresh date, so that all important dates for vendors are available for use. */
    public var nextRefreshDate: DateTime?

    /** The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition. */
    public var vendorHash: Int?

    public init(enabled: Bool? = nil, nextRefreshDate: DateTime? = nil, vendorHash: Int? = nil) {
        self.enabled = enabled
        self.nextRefreshDate = nextRefreshDate
        self.vendorHash = vendorHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        enabled = try container.decodeIfPresent("enabled")
        nextRefreshDate = try container.decodeIfPresent("nextRefreshDate")
        vendorHash = try container.decodeIfPresent("vendorHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(enabled, forKey: "enabled")
        try container.encodeIfPresent(nextRefreshDate, forKey: "nextRefreshDate")
        try container.encodeIfPresent(vendorHash, forKey: "vendorHash")
    }

    public static func == (lhs: DestinyComponentsVendorsDestinyPublicVendorComponent, rhs: DestinyComponentsVendorsDestinyPublicVendorComponent) -> Bool {
        guard lhs.enabled == rhs.enabled else { return false }
        guard lhs.nextRefreshDate == rhs.nextRefreshDate else { return false }
        guard lhs.vendorHash == rhs.vendorHash else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Data regarding the progress of a Quest for a specific character. Quests are composed of multiple steps, each with potentially multiple objectives: this QuestStatus will return Objective data for the *currently active* step in this quest. */
public struct DestinyQuestsDestinyQuestStatus: APIModel {

    /** Whether or not the whole quest has been completed, regardless of whether or not you have redeemed the rewards for the quest. */
    public var completed: Bool?

    /** The current Quest Step will be an instanced item in the player's inventory. If you care about that, this is the instance ID of that item. */
    public var itemInstanceId: Int?

    /** The hash identifier for the Quest Item. (Note: Quests are defined as Items, and thus you would use this to look up the quest's DestinyInventoryItemDefinition). For information on all steps in the quest, you can then examine its DestinyInventoryItemDefinition.setData property for Quest Steps (which are *also* items). You can use the Item Definition to display human readable data about the overall quest. */
    public var questHash: Int?

    /** Whether or not you have redeemed rewards for this quest. */
    public var redeemed: Bool?

    /** Whether or not you have started this quest. */
    public var started: Bool?

    /** The hash identifier of the current Quest Step, which is also a DestinyInventoryItemDefinition. You can use this to get human readable data about the current step and what to do in that step. */
    public var stepHash: Int?

    /** A step can have multiple objectives. This will give you the progress for each objective in the current step, in the order in which they are rendered in-game. */
    public var stepObjectives: [DestinyQuestsDestinyObjectiveProgress]?

    /** Whether or not the quest is tracked */
    public var tracked: Bool?

    /** If the quest has a related Vendor that you should talk to in order to initiate the quest/earn rewards/continue the quest, this will be the hash identifier of that Vendor. Look it up its DestinyVendorDefinition. */
    public var vendorHash: Int?

    public init(completed: Bool? = nil, itemInstanceId: Int? = nil, questHash: Int? = nil, redeemed: Bool? = nil, started: Bool? = nil, stepHash: Int? = nil, stepObjectives: [DestinyQuestsDestinyObjectiveProgress]? = nil, tracked: Bool? = nil, vendorHash: Int? = nil) {
        self.completed = completed
        self.itemInstanceId = itemInstanceId
        self.questHash = questHash
        self.redeemed = redeemed
        self.started = started
        self.stepHash = stepHash
        self.stepObjectives = stepObjectives
        self.tracked = tracked
        self.vendorHash = vendorHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        completed = try container.decodeIfPresent("completed")
        itemInstanceId = try container.decodeIfPresent("itemInstanceId")
        questHash = try container.decodeIfPresent("questHash")
        redeemed = try container.decodeIfPresent("redeemed")
        started = try container.decodeIfPresent("started")
        stepHash = try container.decodeIfPresent("stepHash")
        stepObjectives = try container.decodeArrayIfPresent("stepObjectives")
        tracked = try container.decodeIfPresent("tracked")
        vendorHash = try container.decodeIfPresent("vendorHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(completed, forKey: "completed")
        try container.encodeIfPresent(itemInstanceId, forKey: "itemInstanceId")
        try container.encodeIfPresent(questHash, forKey: "questHash")
        try container.encodeIfPresent(redeemed, forKey: "redeemed")
        try container.encodeIfPresent(started, forKey: "started")
        try container.encodeIfPresent(stepHash, forKey: "stepHash")
        try container.encodeIfPresent(stepObjectives, forKey: "stepObjectives")
        try container.encodeIfPresent(tracked, forKey: "tracked")
        try container.encodeIfPresent(vendorHash, forKey: "vendorHash")
    }

    public static func == (lhs: DestinyQuestsDestinyQuestStatus, rhs: DestinyQuestsDestinyQuestStatus) -> Bool {
        guard lhs.completed == rhs.completed else { return false }
        guard lhs.itemInstanceId == rhs.itemInstanceId else { return false }
        guard lhs.questHash == rhs.questHash else { return false }
        guard lhs.redeemed == rhs.redeemed else { return false }
        guard lhs.started == rhs.started else { return false }
        guard lhs.stepHash == rhs.stepHash else { return false }
        guard lhs.stepObjectives == rhs.stepObjectives else { return false }
        guard lhs.tracked == rhs.tracked else { return false }
        guard lhs.vendorHash == rhs.vendorHash else { return false }
        return true
    }
}

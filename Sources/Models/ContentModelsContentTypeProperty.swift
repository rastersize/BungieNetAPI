//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ContentModelsContentTypeProperty: APIModel {

    public var attributes: [String: String]?

    public var bindToProperty: String?

    public var boundRegex: String?

    public var childProperties: [ContentModelsContentTypeProperty]?

    public var contentTypeAllowed: String?

    public var datatype: Int?

    public var defaultValues: [ContentModelsContentTypeDefaultValue]?

    public var enabled: Bool?

    public var entitytype: String?

    public var fallback: Bool?

    public var isCombo: Bool?

    public var isExternalAllowed: Bool?

    public var isImage: Bool?

    public var isTitle: Bool?

    public var isVideo: Bool?

    public var legalContentTypes: [String]?

    public var localizable: Bool?

    public var maxByteLength: Int?

    public var maxFileSize: Int?

    public var maxHeight: Int?

    public var maxLength: Int?

    public var maxWidth: Int?

    public var minHeight: Int?

    public var minWidth: Int?

    public var name: String?

    public var order: Int?

    public var propertyDescription: String?

    public var propertySection: String?

    public var readableName: String?

    public var regexp: String?

    public var representationSelection: [String: String]?

    public var representationValidationString: String?

    public var required: Bool?

    public var rssAttribute: String?

    public var suppressProperty: Bool?

    public var validateAs: String?

    public var value: String?

    public var visible: Bool?

    public var visibleDependency: String?

    public var visibleOn: String?

    public var weight: Int?

    public init(attributes: [String: String]? = nil, bindToProperty: String? = nil, boundRegex: String? = nil, childProperties: [ContentModelsContentTypeProperty]? = nil, contentTypeAllowed: String? = nil, datatype: Int? = nil, defaultValues: [ContentModelsContentTypeDefaultValue]? = nil, enabled: Bool? = nil, entitytype: String? = nil, fallback: Bool? = nil, isCombo: Bool? = nil, isExternalAllowed: Bool? = nil, isImage: Bool? = nil, isTitle: Bool? = nil, isVideo: Bool? = nil, legalContentTypes: [String]? = nil, localizable: Bool? = nil, maxByteLength: Int? = nil, maxFileSize: Int? = nil, maxHeight: Int? = nil, maxLength: Int? = nil, maxWidth: Int? = nil, minHeight: Int? = nil, minWidth: Int? = nil, name: String? = nil, order: Int? = nil, propertyDescription: String? = nil, propertySection: String? = nil, readableName: String? = nil, regexp: String? = nil, representationSelection: [String: String]? = nil, representationValidationString: String? = nil, required: Bool? = nil, rssAttribute: String? = nil, suppressProperty: Bool? = nil, validateAs: String? = nil, value: String? = nil, visible: Bool? = nil, visibleDependency: String? = nil, visibleOn: String? = nil, weight: Int? = nil) {
        self.attributes = attributes
        self.bindToProperty = bindToProperty
        self.boundRegex = boundRegex
        self.childProperties = childProperties
        self.contentTypeAllowed = contentTypeAllowed
        self.datatype = datatype
        self.defaultValues = defaultValues
        self.enabled = enabled
        self.entitytype = entitytype
        self.fallback = fallback
        self.isCombo = isCombo
        self.isExternalAllowed = isExternalAllowed
        self.isImage = isImage
        self.isTitle = isTitle
        self.isVideo = isVideo
        self.legalContentTypes = legalContentTypes
        self.localizable = localizable
        self.maxByteLength = maxByteLength
        self.maxFileSize = maxFileSize
        self.maxHeight = maxHeight
        self.maxLength = maxLength
        self.maxWidth = maxWidth
        self.minHeight = minHeight
        self.minWidth = minWidth
        self.name = name
        self.order = order
        self.propertyDescription = propertyDescription
        self.propertySection = propertySection
        self.readableName = readableName
        self.regexp = regexp
        self.representationSelection = representationSelection
        self.representationValidationString = representationValidationString
        self.required = required
        self.rssAttribute = rssAttribute
        self.suppressProperty = suppressProperty
        self.validateAs = validateAs
        self.value = value
        self.visible = visible
        self.visibleDependency = visibleDependency
        self.visibleOn = visibleOn
        self.weight = weight
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        attributes = try container.decodeIfPresent("attributes")
        bindToProperty = try container.decodeIfPresent("bindToProperty")
        boundRegex = try container.decodeIfPresent("boundRegex")
        childProperties = try container.decodeArrayIfPresent("childProperties")
        contentTypeAllowed = try container.decodeIfPresent("contentTypeAllowed")
        datatype = try container.decodeIfPresent("datatype")
        defaultValues = try container.decodeArrayIfPresent("defaultValues")
        enabled = try container.decodeIfPresent("enabled")
        entitytype = try container.decodeIfPresent("entitytype")
        fallback = try container.decodeIfPresent("fallback")
        isCombo = try container.decodeIfPresent("isCombo")
        isExternalAllowed = try container.decodeIfPresent("isExternalAllowed")
        isImage = try container.decodeIfPresent("isImage")
        isTitle = try container.decodeIfPresent("isTitle")
        isVideo = try container.decodeIfPresent("isVideo")
        legalContentTypes = try container.decodeArrayIfPresent("legalContentTypes")
        localizable = try container.decodeIfPresent("localizable")
        maxByteLength = try container.decodeIfPresent("maxByteLength")
        maxFileSize = try container.decodeIfPresent("maxFileSize")
        maxHeight = try container.decodeIfPresent("maxHeight")
        maxLength = try container.decodeIfPresent("maxLength")
        maxWidth = try container.decodeIfPresent("maxWidth")
        minHeight = try container.decodeIfPresent("minHeight")
        minWidth = try container.decodeIfPresent("minWidth")
        name = try container.decodeIfPresent("name")
        order = try container.decodeIfPresent("order")
        propertyDescription = try container.decodeIfPresent("propertyDescription")
        propertySection = try container.decodeIfPresent("propertySection")
        readableName = try container.decodeIfPresent("readableName")
        regexp = try container.decodeIfPresent("regexp")
        representationSelection = try container.decodeIfPresent("representationSelection")
        representationValidationString = try container.decodeIfPresent("representationValidationString")
        required = try container.decodeIfPresent("required")
        rssAttribute = try container.decodeIfPresent("rssAttribute")
        suppressProperty = try container.decodeIfPresent("suppressProperty")
        validateAs = try container.decodeIfPresent("validateAs")
        value = try container.decodeIfPresent("value")
        visible = try container.decodeIfPresent("visible")
        visibleDependency = try container.decodeIfPresent("visibleDependency")
        visibleOn = try container.decodeIfPresent("visibleOn")
        weight = try container.decodeIfPresent("weight")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(attributes, forKey: "attributes")
        try container.encodeIfPresent(bindToProperty, forKey: "bindToProperty")
        try container.encodeIfPresent(boundRegex, forKey: "boundRegex")
        try container.encodeIfPresent(childProperties, forKey: "childProperties")
        try container.encodeIfPresent(contentTypeAllowed, forKey: "contentTypeAllowed")
        try container.encodeIfPresent(datatype, forKey: "datatype")
        try container.encodeIfPresent(defaultValues, forKey: "defaultValues")
        try container.encodeIfPresent(enabled, forKey: "enabled")
        try container.encodeIfPresent(entitytype, forKey: "entitytype")
        try container.encodeIfPresent(fallback, forKey: "fallback")
        try container.encodeIfPresent(isCombo, forKey: "isCombo")
        try container.encodeIfPresent(isExternalAllowed, forKey: "isExternalAllowed")
        try container.encodeIfPresent(isImage, forKey: "isImage")
        try container.encodeIfPresent(isTitle, forKey: "isTitle")
        try container.encodeIfPresent(isVideo, forKey: "isVideo")
        try container.encodeIfPresent(legalContentTypes, forKey: "legalContentTypes")
        try container.encodeIfPresent(localizable, forKey: "localizable")
        try container.encodeIfPresent(maxByteLength, forKey: "maxByteLength")
        try container.encodeIfPresent(maxFileSize, forKey: "maxFileSize")
        try container.encodeIfPresent(maxHeight, forKey: "maxHeight")
        try container.encodeIfPresent(maxLength, forKey: "maxLength")
        try container.encodeIfPresent(maxWidth, forKey: "maxWidth")
        try container.encodeIfPresent(minHeight, forKey: "minHeight")
        try container.encodeIfPresent(minWidth, forKey: "minWidth")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(order, forKey: "order")
        try container.encodeIfPresent(propertyDescription, forKey: "propertyDescription")
        try container.encodeIfPresent(propertySection, forKey: "propertySection")
        try container.encodeIfPresent(readableName, forKey: "readableName")
        try container.encodeIfPresent(regexp, forKey: "regexp")
        try container.encodeIfPresent(representationSelection, forKey: "representationSelection")
        try container.encodeIfPresent(representationValidationString, forKey: "representationValidationString")
        try container.encodeIfPresent(required, forKey: "required")
        try container.encodeIfPresent(rssAttribute, forKey: "rssAttribute")
        try container.encodeIfPresent(suppressProperty, forKey: "suppressProperty")
        try container.encodeIfPresent(validateAs, forKey: "validateAs")
        try container.encodeIfPresent(value, forKey: "value")
        try container.encodeIfPresent(visible, forKey: "visible")
        try container.encodeIfPresent(visibleDependency, forKey: "visibleDependency")
        try container.encodeIfPresent(visibleOn, forKey: "visibleOn")
        try container.encodeIfPresent(weight, forKey: "weight")
    }

    public static func == (lhs: ContentModelsContentTypeProperty, rhs: ContentModelsContentTypeProperty) -> Bool {
        guard lhs.attributes == rhs.attributes else { return false }
        guard lhs.bindToProperty == rhs.bindToProperty else { return false }
        guard lhs.boundRegex == rhs.boundRegex else { return false }
        guard lhs.childProperties == rhs.childProperties else { return false }
        guard lhs.contentTypeAllowed == rhs.contentTypeAllowed else { return false }
        guard lhs.datatype == rhs.datatype else { return false }
        guard lhs.defaultValues == rhs.defaultValues else { return false }
        guard lhs.enabled == rhs.enabled else { return false }
        guard lhs.entitytype == rhs.entitytype else { return false }
        guard lhs.fallback == rhs.fallback else { return false }
        guard lhs.isCombo == rhs.isCombo else { return false }
        guard lhs.isExternalAllowed == rhs.isExternalAllowed else { return false }
        guard lhs.isImage == rhs.isImage else { return false }
        guard lhs.isTitle == rhs.isTitle else { return false }
        guard lhs.isVideo == rhs.isVideo else { return false }
        guard lhs.legalContentTypes == rhs.legalContentTypes else { return false }
        guard lhs.localizable == rhs.localizable else { return false }
        guard lhs.maxByteLength == rhs.maxByteLength else { return false }
        guard lhs.maxFileSize == rhs.maxFileSize else { return false }
        guard lhs.maxHeight == rhs.maxHeight else { return false }
        guard lhs.maxLength == rhs.maxLength else { return false }
        guard lhs.maxWidth == rhs.maxWidth else { return false }
        guard lhs.minHeight == rhs.minHeight else { return false }
        guard lhs.minWidth == rhs.minWidth else { return false }
        guard lhs.name == rhs.name else { return false }
        guard lhs.order == rhs.order else { return false }
        guard lhs.propertyDescription == rhs.propertyDescription else { return false }
        guard lhs.propertySection == rhs.propertySection else { return false }
        guard lhs.readableName == rhs.readableName else { return false }
        guard lhs.regexp == rhs.regexp else { return false }
        guard lhs.representationSelection == rhs.representationSelection else { return false }
        guard lhs.representationValidationString == rhs.representationValidationString else { return false }
        guard lhs.required == rhs.required else { return false }
        guard lhs.rssAttribute == rhs.rssAttribute else { return false }
        guard lhs.suppressProperty == rhs.suppressProperty else { return false }
        guard lhs.validateAs == rhs.validateAs else { return false }
        guard lhs.value == rhs.value else { return false }
        guard lhs.visible == rhs.visible else { return false }
        guard lhs.visibleDependency == rhs.visibleDependency else { return false }
        guard lhs.visibleOn == rhs.visibleOn else { return false }
        guard lhs.weight == rhs.weight else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** All Sockets have a "Type": a set of common properties that determine when the socket allows Plugs to be inserted, what Categories of Plugs can be inserted, and whether the socket is even visible at all given the current game/character/account state.
See DestinyInventoryItemDefinition for more information about Socketed items and Plugs. */
public struct DestinyDefinitionsSocketsDestinySocketTypeDefinition: APIModel {

    public var alwaysRandomizeSockets: Bool?

    public var avoidDuplicatesOnInitialization: Bool?

    public var currencyScalars: [DestinyDefinitionsSocketsDestinySocketTypeScalarMaterialRequirementEntry]?

    /** There are fields for this display data, but they appear to be unpopulated as of now. I am not sure where in the UI these would show if they even were populated, but I will continue to return this data in case it becomes useful. */
    public var displayProperties: [String: Any]?

    /** The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to. */
    public var hash: Int?

    public var hideDuplicateReusablePlugs: Bool?

    /** The index of the entity as it was found in the investment tables. */
    public var index: Int?

    /** Defines what happens when a plug is inserted into sockets of this type. */
    public var insertAction: [String: Any]?

    public var isPreviewEnabled: Bool?

    /** This property indicates if the socket type determines whether Emblem icons and nameplates should be overridden by the inserted plug item's icon and nameplate. */
    public var overridesUiAppearance: Bool?

    /** A list of Plug "Categories" that are allowed to be plugged into sockets of this type.
These should be compared against a given plug item's DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item's category.
If the plug's category matches any whitelisted plug, or if the whitelist is empty, it is allowed to be inserted. */
    public var plugWhitelist: [DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition]?

    /** If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry! */
    public var redacted: Bool?

    public var socketCategoryHash: Int?

    /** Sometimes a socket isn't visible. These are some of the conditions under which sockets of this type are not visible. Unfortunately, the truth of visibility is much, much more complex. Best to rely on the live data for whether the socket is visible and enabled. */
    public var visibility: Int?

    public init(alwaysRandomizeSockets: Bool? = nil, avoidDuplicatesOnInitialization: Bool? = nil, currencyScalars: [DestinyDefinitionsSocketsDestinySocketTypeScalarMaterialRequirementEntry]? = nil, displayProperties: [String: Any]? = nil, hash: Int? = nil, hideDuplicateReusablePlugs: Bool? = nil, index: Int? = nil, insertAction: [String: Any]? = nil, isPreviewEnabled: Bool? = nil, overridesUiAppearance: Bool? = nil, plugWhitelist: [DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition]? = nil, redacted: Bool? = nil, socketCategoryHash: Int? = nil, visibility: Int? = nil) {
        self.alwaysRandomizeSockets = alwaysRandomizeSockets
        self.avoidDuplicatesOnInitialization = avoidDuplicatesOnInitialization
        self.currencyScalars = currencyScalars
        self.displayProperties = displayProperties
        self.hash = hash
        self.hideDuplicateReusablePlugs = hideDuplicateReusablePlugs
        self.index = index
        self.insertAction = insertAction
        self.isPreviewEnabled = isPreviewEnabled
        self.overridesUiAppearance = overridesUiAppearance
        self.plugWhitelist = plugWhitelist
        self.redacted = redacted
        self.socketCategoryHash = socketCategoryHash
        self.visibility = visibility
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        alwaysRandomizeSockets = try container.decodeIfPresent("alwaysRandomizeSockets")
        avoidDuplicatesOnInitialization = try container.decodeIfPresent("avoidDuplicatesOnInitialization")
        currencyScalars = try container.decodeArrayIfPresent("currencyScalars")
        displayProperties = try container.decodeAnyIfPresent("displayProperties")
        hash = try container.decodeIfPresent("hash")
        hideDuplicateReusablePlugs = try container.decodeIfPresent("hideDuplicateReusablePlugs")
        index = try container.decodeIfPresent("index")
        insertAction = try container.decodeAnyIfPresent("insertAction")
        isPreviewEnabled = try container.decodeIfPresent("isPreviewEnabled")
        overridesUiAppearance = try container.decodeIfPresent("overridesUiAppearance")
        plugWhitelist = try container.decodeArrayIfPresent("plugWhitelist")
        redacted = try container.decodeIfPresent("redacted")
        socketCategoryHash = try container.decodeIfPresent("socketCategoryHash")
        visibility = try container.decodeIfPresent("visibility")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(alwaysRandomizeSockets, forKey: "alwaysRandomizeSockets")
        try container.encodeIfPresent(avoidDuplicatesOnInitialization, forKey: "avoidDuplicatesOnInitialization")
        try container.encodeIfPresent(currencyScalars, forKey: "currencyScalars")
        try container.encodeAnyIfPresent(displayProperties, forKey: "displayProperties")
        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(hideDuplicateReusablePlugs, forKey: "hideDuplicateReusablePlugs")
        try container.encodeIfPresent(index, forKey: "index")
        try container.encodeAnyIfPresent(insertAction, forKey: "insertAction")
        try container.encodeIfPresent(isPreviewEnabled, forKey: "isPreviewEnabled")
        try container.encodeIfPresent(overridesUiAppearance, forKey: "overridesUiAppearance")
        try container.encodeIfPresent(plugWhitelist, forKey: "plugWhitelist")
        try container.encodeIfPresent(redacted, forKey: "redacted")
        try container.encodeIfPresent(socketCategoryHash, forKey: "socketCategoryHash")
        try container.encodeIfPresent(visibility, forKey: "visibility")
    }

    public static func == (lhs: DestinyDefinitionsSocketsDestinySocketTypeDefinition, rhs: DestinyDefinitionsSocketsDestinySocketTypeDefinition) -> Bool {
        guard lhs.alwaysRandomizeSockets == rhs.alwaysRandomizeSockets else { return false }
        guard lhs.avoidDuplicatesOnInitialization == rhs.avoidDuplicatesOnInitialization else { return false }
        guard lhs.currencyScalars == rhs.currencyScalars else { return false }
        guard NSDictionary(dictionary: lhs.displayProperties ?? [:]).isEqual(to: rhs.displayProperties ?? [:]) else { return false }
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.hideDuplicateReusablePlugs == rhs.hideDuplicateReusablePlugs else { return false }
        guard lhs.index == rhs.index else { return false }
        guard NSDictionary(dictionary: lhs.insertAction ?? [:]).isEqual(to: rhs.insertAction ?? [:]) else { return false }
        guard lhs.isPreviewEnabled == rhs.isPreviewEnabled else { return false }
        guard lhs.overridesUiAppearance == rhs.overridesUiAppearance else { return false }
        guard lhs.plugWhitelist == rhs.plugWhitelist else { return false }
        guard lhs.redacted == rhs.redacted else { return false }
        guard lhs.socketCategoryHash == rhs.socketCategoryHash else { return false }
        guard lhs.visibility == rhs.visibility else { return false }
        return true
    }
}

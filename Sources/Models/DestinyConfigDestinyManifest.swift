//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform. */
public struct DestinyConfigDestinyManifest: APIModel {

    /** Information about the "Image Pyramid" for Destiny icons. Where possible, we create smaller versions of Destiny icons. These are found as subfolders under the location of the "original/full size" Destiny images, with the same file name and extension as the original image itself. (this lets us avoid sending largely redundant path info with every entity, at the expense of the smaller versions of the image being less discoverable) */
    public var iconImagePyramidInfo: [DestinyConfigImagePyramidEntry]?

    public var jsonWorldContentPaths: [String: String]?

    public var mobileAssetContentPath: String?

    public var mobileClanBannerDatabasePath: String?

    public var mobileGearAssetDataBases: [DestinyConfigGearAssetDataBaseDefinition]?

    public var mobileGearCDN: [String: String]?

    public var mobileWorldContentPaths: [String: String]?

    public var version: String?

    public init(iconImagePyramidInfo: [DestinyConfigImagePyramidEntry]? = nil, jsonWorldContentPaths: [String: String]? = nil, mobileAssetContentPath: String? = nil, mobileClanBannerDatabasePath: String? = nil, mobileGearAssetDataBases: [DestinyConfigGearAssetDataBaseDefinition]? = nil, mobileGearCDN: [String: String]? = nil, mobileWorldContentPaths: [String: String]? = nil, version: String? = nil) {
        self.iconImagePyramidInfo = iconImagePyramidInfo
        self.jsonWorldContentPaths = jsonWorldContentPaths
        self.mobileAssetContentPath = mobileAssetContentPath
        self.mobileClanBannerDatabasePath = mobileClanBannerDatabasePath
        self.mobileGearAssetDataBases = mobileGearAssetDataBases
        self.mobileGearCDN = mobileGearCDN
        self.mobileWorldContentPaths = mobileWorldContentPaths
        self.version = version
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        iconImagePyramidInfo = try container.decodeArrayIfPresent("iconImagePyramidInfo")
        jsonWorldContentPaths = try container.decodeIfPresent("jsonWorldContentPaths")
        mobileAssetContentPath = try container.decodeIfPresent("mobileAssetContentPath")
        mobileClanBannerDatabasePath = try container.decodeIfPresent("mobileClanBannerDatabasePath")
        mobileGearAssetDataBases = try container.decodeArrayIfPresent("mobileGearAssetDataBases")
        mobileGearCDN = try container.decodeIfPresent("mobileGearCDN")
        mobileWorldContentPaths = try container.decodeIfPresent("mobileWorldContentPaths")
        version = try container.decodeIfPresent("version")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(iconImagePyramidInfo, forKey: "iconImagePyramidInfo")
        try container.encodeIfPresent(jsonWorldContentPaths, forKey: "jsonWorldContentPaths")
        try container.encodeIfPresent(mobileAssetContentPath, forKey: "mobileAssetContentPath")
        try container.encodeIfPresent(mobileClanBannerDatabasePath, forKey: "mobileClanBannerDatabasePath")
        try container.encodeIfPresent(mobileGearAssetDataBases, forKey: "mobileGearAssetDataBases")
        try container.encodeIfPresent(mobileGearCDN, forKey: "mobileGearCDN")
        try container.encodeIfPresent(mobileWorldContentPaths, forKey: "mobileWorldContentPaths")
        try container.encodeIfPresent(version, forKey: "version")
    }

    public static func == (lhs: DestinyConfigDestinyManifest, rhs: DestinyConfigDestinyManifest) -> Bool {
        guard lhs.iconImagePyramidInfo == rhs.iconImagePyramidInfo else { return false }
        guard lhs.jsonWorldContentPaths == rhs.jsonWorldContentPaths else { return false }
        guard lhs.mobileAssetContentPath == rhs.mobileAssetContentPath else { return false }
        guard lhs.mobileClanBannerDatabasePath == rhs.mobileClanBannerDatabasePath else { return false }
        guard lhs.mobileGearAssetDataBases == rhs.mobileGearAssetDataBases else { return false }
        guard lhs.mobileGearCDN == rhs.mobileGearCDN else { return false }
        guard lhs.mobileWorldContentPaths == rhs.mobileWorldContentPaths else { return false }
        guard lhs.version == rhs.version else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Inventory Items can reward progression when actions are performed on them. A common example of this in Destiny 1 was Bounties, which would reward Experience on your Character and the like when you completed the bounty.
Note that this maps to a DestinyProgressionMappingDefinition, and *not* a DestinyProgressionDefinition directly. This is apparently so that multiple progressions can be granted progression points/experience at the same time. */
public struct DestinyDefinitionsDestinyProgressionRewardDefinition: APIModel {

    /** The amount of experience to give to each of the mapped progressions. */
    public var amount: Int?

    /** If true, the game's internal mechanisms to throttle progression should be applied. */
    public var applyThrottles: Bool?

    /** The hash identifier of the DestinyProgressionMappingDefinition that contains the progressions for which experience should be applied. */
    public var progressionMappingHash: Int?

    public init(amount: Int? = nil, applyThrottles: Bool? = nil, progressionMappingHash: Int? = nil) {
        self.amount = amount
        self.applyThrottles = applyThrottles
        self.progressionMappingHash = progressionMappingHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        amount = try container.decodeIfPresent("amount")
        applyThrottles = try container.decodeIfPresent("applyThrottles")
        progressionMappingHash = try container.decodeIfPresent("progressionMappingHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(applyThrottles, forKey: "applyThrottles")
        try container.encodeIfPresent(progressionMappingHash, forKey: "progressionMappingHash")
    }

    public static func == (lhs: DestinyDefinitionsDestinyProgressionRewardDefinition, rhs: DestinyDefinitionsDestinyProgressionRewardDefinition) -> Bool {
        guard lhs.amount == rhs.amount else { return false }
        guard lhs.applyThrottles == rhs.applyThrottles else { return false }
        guard lhs.progressionMappingHash == rhs.progressionMappingHash else { return false }
        return true
    }
}

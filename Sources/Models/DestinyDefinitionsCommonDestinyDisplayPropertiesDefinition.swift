//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information. */
public struct DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition: APIModel {

    public var description: String?

    public var hasIcon: Bool?

    /** If this item has a high-res icon (at least for now, many things won't), then the path to that icon will be here. */
    public var highResIcon: String?

    /** Note that "icon" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.
But usually, it will be a small square image that you can use as... well, an icon.
They are currently represented as 96px x 96px images. */
    public var icon: String?

    public var name: String?

    public init(description: String? = nil, hasIcon: Bool? = nil, highResIcon: String? = nil, icon: String? = nil, name: String? = nil) {
        self.description = description
        self.hasIcon = hasIcon
        self.highResIcon = highResIcon
        self.icon = icon
        self.name = name
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        description = try container.decodeIfPresent("description")
        hasIcon = try container.decodeIfPresent("hasIcon")
        highResIcon = try container.decodeIfPresent("highResIcon")
        icon = try container.decodeIfPresent("icon")
        name = try container.decodeIfPresent("name")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(hasIcon, forKey: "hasIcon")
        try container.encodeIfPresent(highResIcon, forKey: "highResIcon")
        try container.encodeIfPresent(icon, forKey: "icon")
        try container.encodeIfPresent(name, forKey: "name")
    }

    public static func == (lhs: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition, rhs: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) -> Bool {
        guard lhs.description == rhs.description else { return false }
        guard lhs.hasIcon == rhs.hasIcon else { return false }
        guard lhs.highResIcon == rhs.highResIcon else { return false }
        guard lhs.icon == rhs.icon else { return false }
        guard lhs.name == rhs.name else { return false }
        return true
    }
}

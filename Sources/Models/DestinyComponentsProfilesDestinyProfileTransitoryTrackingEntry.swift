//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** This represents a single "thing" being tracked by the player.
This can point to many types of entities, but only a subset of them will actually have a valid hash identifier for whatever it is being pointed to.
It's up to you to interpret what it means when various combinations of these entries have values being tracked. */
public struct DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry: APIModel {

    /** OPTIONAL - If this is tracking the status of a DestinyActivityDefinition, this is the identifier for that activity. */
    public var activityHash: Int?

    /** OPTIONAL - If this is tracking the status of a DestinyInventoryItemDefinition, this is the identifier for that item. */
    public var itemHash: Int?

    /** OPTIONAL - If this is tracking a DestinyLocationDefinition, this is the identifier for that location. */
    public var locationHash: Int?

    /** OPTIONAL - If this is tracking the status of a DestinyObjectiveDefinition, this is the identifier for that objective. */
    public var objectiveHash: Int?

    /** OPTIONAL - If this is tracking the status of a quest, this is the identifier for the DestinyInventoryItemDefinition that containst that questline data. */
    public var questlineItemHash: Int?

    /** OPTIONAL - I've got to level with you, I don't really know what this is. Is it when you started tracking it? Is it only populated for tracked items that have time limits?
I don't know, but we can get at it - when I get time to actually test what it is, I'll update this. In the meantime, bask in the mysterious data. */
    public var trackedDate: DateTime?

    public init(activityHash: Int? = nil, itemHash: Int? = nil, locationHash: Int? = nil, objectiveHash: Int? = nil, questlineItemHash: Int? = nil, trackedDate: DateTime? = nil) {
        self.activityHash = activityHash
        self.itemHash = itemHash
        self.locationHash = locationHash
        self.objectiveHash = objectiveHash
        self.questlineItemHash = questlineItemHash
        self.trackedDate = trackedDate
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        activityHash = try container.decodeIfPresent("activityHash")
        itemHash = try container.decodeIfPresent("itemHash")
        locationHash = try container.decodeIfPresent("locationHash")
        objectiveHash = try container.decodeIfPresent("objectiveHash")
        questlineItemHash = try container.decodeIfPresent("questlineItemHash")
        trackedDate = try container.decodeIfPresent("trackedDate")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(activityHash, forKey: "activityHash")
        try container.encodeIfPresent(itemHash, forKey: "itemHash")
        try container.encodeIfPresent(locationHash, forKey: "locationHash")
        try container.encodeIfPresent(objectiveHash, forKey: "objectiveHash")
        try container.encodeIfPresent(questlineItemHash, forKey: "questlineItemHash")
        try container.encodeIfPresent(trackedDate, forKey: "trackedDate")
    }

    public static func == (lhs: DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry, rhs: DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry) -> Bool {
        guard lhs.activityHash == rhs.activityHash else { return false }
        guard lhs.itemHash == rhs.itemHash else { return false }
        guard lhs.locationHash == rhs.locationHash else { return false }
        guard lhs.objectiveHash == rhs.objectiveHash else { return false }
        guard lhs.questlineItemHash == rhs.questlineItemHash else { return false }
        guard lhs.trackedDate == rhs.trackedDate else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct TrendingTrendingDetail: APIModel {

    public var creation: TrendingTrendingEntryCommunityCreation?

    public var destinyActivity: TrendingTrendingEntryDestinyActivity?

    public var destinyItem: TrendingTrendingEntryDestinyItem?

    public var destinyRitual: TrendingTrendingEntryDestinyRitual?

    public var entityType: Int?

    public var identifier: String?

    public var news: TrendingTrendingEntryNews?

    public var stream: TrendingTrendingEntryCommunityStream?

    public var support: TrendingTrendingEntrySupportArticle?

    public init(creation: TrendingTrendingEntryCommunityCreation? = nil, destinyActivity: TrendingTrendingEntryDestinyActivity? = nil, destinyItem: TrendingTrendingEntryDestinyItem? = nil, destinyRitual: TrendingTrendingEntryDestinyRitual? = nil, entityType: Int? = nil, identifier: String? = nil, news: TrendingTrendingEntryNews? = nil, stream: TrendingTrendingEntryCommunityStream? = nil, support: TrendingTrendingEntrySupportArticle? = nil) {
        self.creation = creation
        self.destinyActivity = destinyActivity
        self.destinyItem = destinyItem
        self.destinyRitual = destinyRitual
        self.entityType = entityType
        self.identifier = identifier
        self.news = news
        self.stream = stream
        self.support = support
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        creation = try container.decodeIfPresent("creation")
        destinyActivity = try container.decodeIfPresent("destinyActivity")
        destinyItem = try container.decodeIfPresent("destinyItem")
        destinyRitual = try container.decodeIfPresent("destinyRitual")
        entityType = try container.decodeIfPresent("entityType")
        identifier = try container.decodeIfPresent("identifier")
        news = try container.decodeIfPresent("news")
        stream = try container.decodeIfPresent("stream")
        support = try container.decodeIfPresent("support")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(creation, forKey: "creation")
        try container.encodeIfPresent(destinyActivity, forKey: "destinyActivity")
        try container.encodeIfPresent(destinyItem, forKey: "destinyItem")
        try container.encodeIfPresent(destinyRitual, forKey: "destinyRitual")
        try container.encodeIfPresent(entityType, forKey: "entityType")
        try container.encodeIfPresent(identifier, forKey: "identifier")
        try container.encodeIfPresent(news, forKey: "news")
        try container.encodeIfPresent(stream, forKey: "stream")
        try container.encodeIfPresent(support, forKey: "support")
    }

    public static func == (lhs: TrendingTrendingDetail, rhs: TrendingTrendingDetail) -> Bool {
        guard lhs.creation == rhs.creation else { return false }
        guard lhs.destinyActivity == rhs.destinyActivity else { return false }
        guard lhs.destinyItem == rhs.destinyItem else { return false }
        guard lhs.destinyRitual == rhs.destinyRitual else { return false }
        guard lhs.entityType == rhs.entityType else { return false }
        guard lhs.identifier == rhs.identifier else { return false }
        guard lhs.news == rhs.news else { return false }
        guard lhs.stream == rhs.stream else { return false }
        guard lhs.support == rhs.support else { return false }
        return true
    }
}

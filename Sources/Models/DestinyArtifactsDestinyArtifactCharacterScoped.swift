//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinyArtifactsDestinyArtifactCharacterScoped: APIModel {

    public var artifactHash: Int?

    public var pointsUsed: Int?

    public var resetCount: Int?

    public var tiers: [DestinyArtifactsDestinyArtifactTier]?

    public init(artifactHash: Int? = nil, pointsUsed: Int? = nil, resetCount: Int? = nil, tiers: [DestinyArtifactsDestinyArtifactTier]? = nil) {
        self.artifactHash = artifactHash
        self.pointsUsed = pointsUsed
        self.resetCount = resetCount
        self.tiers = tiers
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        artifactHash = try container.decodeIfPresent("artifactHash")
        pointsUsed = try container.decodeIfPresent("pointsUsed")
        resetCount = try container.decodeIfPresent("resetCount")
        tiers = try container.decodeArrayIfPresent("tiers")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(artifactHash, forKey: "artifactHash")
        try container.encodeIfPresent(pointsUsed, forKey: "pointsUsed")
        try container.encodeIfPresent(resetCount, forKey: "resetCount")
        try container.encodeIfPresent(tiers, forKey: "tiers")
    }

    public static func == (lhs: DestinyArtifactsDestinyArtifactCharacterScoped, rhs: DestinyArtifactsDestinyArtifactCharacterScoped) -> Bool {
        guard lhs.artifactHash == rhs.artifactHash else { return false }
        guard lhs.pointsUsed == rhs.pointsUsed else { return false }
        guard lhs.resetCount == rhs.resetCount else { return false }
        guard lhs.tiers == rhs.tiers else { return false }
        return true
    }
}

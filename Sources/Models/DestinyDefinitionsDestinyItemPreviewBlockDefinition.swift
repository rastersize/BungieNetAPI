//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Items like Sacks or Boxes can have items that it shows in-game when you view details that represent the items you can obtain if you use or acquire the item.
This defines those categories, and gives some insights into that data's source. */
public struct DestinyDefinitionsDestinyItemPreviewBlockDefinition: APIModel {

    /** If this item should show you Artifact information when you preview it, this is the hash identifier of the DestinyArtifactDefinition for the artifact whose data should be shown. */
    public var artifactHash: Int?

    /** This is a list of the items being previewed, categorized in the same way as they are in the preview UI. */
    public var derivedItemCategories: [DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition]?

    /** If the preview has an associated action (like "Open"), this will be the localized string for that action. */
    public var previewActionString: String?

    /** If the preview data is derived from a fake "Preview" Vendor, this will be the hash identifier for the DestinyVendorDefinition of that fake vendor. */
    public var previewVendorHash: Int?

    /** A string that the game UI uses as a hint for which detail screen to show for the item. You, too, can leverage this for your own custom screen detail views. Note, however, that these are arbitrarily defined by designers: there's no guarantees of a fixed, known number of these - so fall back to something reasonable if you don't recognize it. */
    public var screenStyle: String?

    public init(artifactHash: Int? = nil, derivedItemCategories: [DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition]? = nil, previewActionString: String? = nil, previewVendorHash: Int? = nil, screenStyle: String? = nil) {
        self.artifactHash = artifactHash
        self.derivedItemCategories = derivedItemCategories
        self.previewActionString = previewActionString
        self.previewVendorHash = previewVendorHash
        self.screenStyle = screenStyle
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        artifactHash = try container.decodeIfPresent("artifactHash")
        derivedItemCategories = try container.decodeArrayIfPresent("derivedItemCategories")
        previewActionString = try container.decodeIfPresent("previewActionString")
        previewVendorHash = try container.decodeIfPresent("previewVendorHash")
        screenStyle = try container.decodeIfPresent("screenStyle")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(artifactHash, forKey: "artifactHash")
        try container.encodeIfPresent(derivedItemCategories, forKey: "derivedItemCategories")
        try container.encodeIfPresent(previewActionString, forKey: "previewActionString")
        try container.encodeIfPresent(previewVendorHash, forKey: "previewVendorHash")
        try container.encodeIfPresent(screenStyle, forKey: "screenStyle")
    }

    public static func == (lhs: DestinyDefinitionsDestinyItemPreviewBlockDefinition, rhs: DestinyDefinitionsDestinyItemPreviewBlockDefinition) -> Bool {
        guard lhs.artifactHash == rhs.artifactHash else { return false }
        guard lhs.derivedItemCategories == rhs.derivedItemCategories else { return false }
        guard lhs.previewActionString == rhs.previewActionString else { return false }
        guard lhs.previewVendorHash == rhs.previewVendorHash else { return false }
        guard lhs.screenStyle == rhs.screenStyle else { return false }
        return true
    }
}

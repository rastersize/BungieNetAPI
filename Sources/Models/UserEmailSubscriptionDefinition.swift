//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Defines a single subscription: permission to send emails for a specific, focused subject (generally timeboxed, such as for a specific release of a product or feature). */
public struct UserEmailSubscriptionDefinition: APIModel {

    /** A dictionary of localized text for the EMail Opt-in setting, keyed by the locale. */
    public var localization: [String: UserEMailSettingSubscriptionLocalization]?

    /** The unique identifier for this subscription. */
    public var name: String?

    /** The bitflag value for this subscription. Should be a unique power of two value. */
    public var value: Int?

    public init(localization: [String: UserEMailSettingSubscriptionLocalization]? = nil, name: String? = nil, value: Int? = nil) {
        self.localization = localization
        self.name = name
        self.value = value
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        localization = try container.decodeIfPresent("localization")
        name = try container.decodeIfPresent("name")
        value = try container.decodeIfPresent("value")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(localization, forKey: "localization")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(value, forKey: "value")
    }

    public static func == (lhs: UserEmailSubscriptionDefinition, rhs: UserEmailSubscriptionDefinition) -> Bool {
        guard lhs.localization == rhs.localization else { return false }
        guard lhs.name == rhs.name else { return false }
        guard lhs.value == rhs.value else { return false }
        return true
    }
}

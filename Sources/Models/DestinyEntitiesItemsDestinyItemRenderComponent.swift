//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Many items can be rendered in 3D. When you request this block, you will obtain the custom data needed to render this specific instance of the item. */
public struct DestinyEntitiesItemsDestinyItemRenderComponent: APIModel {

    /** A dictionary for rendering gear components, with:
key = Art Arrangement Region Index
value = The chosen Arrangement Index for the Region, based on the value of a stat on the item used for making the choice. */
    public var artRegions: [String: Int]?

    /** If you should use custom dyes on this item, it will be indicated here. */
    public var useCustomDyes: Bool?

    public init(artRegions: [String: Int]? = nil, useCustomDyes: Bool? = nil) {
        self.artRegions = artRegions
        self.useCustomDyes = useCustomDyes
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        artRegions = try container.decodeIfPresent("artRegions")
        useCustomDyes = try container.decodeIfPresent("useCustomDyes")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(artRegions, forKey: "artRegions")
        try container.encodeIfPresent(useCustomDyes, forKey: "useCustomDyes")
    }

    public static func == (lhs: DestinyEntitiesItemsDestinyItemRenderComponent, rhs: DestinyEntitiesItemsDestinyItemRenderComponent) -> Bool {
        guard lhs.artRegions == rhs.artRegions else { return false }
        guard lhs.useCustomDyes == rhs.useCustomDyes else { return false }
        return true
    }
}

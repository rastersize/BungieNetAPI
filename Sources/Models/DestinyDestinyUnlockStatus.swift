//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Indicates the status of an "Unlock Flag" on a Character or Profile.
These are individual bits of state that can be either set or not set, and sometimes provide interesting human-readable information in their related DestinyUnlockDefinition. */
public struct DestinyDestinyUnlockStatus: APIModel {

    /** Whether the unlock flag is set. */
    public var isSet: Bool?

    /** The hash identifier for the Unlock Flag. Use to lookup DestinyUnlockDefinition for static data. Not all unlocks have human readable data - in fact, most don't. But when they do, it can be very useful to show. Even if they don't have human readable data, you might be able to infer the meaning of an unlock flag with a bit of experimentation... */
    public var unlockHash: Int?

    public init(isSet: Bool? = nil, unlockHash: Int? = nil) {
        self.isSet = isSet
        self.unlockHash = unlockHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        isSet = try container.decodeIfPresent("isSet")
        unlockHash = try container.decodeIfPresent("unlockHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(isSet, forKey: "isSet")
        try container.encodeIfPresent(unlockHash, forKey: "unlockHash")
    }

    public static func == (lhs: DestinyDestinyUnlockStatus, rhs: DestinyDestinyUnlockStatus) -> Bool {
        guard lhs.isSet == rhs.isSet else { return false }
        guard lhs.unlockHash == rhs.unlockHash else { return false }
        return true
    }
}

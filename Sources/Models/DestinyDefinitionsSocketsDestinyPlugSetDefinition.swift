//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Sometimes, we have large sets of reusable plugs that are defined identically and thus can (and in some cases, are so large that they *must*) be shared across the places where they are used. These are the definitions for those reusable sets of plugs. 
 See DestinyItemSocketEntryDefinition.plugSource and reusablePlugSetHash for the relationship between these reusable plug sets and the sockets that leverage them (for starters, Emotes).
 As of the release of Shadowkeep (Late 2019), these will begin to be sourced from game content directly - which means there will be many more of them, but it also means we may not get all data that we used to get for them.
 DisplayProperties, in particular, will no longer be guaranteed to contain valid information. We will make a best effort to guess what ought to be populated there where possible, but it will be invalid for many/most plug sets. */
public struct DestinyDefinitionsSocketsDestinyPlugSetDefinition: APIModel {

    /** If you want to show these plugs in isolation, these are the display properties for them. */
    public var displayProperties: [String: Any]?

    /** The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to. */
    public var hash: Int?

    /** The index of the entity as it was found in the investment tables. */
    public var index: Int?

    /** Mostly for our debugging or reporting bugs, BNet is making "fake" plug sets in a desperate effort to reduce socket sizes.
 If this is true, the plug set was generated by BNet: if it looks wrong, that's a good indicator that it's bungie.net that fucked this up. */
    public var isFakePlugSet: Bool?

    /** If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry! */
    public var redacted: Bool?

    /** This is a list of pre-determined plugs that can be plugged into this socket, without the character having the plug in their inventory.
If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs. */
    public var reusablePlugItems: [DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition]?

    public init(displayProperties: [String: Any]? = nil, hash: Int? = nil, index: Int? = nil, isFakePlugSet: Bool? = nil, redacted: Bool? = nil, reusablePlugItems: [DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition]? = nil) {
        self.displayProperties = displayProperties
        self.hash = hash
        self.index = index
        self.isFakePlugSet = isFakePlugSet
        self.redacted = redacted
        self.reusablePlugItems = reusablePlugItems
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        displayProperties = try container.decodeAnyIfPresent("displayProperties")
        hash = try container.decodeIfPresent("hash")
        index = try container.decodeIfPresent("index")
        isFakePlugSet = try container.decodeIfPresent("isFakePlugSet")
        redacted = try container.decodeIfPresent("redacted")
        reusablePlugItems = try container.decodeArrayIfPresent("reusablePlugItems")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeAnyIfPresent(displayProperties, forKey: "displayProperties")
        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(index, forKey: "index")
        try container.encodeIfPresent(isFakePlugSet, forKey: "isFakePlugSet")
        try container.encodeIfPresent(redacted, forKey: "redacted")
        try container.encodeIfPresent(reusablePlugItems, forKey: "reusablePlugItems")
    }

    public static func == (lhs: DestinyDefinitionsSocketsDestinyPlugSetDefinition, rhs: DestinyDefinitionsSocketsDestinyPlugSetDefinition) -> Bool {
        guard NSDictionary(dictionary: lhs.displayProperties ?? [:]).isEqual(to: rhs.displayProperties ?? [:]) else { return false }
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.index == rhs.index else { return false }
        guard lhs.isFakePlugSet == rhs.isFakePlugSet else { return false }
        guard lhs.redacted == rhs.redacted else { return false }
        guard lhs.reusablePlugItems == rhs.reusablePlugItems else { return false }
        return true
    }
}

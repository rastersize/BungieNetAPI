//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A "Location" is a sort of shortcut for referring to a specific combination of Activity, Destination, Place, and even Bubble or NavPoint within a space.
Most of this data isn't intrinsically useful to us, but Objectives refer to locations, and through that we can at least infer the Activity, Destination, and Place being referred to by the Objective. */
public struct DestinyDefinitionsDestinyLocationDefinition: APIModel {

    /** The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to. */
    public var hash: Int?

    /** The index of the entity as it was found in the investment tables. */
    public var index: Int?

    /** A Location may refer to different specific spots in the world based on the world's current state. This is a list of those potential spots, and the data we can use at runtime to determine which one of the spots is the currently valid one. */
    public var locationReleases: [DestinyDefinitionsDestinyLocationReleaseDefinition]?

    /** If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry! */
    public var redacted: Bool?

    /** If the location has a Vendor on it, this is the hash identifier for that Vendor. Look them up with DestinyVendorDefinition. */
    public var vendorHash: Int?

    public init(hash: Int? = nil, index: Int? = nil, locationReleases: [DestinyDefinitionsDestinyLocationReleaseDefinition]? = nil, redacted: Bool? = nil, vendorHash: Int? = nil) {
        self.hash = hash
        self.index = index
        self.locationReleases = locationReleases
        self.redacted = redacted
        self.vendorHash = vendorHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        hash = try container.decodeIfPresent("hash")
        index = try container.decodeIfPresent("index")
        locationReleases = try container.decodeArrayIfPresent("locationReleases")
        redacted = try container.decodeIfPresent("redacted")
        vendorHash = try container.decodeIfPresent("vendorHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(index, forKey: "index")
        try container.encodeIfPresent(locationReleases, forKey: "locationReleases")
        try container.encodeIfPresent(redacted, forKey: "redacted")
        try container.encodeIfPresent(vendorHash, forKey: "vendorHash")
    }

    public static func == (lhs: DestinyDefinitionsDestinyLocationDefinition, rhs: DestinyDefinitionsDestinyLocationDefinition) -> Bool {
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.index == rhs.index else { return false }
        guard lhs.locationReleases == rhs.locationReleases else { return false }
        guard lhs.redacted == rhs.redacted else { return false }
        guard lhs.vendorHash == rhs.vendorHash else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ContentModelsContentTypeDescription: APIModel {

    public var allowComments: Bool?

    public var autoEnglishPropertyFallback: Bool?

    public var bindIdentifierToProperty: String?

    public var boundRegex: String?

    public var bulkUploadable: Bool?

    public var cType: String?

    public var contentDescription: String?

    public var forceIdentifierBinding: Bool?

    public var name: String?

    public var previewImage: String?

    public var previews: [ContentModelsContentPreview]?

    public var priority: Int?

    public var properties: [ContentModelsContentTypeProperty]?

    public var propertySections: [ContentModelsContentTypePropertySection]?

    public var reminder: String?

    public var showInContentEditor: Bool?

    public var suppressCmsPath: Bool?

    public var tagMetadata: [ContentModelsTagMetadataDefinition]?

    public var tagMetadataItems: [String: ContentModelsTagMetadataItem]?

    public var typeOf: String?

    public var usageExamples: [String]?

    public init(allowComments: Bool? = nil, autoEnglishPropertyFallback: Bool? = nil, bindIdentifierToProperty: String? = nil, boundRegex: String? = nil, bulkUploadable: Bool? = nil, cType: String? = nil, contentDescription: String? = nil, forceIdentifierBinding: Bool? = nil, name: String? = nil, previewImage: String? = nil, previews: [ContentModelsContentPreview]? = nil, priority: Int? = nil, properties: [ContentModelsContentTypeProperty]? = nil, propertySections: [ContentModelsContentTypePropertySection]? = nil, reminder: String? = nil, showInContentEditor: Bool? = nil, suppressCmsPath: Bool? = nil, tagMetadata: [ContentModelsTagMetadataDefinition]? = nil, tagMetadataItems: [String: ContentModelsTagMetadataItem]? = nil, typeOf: String? = nil, usageExamples: [String]? = nil) {
        self.allowComments = allowComments
        self.autoEnglishPropertyFallback = autoEnglishPropertyFallback
        self.bindIdentifierToProperty = bindIdentifierToProperty
        self.boundRegex = boundRegex
        self.bulkUploadable = bulkUploadable
        self.cType = cType
        self.contentDescription = contentDescription
        self.forceIdentifierBinding = forceIdentifierBinding
        self.name = name
        self.previewImage = previewImage
        self.previews = previews
        self.priority = priority
        self.properties = properties
        self.propertySections = propertySections
        self.reminder = reminder
        self.showInContentEditor = showInContentEditor
        self.suppressCmsPath = suppressCmsPath
        self.tagMetadata = tagMetadata
        self.tagMetadataItems = tagMetadataItems
        self.typeOf = typeOf
        self.usageExamples = usageExamples
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        allowComments = try container.decodeIfPresent("allowComments")
        autoEnglishPropertyFallback = try container.decodeIfPresent("autoEnglishPropertyFallback")
        bindIdentifierToProperty = try container.decodeIfPresent("bindIdentifierToProperty")
        boundRegex = try container.decodeIfPresent("boundRegex")
        bulkUploadable = try container.decodeIfPresent("bulkUploadable")
        cType = try container.decodeIfPresent("cType")
        contentDescription = try container.decodeIfPresent("contentDescription")
        forceIdentifierBinding = try container.decodeIfPresent("forceIdentifierBinding")
        name = try container.decodeIfPresent("name")
        previewImage = try container.decodeIfPresent("previewImage")
        previews = try container.decodeArrayIfPresent("previews")
        priority = try container.decodeIfPresent("priority")
        properties = try container.decodeArrayIfPresent("properties")
        propertySections = try container.decodeArrayIfPresent("propertySections")
        reminder = try container.decodeIfPresent("reminder")
        showInContentEditor = try container.decodeIfPresent("showInContentEditor")
        suppressCmsPath = try container.decodeIfPresent("suppressCmsPath")
        tagMetadata = try container.decodeArrayIfPresent("tagMetadata")
        tagMetadataItems = try container.decodeIfPresent("tagMetadataItems")
        typeOf = try container.decodeIfPresent("typeOf")
        usageExamples = try container.decodeArrayIfPresent("usageExamples")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(allowComments, forKey: "allowComments")
        try container.encodeIfPresent(autoEnglishPropertyFallback, forKey: "autoEnglishPropertyFallback")
        try container.encodeIfPresent(bindIdentifierToProperty, forKey: "bindIdentifierToProperty")
        try container.encodeIfPresent(boundRegex, forKey: "boundRegex")
        try container.encodeIfPresent(bulkUploadable, forKey: "bulkUploadable")
        try container.encodeIfPresent(cType, forKey: "cType")
        try container.encodeIfPresent(contentDescription, forKey: "contentDescription")
        try container.encodeIfPresent(forceIdentifierBinding, forKey: "forceIdentifierBinding")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(previewImage, forKey: "previewImage")
        try container.encodeIfPresent(previews, forKey: "previews")
        try container.encodeIfPresent(priority, forKey: "priority")
        try container.encodeIfPresent(properties, forKey: "properties")
        try container.encodeIfPresent(propertySections, forKey: "propertySections")
        try container.encodeIfPresent(reminder, forKey: "reminder")
        try container.encodeIfPresent(showInContentEditor, forKey: "showInContentEditor")
        try container.encodeIfPresent(suppressCmsPath, forKey: "suppressCmsPath")
        try container.encodeIfPresent(tagMetadata, forKey: "tagMetadata")
        try container.encodeIfPresent(tagMetadataItems, forKey: "tagMetadataItems")
        try container.encodeIfPresent(typeOf, forKey: "typeOf")
        try container.encodeIfPresent(usageExamples, forKey: "usageExamples")
    }

    public static func == (lhs: ContentModelsContentTypeDescription, rhs: ContentModelsContentTypeDescription) -> Bool {
        guard lhs.allowComments == rhs.allowComments else { return false }
        guard lhs.autoEnglishPropertyFallback == rhs.autoEnglishPropertyFallback else { return false }
        guard lhs.bindIdentifierToProperty == rhs.bindIdentifierToProperty else { return false }
        guard lhs.boundRegex == rhs.boundRegex else { return false }
        guard lhs.bulkUploadable == rhs.bulkUploadable else { return false }
        guard lhs.cType == rhs.cType else { return false }
        guard lhs.contentDescription == rhs.contentDescription else { return false }
        guard lhs.forceIdentifierBinding == rhs.forceIdentifierBinding else { return false }
        guard lhs.name == rhs.name else { return false }
        guard lhs.previewImage == rhs.previewImage else { return false }
        guard lhs.previews == rhs.previews else { return false }
        guard lhs.priority == rhs.priority else { return false }
        guard lhs.properties == rhs.properties else { return false }
        guard lhs.propertySections == rhs.propertySections else { return false }
        guard lhs.reminder == rhs.reminder else { return false }
        guard lhs.showInContentEditor == rhs.showInContentEditor else { return false }
        guard lhs.suppressCmsPath == rhs.suppressCmsPath else { return false }
        guard lhs.tagMetadata == rhs.tagMetadata else { return false }
        guard lhs.tagMetadataItems == rhs.tagMetadataItems else { return false }
        guard lhs.typeOf == rhs.typeOf else { return false }
        guard lhs.usageExamples == rhs.usageExamples else { return false }
        return true
    }
}

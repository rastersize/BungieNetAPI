//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinyRequestsDestinyItemTransferRequest: APIModel {

    public var characterId: Int?

    public var itemId: Int?

    public var itemReferenceHash: Int?

    public var membershipType: Int?

    public var stackSize: Int?

    public var transferToVault: Bool?

    public init(characterId: Int? = nil, itemId: Int? = nil, itemReferenceHash: Int? = nil, membershipType: Int? = nil, stackSize: Int? = nil, transferToVault: Bool? = nil) {
        self.characterId = characterId
        self.itemId = itemId
        self.itemReferenceHash = itemReferenceHash
        self.membershipType = membershipType
        self.stackSize = stackSize
        self.transferToVault = transferToVault
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        characterId = try container.decodeIfPresent("characterId")
        itemId = try container.decodeIfPresent("itemId")
        itemReferenceHash = try container.decodeIfPresent("itemReferenceHash")
        membershipType = try container.decodeIfPresent("membershipType")
        stackSize = try container.decodeIfPresent("stackSize")
        transferToVault = try container.decodeIfPresent("transferToVault")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(characterId, forKey: "characterId")
        try container.encodeIfPresent(itemId, forKey: "itemId")
        try container.encodeIfPresent(itemReferenceHash, forKey: "itemReferenceHash")
        try container.encodeIfPresent(membershipType, forKey: "membershipType")
        try container.encodeIfPresent(stackSize, forKey: "stackSize")
        try container.encodeIfPresent(transferToVault, forKey: "transferToVault")
    }

    public static func == (lhs: DestinyRequestsDestinyItemTransferRequest, rhs: DestinyRequestsDestinyItemTransferRequest) -> Bool {
        guard lhs.characterId == rhs.characterId else { return false }
        guard lhs.itemId == rhs.itemId else { return false }
        guard lhs.itemReferenceHash == rhs.itemReferenceHash else { return false }
        guard lhs.membershipType == rhs.membershipType else { return false }
        guard lhs.stackSize == rhs.stackSize else { return false }
        guard lhs.transferToVault == rhs.transferToVault else { return false }
        return true
    }
}

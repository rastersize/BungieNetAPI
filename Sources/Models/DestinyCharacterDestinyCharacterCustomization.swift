//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Raw data about the customization options chosen for a character's face and appearance.
You can look up the relevant class/race/gender combo in DestinyCharacterCustomizationOptionDefinition for the character, and then look up these values within the CustomizationOptions found to pull some data about their choices. Warning: not all of that data is meaningful. Some data has useful icons. Others have nothing, and are only meant for 3D rendering purposes (which we sadly do not expose yet) */
public struct DestinyCharacterDestinyCharacterCustomization: APIModel {

    public var decalColor: Int?

    public var decalIndex: Int?

    public var eyeColor: Int?

    public var face: Int?

    public var featureColors: [Int]?

    public var featureIndex: Int?

    public var hairColors: [Int]?

    public var hairIndex: Int?

    public var lipColor: Int?

    public var personality: Int?

    public var skinColor: Int?

    public var wearHelmet: Bool?

    public init(decalColor: Int? = nil, decalIndex: Int? = nil, eyeColor: Int? = nil, face: Int? = nil, featureColors: [Int]? = nil, featureIndex: Int? = nil, hairColors: [Int]? = nil, hairIndex: Int? = nil, lipColor: Int? = nil, personality: Int? = nil, skinColor: Int? = nil, wearHelmet: Bool? = nil) {
        self.decalColor = decalColor
        self.decalIndex = decalIndex
        self.eyeColor = eyeColor
        self.face = face
        self.featureColors = featureColors
        self.featureIndex = featureIndex
        self.hairColors = hairColors
        self.hairIndex = hairIndex
        self.lipColor = lipColor
        self.personality = personality
        self.skinColor = skinColor
        self.wearHelmet = wearHelmet
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        decalColor = try container.decodeIfPresent("decalColor")
        decalIndex = try container.decodeIfPresent("decalIndex")
        eyeColor = try container.decodeIfPresent("eyeColor")
        face = try container.decodeIfPresent("face")
        featureColors = try container.decodeArrayIfPresent("featureColors")
        featureIndex = try container.decodeIfPresent("featureIndex")
        hairColors = try container.decodeArrayIfPresent("hairColors")
        hairIndex = try container.decodeIfPresent("hairIndex")
        lipColor = try container.decodeIfPresent("lipColor")
        personality = try container.decodeIfPresent("personality")
        skinColor = try container.decodeIfPresent("skinColor")
        wearHelmet = try container.decodeIfPresent("wearHelmet")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(decalColor, forKey: "decalColor")
        try container.encodeIfPresent(decalIndex, forKey: "decalIndex")
        try container.encodeIfPresent(eyeColor, forKey: "eyeColor")
        try container.encodeIfPresent(face, forKey: "face")
        try container.encodeIfPresent(featureColors, forKey: "featureColors")
        try container.encodeIfPresent(featureIndex, forKey: "featureIndex")
        try container.encodeIfPresent(hairColors, forKey: "hairColors")
        try container.encodeIfPresent(hairIndex, forKey: "hairIndex")
        try container.encodeIfPresent(lipColor, forKey: "lipColor")
        try container.encodeIfPresent(personality, forKey: "personality")
        try container.encodeIfPresent(skinColor, forKey: "skinColor")
        try container.encodeIfPresent(wearHelmet, forKey: "wearHelmet")
    }

    public static func == (lhs: DestinyCharacterDestinyCharacterCustomization, rhs: DestinyCharacterDestinyCharacterCustomization) -> Bool {
        guard lhs.decalColor == rhs.decalColor else { return false }
        guard lhs.decalIndex == rhs.decalIndex else { return false }
        guard lhs.eyeColor == rhs.eyeColor else { return false }
        guard lhs.face == rhs.face else { return false }
        guard lhs.featureColors == rhs.featureColors else { return false }
        guard lhs.featureIndex == rhs.featureIndex else { return false }
        guard lhs.hairColors == rhs.hairColors else { return false }
        guard lhs.hairIndex == rhs.hairIndex else { return false }
        guard lhs.lipColor == rhs.lipColor else { return false }
        guard lhs.personality == rhs.personality else { return false }
        guard lhs.skinColor == rhs.skinColor else { return false }
        guard lhs.wearHelmet == rhs.wearHelmet else { return false }
        return true
    }
}

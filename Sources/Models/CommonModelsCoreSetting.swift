//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct CommonModelsCoreSetting: APIModel {

    public var childSettings: [CommonModelsCoreSetting]?

    public var displayName: String?

    public var identifier: String?

    public var imagePath: String?

    public var isDefault: Bool?

    public var summary: String?

    public init(childSettings: [CommonModelsCoreSetting]? = nil, displayName: String? = nil, identifier: String? = nil, imagePath: String? = nil, isDefault: Bool? = nil, summary: String? = nil) {
        self.childSettings = childSettings
        self.displayName = displayName
        self.identifier = identifier
        self.imagePath = imagePath
        self.isDefault = isDefault
        self.summary = summary
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        childSettings = try container.decodeArrayIfPresent("childSettings")
        displayName = try container.decodeIfPresent("displayName")
        identifier = try container.decodeIfPresent("identifier")
        imagePath = try container.decodeIfPresent("imagePath")
        isDefault = try container.decodeIfPresent("isDefault")
        summary = try container.decodeIfPresent("summary")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(childSettings, forKey: "childSettings")
        try container.encodeIfPresent(displayName, forKey: "displayName")
        try container.encodeIfPresent(identifier, forKey: "identifier")
        try container.encodeIfPresent(imagePath, forKey: "imagePath")
        try container.encodeIfPresent(isDefault, forKey: "isDefault")
        try container.encodeIfPresent(summary, forKey: "summary")
    }

    public static func == (lhs: CommonModelsCoreSetting, rhs: CommonModelsCoreSetting) -> Bool {
        guard lhs.childSettings == rhs.childSettings else { return false }
        guard lhs.displayName == rhs.displayName else { return false }
        guard lhs.identifier == rhs.identifier else { return false }
        guard lhs.imagePath == rhs.imagePath else { return false }
        guard lhs.isDefault == rhs.isDefault else { return false }
        guard lhs.summary == rhs.summary else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data. */
public struct DestinyResponsesDestinyCharacterResponse: APIModel {

    /** Activity data - info about current activities available to the player.
COMPONENT TYPE: CharacterActivities */
    public var activities: [String: Any]?

    /** Base information about the character in question.
COMPONENT TYPE: Characters */
    public var character: [String: Any]?

    /** COMPONENT TYPE: Collectibles */
    public var collectibles: [String: Any]?

    /** A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
COMPONENT TYPE: CurrencyLookups */
    public var currencyLookups: [String: Any]?

    /** Equipped items on the character.
COMPONENT TYPE: CharacterEquipment */
    public var equipment: [String: Any]?

    /** The character-level non-equipped inventory items.
COMPONENT TYPE: CharacterInventories */
    public var inventory: [String: Any]?

    /** The set of components belonging to the player's instanced items.
COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.] */
    public var itemComponents: [String: Any]?

    /** Items available from Kiosks that are available to this specific character. 
COMPONENT TYPE: Kiosks */
    public var kiosks: [String: Any]?

    /** When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.
This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
COMPONENT TYPE: ItemSockets */
    public var plugSets: [String: Any]?

    /** COMPONENT TYPE: PresentationNodes */
    public var presentationNodes: [String: Any]?

    /** Character progression data, including Milestones.
COMPONENT TYPE: CharacterProgressions */
    public var progressions: [String: Any]?

    /** COMPONENT TYPE: Records */
    public var records: [String: Any]?

    /** Character rendering data - a minimal set of information about equipment and dyes used for rendering.
COMPONENT TYPE: CharacterRenderData */
    public var renderData: [String: Any]?

    /** The set of components belonging to the player's UNinstanced items. Because apparently now those too can have information relevant to the character's state.
COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.] */
    public var uninstancedItemComponents: [String: Any]?

    public init(activities: [String: Any]? = nil, character: [String: Any]? = nil, collectibles: [String: Any]? = nil, currencyLookups: [String: Any]? = nil, equipment: [String: Any]? = nil, inventory: [String: Any]? = nil, itemComponents: [String: Any]? = nil, kiosks: [String: Any]? = nil, plugSets: [String: Any]? = nil, presentationNodes: [String: Any]? = nil, progressions: [String: Any]? = nil, records: [String: Any]? = nil, renderData: [String: Any]? = nil, uninstancedItemComponents: [String: Any]? = nil) {
        self.activities = activities
        self.character = character
        self.collectibles = collectibles
        self.currencyLookups = currencyLookups
        self.equipment = equipment
        self.inventory = inventory
        self.itemComponents = itemComponents
        self.kiosks = kiosks
        self.plugSets = plugSets
        self.presentationNodes = presentationNodes
        self.progressions = progressions
        self.records = records
        self.renderData = renderData
        self.uninstancedItemComponents = uninstancedItemComponents
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        activities = try container.decodeAnyIfPresent("activities")
        character = try container.decodeAnyIfPresent("character")
        collectibles = try container.decodeAnyIfPresent("collectibles")
        currencyLookups = try container.decodeAnyIfPresent("currencyLookups")
        equipment = try container.decodeAnyIfPresent("equipment")
        inventory = try container.decodeAnyIfPresent("inventory")
        itemComponents = try container.decodeAnyIfPresent("itemComponents")
        kiosks = try container.decodeAnyIfPresent("kiosks")
        plugSets = try container.decodeAnyIfPresent("plugSets")
        presentationNodes = try container.decodeAnyIfPresent("presentationNodes")
        progressions = try container.decodeAnyIfPresent("progressions")
        records = try container.decodeAnyIfPresent("records")
        renderData = try container.decodeAnyIfPresent("renderData")
        uninstancedItemComponents = try container.decodeAnyIfPresent("uninstancedItemComponents")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeAnyIfPresent(activities, forKey: "activities")
        try container.encodeAnyIfPresent(character, forKey: "character")
        try container.encodeAnyIfPresent(collectibles, forKey: "collectibles")
        try container.encodeAnyIfPresent(currencyLookups, forKey: "currencyLookups")
        try container.encodeAnyIfPresent(equipment, forKey: "equipment")
        try container.encodeAnyIfPresent(inventory, forKey: "inventory")
        try container.encodeAnyIfPresent(itemComponents, forKey: "itemComponents")
        try container.encodeAnyIfPresent(kiosks, forKey: "kiosks")
        try container.encodeAnyIfPresent(plugSets, forKey: "plugSets")
        try container.encodeAnyIfPresent(presentationNodes, forKey: "presentationNodes")
        try container.encodeAnyIfPresent(progressions, forKey: "progressions")
        try container.encodeAnyIfPresent(records, forKey: "records")
        try container.encodeAnyIfPresent(renderData, forKey: "renderData")
        try container.encodeAnyIfPresent(uninstancedItemComponents, forKey: "uninstancedItemComponents")
    }

    public static func == (lhs: DestinyResponsesDestinyCharacterResponse, rhs: DestinyResponsesDestinyCharacterResponse) -> Bool {
        guard NSDictionary(dictionary: lhs.activities ?? [:]).isEqual(to: rhs.activities ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.character ?? [:]).isEqual(to: rhs.character ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.collectibles ?? [:]).isEqual(to: rhs.collectibles ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.currencyLookups ?? [:]).isEqual(to: rhs.currencyLookups ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.equipment ?? [:]).isEqual(to: rhs.equipment ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.inventory ?? [:]).isEqual(to: rhs.inventory ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.itemComponents ?? [:]).isEqual(to: rhs.itemComponents ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.kiosks ?? [:]).isEqual(to: rhs.kiosks ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.plugSets ?? [:]).isEqual(to: rhs.plugSets ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.presentationNodes ?? [:]).isEqual(to: rhs.presentationNodes ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.progressions ?? [:]).isEqual(to: rhs.progressions ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.records ?? [:]).isEqual(to: rhs.records ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.renderData ?? [:]).isEqual(to: rhs.renderData ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.uninstancedItemComponents ?? [:]).isEqual(to: rhs.uninstancedItemComponents ?? [:]) else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Where the sausage gets made. Unlock Expressions are the foundation of the game's gating mechanics and investment-related restrictions. They can test Unlock Flags and Unlock Values for certain states, using a sufficient amount of logical operators such that unlock expressions are effectively Turing complete.
Use UnlockExpressionParser to evaluate expressions using an IUnlockContext parsed from Babel. */
public struct DestinyDefinitionsDestinyUnlockExpressionDefinition: APIModel {

    /** A shortcut for determining the most restrictive gating that this expression performs. See the DestinyGatingScope enum's documentation for more details. */
    public var scope: Int?

    public init(scope: Int? = nil) {
        self.scope = scope
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        scope = try container.decodeIfPresent("scope")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(scope, forKey: "scope")
    }

    public static func == (lhs: DestinyDefinitionsDestinyUnlockExpressionDefinition, rhs: DestinyDefinitionsDestinyUnlockExpressionDefinition) -> Bool {
        guard lhs.scope == rhs.scope else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct UserUserToUserContext: APIModel {

    public var globalIgnoreEndDate: DateTime?

    public var ignoreStatus: IgnoresIgnoreResponse?

    public var isFollowing: Bool?

    public init(globalIgnoreEndDate: DateTime? = nil, ignoreStatus: IgnoresIgnoreResponse? = nil, isFollowing: Bool? = nil) {
        self.globalIgnoreEndDate = globalIgnoreEndDate
        self.ignoreStatus = ignoreStatus
        self.isFollowing = isFollowing
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        globalIgnoreEndDate = try container.decodeIfPresent("globalIgnoreEndDate")
        ignoreStatus = try container.decodeIfPresent("ignoreStatus")
        isFollowing = try container.decodeIfPresent("isFollowing")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(globalIgnoreEndDate, forKey: "globalIgnoreEndDate")
        try container.encodeIfPresent(ignoreStatus, forKey: "ignoreStatus")
        try container.encodeIfPresent(isFollowing, forKey: "isFollowing")
    }

    public static func == (lhs: UserUserToUserContext, rhs: UserUserToUserContext) -> Bool {
        guard lhs.globalIgnoreEndDate == rhs.globalIgnoreEndDate else { return false }
        guard lhs.ignoreStatus == rhs.ignoreStatus else { return false }
        guard lhs.isFollowing == rhs.isFollowing else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ContentModelsTagMetadataDefinition: APIModel {

    public var datatype: String?

    public var description: String?

    public var isRequired: Bool?

    public var items: [ContentModelsTagMetadataItem]?

    public var name: String?

    public var order: Int?

    public init(datatype: String? = nil, description: String? = nil, isRequired: Bool? = nil, items: [ContentModelsTagMetadataItem]? = nil, name: String? = nil, order: Int? = nil) {
        self.datatype = datatype
        self.description = description
        self.isRequired = isRequired
        self.items = items
        self.name = name
        self.order = order
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        datatype = try container.decodeIfPresent("datatype")
        description = try container.decodeIfPresent("description")
        isRequired = try container.decodeIfPresent("isRequired")
        items = try container.decodeArrayIfPresent("items")
        name = try container.decodeIfPresent("name")
        order = try container.decodeIfPresent("order")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(datatype, forKey: "datatype")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(isRequired, forKey: "isRequired")
        try container.encodeIfPresent(items, forKey: "items")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(order, forKey: "order")
    }

    public static func == (lhs: ContentModelsTagMetadataDefinition, rhs: ContentModelsTagMetadataDefinition) -> Bool {
        guard lhs.datatype == rhs.datatype else { return false }
        guard lhs.description == rhs.description else { return false }
        guard lhs.isRequired == rhs.isRequired else { return false }
        guard lhs.items == rhs.items else { return false }
        guard lhs.name == rhs.name else { return false }
        guard lhs.order == rhs.order else { return false }
        return true
    }
}

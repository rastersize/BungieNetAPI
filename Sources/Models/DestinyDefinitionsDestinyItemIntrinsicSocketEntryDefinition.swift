//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Represents a socket that has a plug associated with it intrinsically. This is useful for situations where the weapon needs to have a visual plug/Mod on it, but that plug/Mod should never change. */
public struct DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition: APIModel {

    /** If true, then this socket is visible in the item's "default" state. If you have an instance, you should always check the runtime state, as that can override this visibility setting: but if you're looking at the item on a conceptual level, this property can be useful for hiding data such as legacy sockets - which remain defined on items for infrastructure purposes, but can be confusing for users to see. */
    public var defaultVisible: Bool?

    /** Indicates the plug that is intrinsically inserted into this socket. */
    public var plugItemHash: Int?

    /** Indicates the type of this intrinsic socket. */
    public var socketTypeHash: Int?

    public init(defaultVisible: Bool? = nil, plugItemHash: Int? = nil, socketTypeHash: Int? = nil) {
        self.defaultVisible = defaultVisible
        self.plugItemHash = plugItemHash
        self.socketTypeHash = socketTypeHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        defaultVisible = try container.decodeIfPresent("defaultVisible")
        plugItemHash = try container.decodeIfPresent("plugItemHash")
        socketTypeHash = try container.decodeIfPresent("socketTypeHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(defaultVisible, forKey: "defaultVisible")
        try container.encodeIfPresent(plugItemHash, forKey: "plugItemHash")
        try container.encodeIfPresent(socketTypeHash, forKey: "socketTypeHash")
    }

    public static func == (lhs: DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition, rhs: DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition) -> Bool {
        guard lhs.defaultVisible == rhs.defaultVisible else { return false }
        guard lhs.plugItemHash == rhs.plugItemHash else { return false }
        guard lhs.socketTypeHash == rhs.socketTypeHash else { return false }
        return true
    }
}

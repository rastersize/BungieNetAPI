//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Returns data about a character's status with a given Objective. Combine with DestinyObjectiveDefinition static data for display purposes. */
public struct DestinyQuestsDestinyObjectiveProgress: APIModel {

    /** If the Objective has an Activity associated with it, this is the unique identifier of the Activity being referred to. Use to look up the DestinyActivityDefinition in static data. This will give localized data about *what* you should be playing for the objective to be achieved. */
    public var activityHash: Int?

    /** Whether or not the Objective is completed. */
    public var complete: Bool?

    /** As of Forsaken, objectives' completion value is determined dynamically at runtime.
This value represents the threshold of progress you need to surpass in order for this objective to be considered "complete".
If you were using objective data, switch from using the DestinyObjectiveDefinition's "completionValue" to this value. */
    public var completionValue: Int?

    /** If the Objective has a Destination associated with it, this is the unique identifier of the Destination being referred to. Use to look up the DestinyDestinationDefinition in static data. This will give localized data about *where* in the universe the objective should be achieved. */
    public var destinationHash: Int?

    /** The unique identifier of the Objective being referred to. Use to look up the DestinyObjectiveDefinition in static data. */
    public var objectiveHash: Int?

    /** If progress has been made, and the progress can be measured numerically, this will be the value of that progress. You can compare it to the DestinyObjectiveDefinition.completionValue property for current vs. upper bounds, and use DestinyObjectiveDefinition.valueStyle to determine how this should be rendered. Note that progress, in Destiny 2, need not be a literal numeric progression. It could be one of a number of possible values, even a Timestamp. Always examine DestinyObjectiveDefinition.valueStyle before rendering progress. */
    public var progress: Int?

    /** If this is true, the objective is visible in-game. Otherwise, it's not yet visible to the player. Up to you if you want to honor this property. */
    public var visible: Bool?

    public init(activityHash: Int? = nil, complete: Bool? = nil, completionValue: Int? = nil, destinationHash: Int? = nil, objectiveHash: Int? = nil, progress: Int? = nil, visible: Bool? = nil) {
        self.activityHash = activityHash
        self.complete = complete
        self.completionValue = completionValue
        self.destinationHash = destinationHash
        self.objectiveHash = objectiveHash
        self.progress = progress
        self.visible = visible
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        activityHash = try container.decodeIfPresent("activityHash")
        complete = try container.decodeIfPresent("complete")
        completionValue = try container.decodeIfPresent("completionValue")
        destinationHash = try container.decodeIfPresent("destinationHash")
        objectiveHash = try container.decodeIfPresent("objectiveHash")
        progress = try container.decodeIfPresent("progress")
        visible = try container.decodeIfPresent("visible")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(activityHash, forKey: "activityHash")
        try container.encodeIfPresent(complete, forKey: "complete")
        try container.encodeIfPresent(completionValue, forKey: "completionValue")
        try container.encodeIfPresent(destinationHash, forKey: "destinationHash")
        try container.encodeIfPresent(objectiveHash, forKey: "objectiveHash")
        try container.encodeIfPresent(progress, forKey: "progress")
        try container.encodeIfPresent(visible, forKey: "visible")
    }

    public static func == (lhs: DestinyQuestsDestinyObjectiveProgress, rhs: DestinyQuestsDestinyObjectiveProgress) -> Bool {
        guard lhs.activityHash == rhs.activityHash else { return false }
        guard lhs.complete == rhs.complete else { return false }
        guard lhs.completionValue == rhs.completionValue else { return false }
        guard lhs.destinationHash == rhs.destinationHash else { return false }
        guard lhs.objectiveHash == rhs.objectiveHash else { return false }
        guard lhs.progress == rhs.progress else { return false }
        guard lhs.visible == rhs.visible else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct SearchResultOfGroupMember: APIModel {

    public var hasMore: Bool?

    public var query: QueriesPagedQuery?

    public var replacementContinuationToken: String?

    public var results: [GroupsV2GroupMember]?

    public var totalResults: Int?

    /** If useTotalResults is true, then totalResults represents an accurate count.
If False, it does not, and may be estimated/only the size of the current page.
Either way, you should probably always only trust hasMore.
This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one. */
    public var useTotalResults: Bool?

    public init(hasMore: Bool? = nil, query: QueriesPagedQuery? = nil, replacementContinuationToken: String? = nil, results: [GroupsV2GroupMember]? = nil, totalResults: Int? = nil, useTotalResults: Bool? = nil) {
        self.hasMore = hasMore
        self.query = query
        self.replacementContinuationToken = replacementContinuationToken
        self.results = results
        self.totalResults = totalResults
        self.useTotalResults = useTotalResults
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        hasMore = try container.decodeIfPresent("hasMore")
        query = try container.decodeIfPresent("query")
        replacementContinuationToken = try container.decodeIfPresent("replacementContinuationToken")
        results = try container.decodeArrayIfPresent("results")
        totalResults = try container.decodeIfPresent("totalResults")
        useTotalResults = try container.decodeIfPresent("useTotalResults")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(hasMore, forKey: "hasMore")
        try container.encodeIfPresent(query, forKey: "query")
        try container.encodeIfPresent(replacementContinuationToken, forKey: "replacementContinuationToken")
        try container.encodeIfPresent(results, forKey: "results")
        try container.encodeIfPresent(totalResults, forKey: "totalResults")
        try container.encodeIfPresent(useTotalResults, forKey: "useTotalResults")
    }

    public static func == (lhs: SearchResultOfGroupMember, rhs: SearchResultOfGroupMember) -> Bool {
        guard lhs.hasMore == rhs.hasMore else { return false }
        guard lhs.query == rhs.query else { return false }
        guard lhs.replacementContinuationToken == rhs.replacementContinuationToken else { return false }
        guard lhs.results == rhs.results else { return false }
        guard lhs.totalResults == rhs.totalResults else { return false }
        guard lhs.useTotalResults == rhs.useTotalResults else { return false }
        return true
    }
}

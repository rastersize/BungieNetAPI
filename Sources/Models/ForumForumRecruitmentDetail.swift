//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ForumForumRecruitmentDetail: APIModel {

    public var fireteam: [UserGeneralUser]?

    public var approved: Bool?

    public var conversationId: Int?

    public var intensity: Int?

    public var kickedPlayerIds: [Int]?

    public var microphoneRequired: Bool?

    public var playerSlotsRemaining: Int?

    public var playerSlotsTotal: Int?

    public var tone: Int?

    public var topicId: Int?

    public init(fireteam: [UserGeneralUser]? = nil, approved: Bool? = nil, conversationId: Int? = nil, intensity: Int? = nil, kickedPlayerIds: [Int]? = nil, microphoneRequired: Bool? = nil, playerSlotsRemaining: Int? = nil, playerSlotsTotal: Int? = nil, tone: Int? = nil, topicId: Int? = nil) {
        self.fireteam = fireteam
        self.approved = approved
        self.conversationId = conversationId
        self.intensity = intensity
        self.kickedPlayerIds = kickedPlayerIds
        self.microphoneRequired = microphoneRequired
        self.playerSlotsRemaining = playerSlotsRemaining
        self.playerSlotsTotal = playerSlotsTotal
        self.tone = tone
        self.topicId = topicId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        fireteam = try container.decodeArrayIfPresent("Fireteam")
        approved = try container.decodeIfPresent("approved")
        conversationId = try container.decodeIfPresent("conversationId")
        intensity = try container.decodeIfPresent("intensity")
        kickedPlayerIds = try container.decodeArrayIfPresent("kickedPlayerIds")
        microphoneRequired = try container.decodeIfPresent("microphoneRequired")
        playerSlotsRemaining = try container.decodeIfPresent("playerSlotsRemaining")
        playerSlotsTotal = try container.decodeIfPresent("playerSlotsTotal")
        tone = try container.decodeIfPresent("tone")
        topicId = try container.decodeIfPresent("topicId")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(fireteam, forKey: "Fireteam")
        try container.encodeIfPresent(approved, forKey: "approved")
        try container.encodeIfPresent(conversationId, forKey: "conversationId")
        try container.encodeIfPresent(intensity, forKey: "intensity")
        try container.encodeIfPresent(kickedPlayerIds, forKey: "kickedPlayerIds")
        try container.encodeIfPresent(microphoneRequired, forKey: "microphoneRequired")
        try container.encodeIfPresent(playerSlotsRemaining, forKey: "playerSlotsRemaining")
        try container.encodeIfPresent(playerSlotsTotal, forKey: "playerSlotsTotal")
        try container.encodeIfPresent(tone, forKey: "tone")
        try container.encodeIfPresent(topicId, forKey: "topicId")
    }

    public static func == (lhs: ForumForumRecruitmentDetail, rhs: ForumForumRecruitmentDetail) -> Bool {
        guard lhs.fireteam == rhs.fireteam else { return false }
        guard lhs.approved == rhs.approved else { return false }
        guard lhs.conversationId == rhs.conversationId else { return false }
        guard lhs.intensity == rhs.intensity else { return false }
        guard lhs.kickedPlayerIds == rhs.kickedPlayerIds else { return false }
        guard lhs.microphoneRequired == rhs.microphoneRequired else { return false }
        guard lhs.playerSlotsRemaining == rhs.playerSlotsRemaining else { return false }
        guard lhs.playerSlotsTotal == rhs.playerSlotsTotal else { return false }
        guard lhs.tone == rhs.tone else { return false }
        guard lhs.topicId == rhs.topicId else { return false }
        return true
    }
}

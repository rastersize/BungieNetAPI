//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** In addition to item quantity information for vendor prices, this also has any optional information that may exist about how the item's quantity can be modified. (unfortunately not information that is able to be read outside of the BNet servers, but it's there) */
public struct DestinyDefinitionsDestinyVendorItemQuantity: APIModel {

    /** The hash identifier for the item in question. Use it to look up the item's DestinyInventoryItemDefinition. */
    public var itemHash: Int?

    /** If this quantity is referring to a specific instance of an item, this will have the item's instance ID. Normally, this will be null. */
    public var itemInstanceId: Int?

    /** The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used. */
    public var quantity: Int?

    public init(itemHash: Int? = nil, itemInstanceId: Int? = nil, quantity: Int? = nil) {
        self.itemHash = itemHash
        self.itemInstanceId = itemInstanceId
        self.quantity = quantity
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        itemHash = try container.decodeIfPresent("itemHash")
        itemInstanceId = try container.decodeIfPresent("itemInstanceId")
        quantity = try container.decodeIfPresent("quantity")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(itemHash, forKey: "itemHash")
        try container.encodeIfPresent(itemInstanceId, forKey: "itemInstanceId")
        try container.encodeIfPresent(quantity, forKey: "quantity")
    }

    public static func == (lhs: DestinyDefinitionsDestinyVendorItemQuantity, rhs: DestinyDefinitionsDestinyVendorItemQuantity) -> Bool {
        guard lhs.itemHash == rhs.itemHash else { return false }
        guard lhs.itemInstanceId == rhs.itemInstanceId else { return false }
        guard lhs.quantity == rhs.quantity else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Properties of a DestinyInventoryItemDefinition that store all of the information we were able to discern about how the item spawns, and where you can find the item.
Items will have many of these sources, one per level at which it spawns, to try and give more granular data about where items spawn for specific level ranges. */
public struct DestinyDefinitionsSourcesDestinyItemSourceDefinition: APIModel {

    /** The stats computed for this level/quality range. */
    public var computedStats: [String: DestinyDefinitionsDestinyInventoryItemStatDefinition]?

    /** The level at which the item spawns. Essentially the Primary Key for this source data: there will be multiple of these source entries per item that has source data, grouped by the level at which the item spawns. */
    public var level: Int?

    /** The maximum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing. */
    public var maxLevelRequired: Int?

    /** The maximum quality at which the item spawns for this level. */
    public var maxQuality: Int?

    /** The minimum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing. */
    public var minLevelRequired: Int?

    /** The minimum Quality at which the item spawns for this level. Examine DestinyInventoryItemDefinition for more information about what Quality means. Just don't ask Phaedrus about it, he'll never stop talking and you'll have to write a book about it. */
    public var minQuality: Int?

    /** The DestinyRewardSourceDefinitions found that can spawn the item at this level. */
    public var sourceHashes: [Int]?

    public init(computedStats: [String: DestinyDefinitionsDestinyInventoryItemStatDefinition]? = nil, level: Int? = nil, maxLevelRequired: Int? = nil, maxQuality: Int? = nil, minLevelRequired: Int? = nil, minQuality: Int? = nil, sourceHashes: [Int]? = nil) {
        self.computedStats = computedStats
        self.level = level
        self.maxLevelRequired = maxLevelRequired
        self.maxQuality = maxQuality
        self.minLevelRequired = minLevelRequired
        self.minQuality = minQuality
        self.sourceHashes = sourceHashes
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        computedStats = try container.decodeIfPresent("computedStats")
        level = try container.decodeIfPresent("level")
        maxLevelRequired = try container.decodeIfPresent("maxLevelRequired")
        maxQuality = try container.decodeIfPresent("maxQuality")
        minLevelRequired = try container.decodeIfPresent("minLevelRequired")
        minQuality = try container.decodeIfPresent("minQuality")
        sourceHashes = try container.decodeArrayIfPresent("sourceHashes")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(computedStats, forKey: "computedStats")
        try container.encodeIfPresent(level, forKey: "level")
        try container.encodeIfPresent(maxLevelRequired, forKey: "maxLevelRequired")
        try container.encodeIfPresent(maxQuality, forKey: "maxQuality")
        try container.encodeIfPresent(minLevelRequired, forKey: "minLevelRequired")
        try container.encodeIfPresent(minQuality, forKey: "minQuality")
        try container.encodeIfPresent(sourceHashes, forKey: "sourceHashes")
    }

    public static func == (lhs: DestinyDefinitionsSourcesDestinyItemSourceDefinition, rhs: DestinyDefinitionsSourcesDestinyItemSourceDefinition) -> Bool {
        guard lhs.computedStats == rhs.computedStats else { return false }
        guard lhs.level == rhs.level else { return false }
        guard lhs.maxLevelRequired == rhs.maxLevelRequired else { return false }
        guard lhs.maxQuality == rhs.maxQuality else { return false }
        guard lhs.minLevelRequired == rhs.minLevelRequired else { return false }
        guard lhs.minQuality == rhs.minQuality else { return false }
        guard lhs.sourceHashes == rhs.sourceHashes else { return false }
        return true
    }
}

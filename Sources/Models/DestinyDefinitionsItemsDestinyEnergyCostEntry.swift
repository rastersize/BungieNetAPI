//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Some plugs cost Energy, which is a stat on the item that can be increased by other plugs (that, at least in Armor 2.0, have a "masterworks-like" mechanic for upgrading). If a plug has costs, the details of that cost are defined here. */
public struct DestinyDefinitionsItemsDestinyEnergyCostEntry: APIModel {

    /** The Energy cost for inserting this plug. */
    public var energyCost: Int?

    /** The type of energy that this plug costs, in enum form. */
    public var energyType: Int?

    /** The type of energy that this plug costs, as a reference to the DestinyEnergyTypeDefinition of the energy type. */
    public var energyTypeHash: Int?

    public init(energyCost: Int? = nil, energyType: Int? = nil, energyTypeHash: Int? = nil) {
        self.energyCost = energyCost
        self.energyType = energyType
        self.energyTypeHash = energyTypeHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        energyCost = try container.decodeIfPresent("energyCost")
        energyType = try container.decodeIfPresent("energyType")
        energyTypeHash = try container.decodeIfPresent("energyTypeHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(energyCost, forKey: "energyCost")
        try container.encodeIfPresent(energyType, forKey: "energyType")
        try container.encodeIfPresent(energyTypeHash, forKey: "energyTypeHash")
    }

    public static func == (lhs: DestinyDefinitionsItemsDestinyEnergyCostEntry, rhs: DestinyDefinitionsItemsDestinyEnergyCostEntry) -> Bool {
        guard lhs.energyCost == rhs.energyCost else { return false }
        guard lhs.energyType == rhs.energyType else { return false }
        guard lhs.energyTypeHash == rhs.energyTypeHash else { return false }
        return true
    }
}

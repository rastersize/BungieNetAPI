//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Many actions relating to items require you to expend materials: - Activating a talent node - Inserting a plug into a socket The items will refer to material requirements by a materialRequirementsHash in these cases, and this is the definition for those requirements in terms of the item required, how much of it is required and other interesting info. This is one of the rare/strange times where a single contract class is used both in definitions *and* in live data response contracts. I'm not sure yet whether I regret that. */
public struct DestinyDefinitionsDestinyMaterialRequirement: APIModel {

    /** The amount of the material required. */
    public var count: Int?

    /** If True, the material will be removed from the character's inventory when the action is performed. */
    public var deleteOnAction: Bool?

    /** The hash identifier of the material required. Use it to look up the material's DestinyInventoryItemDefinition. */
    public var itemHash: Int?

    /** If True, this requirement is "silent": don't bother showing it in a material requirements display. I mean, I'm not your mom: I'm not going to tell you you *can't* show it. But we won't show it in our UI. */
    public var omitFromRequirements: Bool?

    public init(count: Int? = nil, deleteOnAction: Bool? = nil, itemHash: Int? = nil, omitFromRequirements: Bool? = nil) {
        self.count = count
        self.deleteOnAction = deleteOnAction
        self.itemHash = itemHash
        self.omitFromRequirements = omitFromRequirements
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        count = try container.decodeIfPresent("count")
        deleteOnAction = try container.decodeIfPresent("deleteOnAction")
        itemHash = try container.decodeIfPresent("itemHash")
        omitFromRequirements = try container.decodeIfPresent("omitFromRequirements")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(count, forKey: "count")
        try container.encodeIfPresent(deleteOnAction, forKey: "deleteOnAction")
        try container.encodeIfPresent(itemHash, forKey: "itemHash")
        try container.encodeIfPresent(omitFromRequirements, forKey: "omitFromRequirements")
    }

    public static func == (lhs: DestinyDefinitionsDestinyMaterialRequirement, rhs: DestinyDefinitionsDestinyMaterialRequirement) -> Bool {
        guard lhs.count == rhs.count else { return false }
        guard lhs.deleteOnAction == rhs.deleteOnAction else { return false }
        guard lhs.itemHash == rhs.itemHash else { return false }
        guard lhs.omitFromRequirements == rhs.omitFromRequirements else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct FireteamFireteamSummary: APIModel {

    public var activityType: Int?

    public var alternateSlotCount: Int?

    public var availableAlternateSlotCount: Int?

    public var availablePlayerSlotCount: Int?

    public var dateCreated: DateTime?

    public var dateModified: DateTime?

    public var datePlayerModified: DateTime?

    public var fireteamId: Int?

    public var groupId: Int?

    public var isImmediate: Bool?

    public var isPublic: Bool?

    public var isValid: Bool?

    public var locale: String?

    public var ownerMembershipId: Int?

    public var platform: Int?

    public var playerSlotCount: Int?

    public var scheduledTime: DateTime?

    public var title: String?

    public init(activityType: Int? = nil, alternateSlotCount: Int? = nil, availableAlternateSlotCount: Int? = nil, availablePlayerSlotCount: Int? = nil, dateCreated: DateTime? = nil, dateModified: DateTime? = nil, datePlayerModified: DateTime? = nil, fireteamId: Int? = nil, groupId: Int? = nil, isImmediate: Bool? = nil, isPublic: Bool? = nil, isValid: Bool? = nil, locale: String? = nil, ownerMembershipId: Int? = nil, platform: Int? = nil, playerSlotCount: Int? = nil, scheduledTime: DateTime? = nil, title: String? = nil) {
        self.activityType = activityType
        self.alternateSlotCount = alternateSlotCount
        self.availableAlternateSlotCount = availableAlternateSlotCount
        self.availablePlayerSlotCount = availablePlayerSlotCount
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.datePlayerModified = datePlayerModified
        self.fireteamId = fireteamId
        self.groupId = groupId
        self.isImmediate = isImmediate
        self.isPublic = isPublic
        self.isValid = isValid
        self.locale = locale
        self.ownerMembershipId = ownerMembershipId
        self.platform = platform
        self.playerSlotCount = playerSlotCount
        self.scheduledTime = scheduledTime
        self.title = title
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        activityType = try container.decodeIfPresent("activityType")
        alternateSlotCount = try container.decodeIfPresent("alternateSlotCount")
        availableAlternateSlotCount = try container.decodeIfPresent("availableAlternateSlotCount")
        availablePlayerSlotCount = try container.decodeIfPresent("availablePlayerSlotCount")
        dateCreated = try container.decodeIfPresent("dateCreated")
        dateModified = try container.decodeIfPresent("dateModified")
        datePlayerModified = try container.decodeIfPresent("datePlayerModified")
        fireteamId = try container.decodeIfPresent("fireteamId")
        groupId = try container.decodeIfPresent("groupId")
        isImmediate = try container.decodeIfPresent("isImmediate")
        isPublic = try container.decodeIfPresent("isPublic")
        isValid = try container.decodeIfPresent("isValid")
        locale = try container.decodeIfPresent("locale")
        ownerMembershipId = try container.decodeIfPresent("ownerMembershipId")
        platform = try container.decodeIfPresent("platform")
        playerSlotCount = try container.decodeIfPresent("playerSlotCount")
        scheduledTime = try container.decodeIfPresent("scheduledTime")
        title = try container.decodeIfPresent("title")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(activityType, forKey: "activityType")
        try container.encodeIfPresent(alternateSlotCount, forKey: "alternateSlotCount")
        try container.encodeIfPresent(availableAlternateSlotCount, forKey: "availableAlternateSlotCount")
        try container.encodeIfPresent(availablePlayerSlotCount, forKey: "availablePlayerSlotCount")
        try container.encodeIfPresent(dateCreated, forKey: "dateCreated")
        try container.encodeIfPresent(dateModified, forKey: "dateModified")
        try container.encodeIfPresent(datePlayerModified, forKey: "datePlayerModified")
        try container.encodeIfPresent(fireteamId, forKey: "fireteamId")
        try container.encodeIfPresent(groupId, forKey: "groupId")
        try container.encodeIfPresent(isImmediate, forKey: "isImmediate")
        try container.encodeIfPresent(isPublic, forKey: "isPublic")
        try container.encodeIfPresent(isValid, forKey: "isValid")
        try container.encodeIfPresent(locale, forKey: "locale")
        try container.encodeIfPresent(ownerMembershipId, forKey: "ownerMembershipId")
        try container.encodeIfPresent(platform, forKey: "platform")
        try container.encodeIfPresent(playerSlotCount, forKey: "playerSlotCount")
        try container.encodeIfPresent(scheduledTime, forKey: "scheduledTime")
        try container.encodeIfPresent(title, forKey: "title")
    }

    public static func == (lhs: FireteamFireteamSummary, rhs: FireteamFireteamSummary) -> Bool {
        guard lhs.activityType == rhs.activityType else { return false }
        guard lhs.alternateSlotCount == rhs.alternateSlotCount else { return false }
        guard lhs.availableAlternateSlotCount == rhs.availableAlternateSlotCount else { return false }
        guard lhs.availablePlayerSlotCount == rhs.availablePlayerSlotCount else { return false }
        guard lhs.dateCreated == rhs.dateCreated else { return false }
        guard lhs.dateModified == rhs.dateModified else { return false }
        guard lhs.datePlayerModified == rhs.datePlayerModified else { return false }
        guard lhs.fireteamId == rhs.fireteamId else { return false }
        guard lhs.groupId == rhs.groupId else { return false }
        guard lhs.isImmediate == rhs.isImmediate else { return false }
        guard lhs.isPublic == rhs.isPublic else { return false }
        guard lhs.isValid == rhs.isValid else { return false }
        guard lhs.locale == rhs.locale else { return false }
        guard lhs.ownerMembershipId == rhs.ownerMembershipId else { return false }
        guard lhs.platform == rhs.platform else { return false }
        guard lhs.playerSlotCount == rhs.playerSlotCount else { return false }
        guard lhs.scheduledTime == rhs.scheduledTime else { return false }
        guard lhs.title == rhs.title else { return false }
        return true
    }
}

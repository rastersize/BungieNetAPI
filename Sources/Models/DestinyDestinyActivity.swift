//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Represents the "Live" data that we can obtain about a Character's status with a specific Activity. This will tell you whether the character can participate in the activity, as well as some other basic mutable information. 
Meant to be combined with static DestinyActivityDefinition data for a full picture of the Activity. */
public struct DestinyDestinyActivity: APIModel {

    /** The hash identifier of the Activity. Use this to look up the DestinyActivityDefinition of the activity. */
    public var activityHash: Int?

    /** The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).
As a concrete example of this data, the hashes you get for Raids will correspond to the currently active "Challenge Mode".
We don't have any human readable information for these, but saavy 3rd party app users could manually associate the key (a hash identifier for the "option" that is enabled/disabled) and the value (whether it's enabled or disabled presently)
On our side, we don't necessarily even know what these are used for (the game designers know, but we don't), and we have no human readable data for them. In order to use them, you will have to do some experimentation. */
    public var booleanActivityOptions: [String: Bool]?

    /** If true, the user is allowed to join with another Fireteam in this activity. */
    public var canJoin: Bool?

    /** If true, the user is allowed to lead a Fireteam into this activity. */
    public var canLead: Bool?

    public var challenges: [DestinyChallengesDestinyChallengeStatus]?

    /** A DestinyActivityDifficultyTier enum value indicating the difficulty of the activity. */
    public var difficultyTier: Int?

    /** The difficulty level of the activity, if applicable. */
    public var displayLevel: Int?

    /** If true, we both have the ability to know that the user has completed this activity and they have completed it. Unfortunately, we can't necessarily know this for all activities. As such, this should probably only be used if you already know in advance which specific activities you wish to check. */
    public var isCompleted: Bool?

    /** If true, then the activity should have a "new" indicator in the Director UI. */
    public var isNew: Bool?

    /** If true, the user should be able to see this activity. */
    public var isVisible: Bool?

    /** If returned, this is the index into the DestinyActivityDefinition's "loadouts" property, indicating the currently active loadout requirements. */
    public var loadoutRequirementIndex: Int?

    /** If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.
Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live. */
    public var modifierHashes: [Int]?

    /** The recommended light level for the activity, if applicable. */
    public var recommendedLight: Int?

    public init(activityHash: Int? = nil, booleanActivityOptions: [String: Bool]? = nil, canJoin: Bool? = nil, canLead: Bool? = nil, challenges: [DestinyChallengesDestinyChallengeStatus]? = nil, difficultyTier: Int? = nil, displayLevel: Int? = nil, isCompleted: Bool? = nil, isNew: Bool? = nil, isVisible: Bool? = nil, loadoutRequirementIndex: Int? = nil, modifierHashes: [Int]? = nil, recommendedLight: Int? = nil) {
        self.activityHash = activityHash
        self.booleanActivityOptions = booleanActivityOptions
        self.canJoin = canJoin
        self.canLead = canLead
        self.challenges = challenges
        self.difficultyTier = difficultyTier
        self.displayLevel = displayLevel
        self.isCompleted = isCompleted
        self.isNew = isNew
        self.isVisible = isVisible
        self.loadoutRequirementIndex = loadoutRequirementIndex
        self.modifierHashes = modifierHashes
        self.recommendedLight = recommendedLight
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        activityHash = try container.decodeIfPresent("activityHash")
        booleanActivityOptions = try container.decodeIfPresent("booleanActivityOptions")
        canJoin = try container.decodeIfPresent("canJoin")
        canLead = try container.decodeIfPresent("canLead")
        challenges = try container.decodeArrayIfPresent("challenges")
        difficultyTier = try container.decodeIfPresent("difficultyTier")
        displayLevel = try container.decodeIfPresent("displayLevel")
        isCompleted = try container.decodeIfPresent("isCompleted")
        isNew = try container.decodeIfPresent("isNew")
        isVisible = try container.decodeIfPresent("isVisible")
        loadoutRequirementIndex = try container.decodeIfPresent("loadoutRequirementIndex")
        modifierHashes = try container.decodeArrayIfPresent("modifierHashes")
        recommendedLight = try container.decodeIfPresent("recommendedLight")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(activityHash, forKey: "activityHash")
        try container.encodeIfPresent(booleanActivityOptions, forKey: "booleanActivityOptions")
        try container.encodeIfPresent(canJoin, forKey: "canJoin")
        try container.encodeIfPresent(canLead, forKey: "canLead")
        try container.encodeIfPresent(challenges, forKey: "challenges")
        try container.encodeIfPresent(difficultyTier, forKey: "difficultyTier")
        try container.encodeIfPresent(displayLevel, forKey: "displayLevel")
        try container.encodeIfPresent(isCompleted, forKey: "isCompleted")
        try container.encodeIfPresent(isNew, forKey: "isNew")
        try container.encodeIfPresent(isVisible, forKey: "isVisible")
        try container.encodeIfPresent(loadoutRequirementIndex, forKey: "loadoutRequirementIndex")
        try container.encodeIfPresent(modifierHashes, forKey: "modifierHashes")
        try container.encodeIfPresent(recommendedLight, forKey: "recommendedLight")
    }

    public static func == (lhs: DestinyDestinyActivity, rhs: DestinyDestinyActivity) -> Bool {
        guard lhs.activityHash == rhs.activityHash else { return false }
        guard lhs.booleanActivityOptions == rhs.booleanActivityOptions else { return false }
        guard lhs.canJoin == rhs.canJoin else { return false }
        guard lhs.canLead == rhs.canLead else { return false }
        guard lhs.challenges == rhs.challenges else { return false }
        guard lhs.difficultyTier == rhs.difficultyTier else { return false }
        guard lhs.displayLevel == rhs.displayLevel else { return false }
        guard lhs.isCompleted == rhs.isCompleted else { return false }
        guard lhs.isNew == rhs.isNew else { return false }
        guard lhs.isVisible == rhs.isVisible else { return false }
        guard lhs.loadoutRequirementIndex == rhs.loadoutRequirementIndex else { return false }
        guard lhs.modifierHashes == rhs.modifierHashes else { return false }
        guard lhs.recommendedLight == rhs.recommendedLight else { return false }
        return true
    }
}

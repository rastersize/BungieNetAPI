//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinyDefinitionsRecordsDestinyRecordCompletionBlock: APIModel {

    public var scoreValue: Int?

    /** The number of objectives that must be completed before the objective is considered "complete" */
    public var partialCompletionObjectiveCountThreshold: Int?

    public var shouldFireToast: Bool?

    public var toastStyle: Int?

    public init(scoreValue: Int? = nil, partialCompletionObjectiveCountThreshold: Int? = nil, shouldFireToast: Bool? = nil, toastStyle: Int? = nil) {
        self.scoreValue = scoreValue
        self.partialCompletionObjectiveCountThreshold = partialCompletionObjectiveCountThreshold
        self.shouldFireToast = shouldFireToast
        self.toastStyle = toastStyle
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        scoreValue = try container.decodeIfPresent("ScoreValue")
        partialCompletionObjectiveCountThreshold = try container.decodeIfPresent("partialCompletionObjectiveCountThreshold")
        shouldFireToast = try container.decodeIfPresent("shouldFireToast")
        toastStyle = try container.decodeIfPresent("toastStyle")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(scoreValue, forKey: "ScoreValue")
        try container.encodeIfPresent(partialCompletionObjectiveCountThreshold, forKey: "partialCompletionObjectiveCountThreshold")
        try container.encodeIfPresent(shouldFireToast, forKey: "shouldFireToast")
        try container.encodeIfPresent(toastStyle, forKey: "toastStyle")
    }

    public static func == (lhs: DestinyDefinitionsRecordsDestinyRecordCompletionBlock, rhs: DestinyDefinitionsRecordsDestinyRecordCompletionBlock) -> Bool {
        guard lhs.scoreValue == rhs.scoreValue else { return false }
        guard lhs.partialCompletionObjectiveCountThreshold == rhs.partialCompletionObjectiveCountThreshold else { return false }
        guard lhs.shouldFireToast == rhs.shouldFireToast else { return false }
        guard lhs.toastStyle == rhs.toastStyle else { return false }
        return true
    }
}

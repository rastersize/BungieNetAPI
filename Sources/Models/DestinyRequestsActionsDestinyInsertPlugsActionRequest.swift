//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinyRequestsActionsDestinyInsertPlugsActionRequest: APIModel {

    /** Action token provided by the AwaGetActionToken API call. */
    public var actionToken: String?

    public var characterId: Int?

    /** The instance ID of the item having a plug inserted. Only instanced items can have sockets. */
    public var itemInstanceId: Int?

    public var membershipType: Int?

    /** The plugs being inserted. */
    public var plug: [String: Any]?

    public init(actionToken: String? = nil, characterId: Int? = nil, itemInstanceId: Int? = nil, membershipType: Int? = nil, plug: [String: Any]? = nil) {
        self.actionToken = actionToken
        self.characterId = characterId
        self.itemInstanceId = itemInstanceId
        self.membershipType = membershipType
        self.plug = plug
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        actionToken = try container.decodeIfPresent("actionToken")
        characterId = try container.decodeIfPresent("characterId")
        itemInstanceId = try container.decodeIfPresent("itemInstanceId")
        membershipType = try container.decodeIfPresent("membershipType")
        plug = try container.decodeAnyIfPresent("plug")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(actionToken, forKey: "actionToken")
        try container.encodeIfPresent(characterId, forKey: "characterId")
        try container.encodeIfPresent(itemInstanceId, forKey: "itemInstanceId")
        try container.encodeIfPresent(membershipType, forKey: "membershipType")
        try container.encodeAnyIfPresent(plug, forKey: "plug")
    }

    public static func == (lhs: DestinyRequestsActionsDestinyInsertPlugsActionRequest, rhs: DestinyRequestsActionsDestinyInsertPlugsActionRequest) -> Bool {
        guard lhs.actionToken == rhs.actionToken else { return false }
        guard lhs.characterId == rhs.characterId else { return false }
        guard lhs.itemInstanceId == rhs.itemInstanceId else { return false }
        guard lhs.membershipType == rhs.membershipType else { return false }
        guard NSDictionary(dictionary: lhs.plug ?? [:]).isEqual(to: rhs.plug ?? [:]) else { return false }
        return true
    }
}

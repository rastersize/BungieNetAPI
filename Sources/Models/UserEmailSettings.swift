//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The set of all email subscription/opt-in settings and definitions. */
public struct UserEmailSettings: APIModel {

    /** Keyed by the name identifier of the opt-in definition. */
    public var optInDefinitions: [String: UserEmailOptInDefinition]?

    /** Keyed by the name identifier of the Subscription definition. */
    public var subscriptionDefinitions: [String: UserEmailSubscriptionDefinition]?

    /** Keyed by the name identifier of the View definition. */
    public var views: [String: UserEmailViewDefinition]?

    public init(optInDefinitions: [String: UserEmailOptInDefinition]? = nil, subscriptionDefinitions: [String: UserEmailSubscriptionDefinition]? = nil, views: [String: UserEmailViewDefinition]? = nil) {
        self.optInDefinitions = optInDefinitions
        self.subscriptionDefinitions = subscriptionDefinitions
        self.views = views
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        optInDefinitions = try container.decodeIfPresent("optInDefinitions")
        subscriptionDefinitions = try container.decodeIfPresent("subscriptionDefinitions")
        views = try container.decodeIfPresent("views")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(optInDefinitions, forKey: "optInDefinitions")
        try container.encodeIfPresent(subscriptionDefinitions, forKey: "subscriptionDefinitions")
        try container.encodeIfPresent(views, forKey: "views")
    }

    public static func == (lhs: UserEmailSettings, rhs: UserEmailSettings) -> Bool {
        guard lhs.optInDefinitions == rhs.optInDefinitions else { return false }
        guard lhs.subscriptionDefinitions == rhs.subscriptionDefinitions else { return false }
        guard lhs.views == rhs.views else { return false }
        return true
    }
}

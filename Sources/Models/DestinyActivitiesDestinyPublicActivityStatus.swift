//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Represents the public-facing status of an activity: any data about what is currently active in the Activity, regardless of an individual character's progress in it. */
public struct DestinyActivitiesDestinyPublicActivityStatus: APIModel {

    /** Active Challenges for the activity, if any - represented as hashes for DestinyObjectiveDefinitions. */
    public var challengeObjectiveHashes: [Int]?

    /** The active modifiers on this activity, if any - represented as hashes for DestinyActivityModifierDefinitions. */
    public var modifierHashes: [Int]?

    /** If the activity itself provides any specific "mock" rewards, this will be the items and their quantity.
Why "mock", you ask? Because these are the rewards as they are represented in the tooltip of the Activity.
These are often pointers to fake items that look good in a tooltip, but represent an abstract concept of what you will get for a reward rather than the specific items you may obtain. */
    public var rewardTooltipItems: [DestinyDestinyItemQuantity]?

    public init(challengeObjectiveHashes: [Int]? = nil, modifierHashes: [Int]? = nil, rewardTooltipItems: [DestinyDestinyItemQuantity]? = nil) {
        self.challengeObjectiveHashes = challengeObjectiveHashes
        self.modifierHashes = modifierHashes
        self.rewardTooltipItems = rewardTooltipItems
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        challengeObjectiveHashes = try container.decodeArrayIfPresent("challengeObjectiveHashes")
        modifierHashes = try container.decodeArrayIfPresent("modifierHashes")
        rewardTooltipItems = try container.decodeArrayIfPresent("rewardTooltipItems")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(challengeObjectiveHashes, forKey: "challengeObjectiveHashes")
        try container.encodeIfPresent(modifierHashes, forKey: "modifierHashes")
        try container.encodeIfPresent(rewardTooltipItems, forKey: "rewardTooltipItems")
    }

    public static func == (lhs: DestinyActivitiesDestinyPublicActivityStatus, rhs: DestinyActivitiesDestinyPublicActivityStatus) -> Bool {
        guard lhs.challengeObjectiveHashes == rhs.challengeObjectiveHashes else { return false }
        guard lhs.modifierHashes == rhs.modifierHashes else { return false }
        guard lhs.rewardTooltipItems == rhs.rewardTooltipItems else { return false }
        return true
    }
}

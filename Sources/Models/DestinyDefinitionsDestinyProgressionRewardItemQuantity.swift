//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinyDefinitionsDestinyProgressionRewardItemQuantity: APIModel {

    public var acquisitionBehavior: Int?

    public var claimUnlockDisplayStrings: [String]?

    /** The hash identifier for the item in question. Use it to look up the item's DestinyInventoryItemDefinition. */
    public var itemHash: Int?

    /** If this quantity is referring to a specific instance of an item, this will have the item's instance ID. Normally, this will be null. */
    public var itemInstanceId: Int?

    /** The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used. */
    public var quantity: Int?

    public var rewardedAtProgressionLevel: Int?

    public var uiDisplayStyle: String?

    public init(acquisitionBehavior: Int? = nil, claimUnlockDisplayStrings: [String]? = nil, itemHash: Int? = nil, itemInstanceId: Int? = nil, quantity: Int? = nil, rewardedAtProgressionLevel: Int? = nil, uiDisplayStyle: String? = nil) {
        self.acquisitionBehavior = acquisitionBehavior
        self.claimUnlockDisplayStrings = claimUnlockDisplayStrings
        self.itemHash = itemHash
        self.itemInstanceId = itemInstanceId
        self.quantity = quantity
        self.rewardedAtProgressionLevel = rewardedAtProgressionLevel
        self.uiDisplayStyle = uiDisplayStyle
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        acquisitionBehavior = try container.decodeIfPresent("acquisitionBehavior")
        claimUnlockDisplayStrings = try container.decodeArrayIfPresent("claimUnlockDisplayStrings")
        itemHash = try container.decodeIfPresent("itemHash")
        itemInstanceId = try container.decodeIfPresent("itemInstanceId")
        quantity = try container.decodeIfPresent("quantity")
        rewardedAtProgressionLevel = try container.decodeIfPresent("rewardedAtProgressionLevel")
        uiDisplayStyle = try container.decodeIfPresent("uiDisplayStyle")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(acquisitionBehavior, forKey: "acquisitionBehavior")
        try container.encodeIfPresent(claimUnlockDisplayStrings, forKey: "claimUnlockDisplayStrings")
        try container.encodeIfPresent(itemHash, forKey: "itemHash")
        try container.encodeIfPresent(itemInstanceId, forKey: "itemInstanceId")
        try container.encodeIfPresent(quantity, forKey: "quantity")
        try container.encodeIfPresent(rewardedAtProgressionLevel, forKey: "rewardedAtProgressionLevel")
        try container.encodeIfPresent(uiDisplayStyle, forKey: "uiDisplayStyle")
    }

    public static func == (lhs: DestinyDefinitionsDestinyProgressionRewardItemQuantity, rhs: DestinyDefinitionsDestinyProgressionRewardItemQuantity) -> Bool {
        guard lhs.acquisitionBehavior == rhs.acquisitionBehavior else { return false }
        guard lhs.claimUnlockDisplayStrings == rhs.claimUnlockDisplayStrings else { return false }
        guard lhs.itemHash == rhs.itemHash else { return false }
        guard lhs.itemInstanceId == rhs.itemInstanceId else { return false }
        guard lhs.quantity == rhs.quantity else { return false }
        guard lhs.rewardedAtProgressionLevel == rhs.rewardedAtProgressionLevel else { return false }
        guard lhs.uiDisplayStyle == rhs.uiDisplayStyle else { return false }
        return true
    }
}

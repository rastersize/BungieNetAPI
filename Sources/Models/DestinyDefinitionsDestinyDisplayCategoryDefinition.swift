//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Display Categories are different from "categories" in that these are specifically for visual grouping and display of categories in Vendor UI. The "categories" structure is for validation of the contained items, and can be categorized entirely separately from "Display Categories", there need be and often will be no meaningful relationship between the two. */
public struct DestinyDefinitionsDestinyDisplayCategoryDefinition: APIModel {

    public var displayCategoryHash: Int?

    /** If true, this category should be displayed in the "Banner" section of the vendor's UI. */
    public var displayInBanner: Bool?

    public var displayProperties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition?

    /** An indicator of how the category will be displayed in the UI. It's up to you to do something cool or interesting in response to this, or just to treat it as a normal category. */
    public var displayStyleHash: Int?

    /** An indicator of how the category will be displayed in the UI. It's up to you to do something cool or interesting in response to this, or just to treat it as a normal category. */
    public var displayStyleIdentifier: String?

    /** A string identifier for the display category. */
    public var identifier: String?

    public var index: Int?

    /** If it exists, this is the hash identifier of a DestinyProgressionDefinition that represents the progression to show on this display category.
Specific categories can now have thier own distinct progression, apparently. So that's cool. */
    public var progressionHash: Int?

    /** If this category sorts items in a nonstandard way, this will be the way we sort. */
    public var sortOrder: Int?

    public init(displayCategoryHash: Int? = nil, displayInBanner: Bool? = nil, displayProperties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition? = nil, displayStyleHash: Int? = nil, displayStyleIdentifier: String? = nil, identifier: String? = nil, index: Int? = nil, progressionHash: Int? = nil, sortOrder: Int? = nil) {
        self.displayCategoryHash = displayCategoryHash
        self.displayInBanner = displayInBanner
        self.displayProperties = displayProperties
        self.displayStyleHash = displayStyleHash
        self.displayStyleIdentifier = displayStyleIdentifier
        self.identifier = identifier
        self.index = index
        self.progressionHash = progressionHash
        self.sortOrder = sortOrder
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        displayCategoryHash = try container.decodeIfPresent("displayCategoryHash")
        displayInBanner = try container.decodeIfPresent("displayInBanner")
        displayProperties = try container.decodeIfPresent("displayProperties")
        displayStyleHash = try container.decodeIfPresent("displayStyleHash")
        displayStyleIdentifier = try container.decodeIfPresent("displayStyleIdentifier")
        identifier = try container.decodeIfPresent("identifier")
        index = try container.decodeIfPresent("index")
        progressionHash = try container.decodeIfPresent("progressionHash")
        sortOrder = try container.decodeIfPresent("sortOrder")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(displayCategoryHash, forKey: "displayCategoryHash")
        try container.encodeIfPresent(displayInBanner, forKey: "displayInBanner")
        try container.encodeIfPresent(displayProperties, forKey: "displayProperties")
        try container.encodeIfPresent(displayStyleHash, forKey: "displayStyleHash")
        try container.encodeIfPresent(displayStyleIdentifier, forKey: "displayStyleIdentifier")
        try container.encodeIfPresent(identifier, forKey: "identifier")
        try container.encodeIfPresent(index, forKey: "index")
        try container.encodeIfPresent(progressionHash, forKey: "progressionHash")
        try container.encodeIfPresent(sortOrder, forKey: "sortOrder")
    }

    public static func == (lhs: DestinyDefinitionsDestinyDisplayCategoryDefinition, rhs: DestinyDefinitionsDestinyDisplayCategoryDefinition) -> Bool {
        guard lhs.displayCategoryHash == rhs.displayCategoryHash else { return false }
        guard lhs.displayInBanner == rhs.displayInBanner else { return false }
        guard lhs.displayProperties == rhs.displayProperties else { return false }
        guard lhs.displayStyleHash == rhs.displayStyleHash else { return false }
        guard lhs.displayStyleIdentifier == rhs.displayStyleIdentifier else { return false }
        guard lhs.identifier == rhs.identifier else { return false }
        guard lhs.index == rhs.index else { return false }
        guard lhs.progressionHash == rhs.progressionHash else { return false }
        guard lhs.sortOrder == rhs.sortOrder else { return false }
        return true
    }
}

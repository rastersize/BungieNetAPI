//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct GroupsV2GroupMemberApplication: APIModel {

    public var bungieNetUserInfo: UserUserInfoCard?

    public var creationDate: DateTime?

    public var destinyUserInfo: GroupsV2GroupUserInfoCard?

    public var groupId: Int?

    public var requestMessage: String?

    public var resolveDate: DateTime?

    public var resolveMessage: String?

    public var resolveState: Int?

    public var resolvedByMembershipId: Int?

    public init(bungieNetUserInfo: UserUserInfoCard? = nil, creationDate: DateTime? = nil, destinyUserInfo: GroupsV2GroupUserInfoCard? = nil, groupId: Int? = nil, requestMessage: String? = nil, resolveDate: DateTime? = nil, resolveMessage: String? = nil, resolveState: Int? = nil, resolvedByMembershipId: Int? = nil) {
        self.bungieNetUserInfo = bungieNetUserInfo
        self.creationDate = creationDate
        self.destinyUserInfo = destinyUserInfo
        self.groupId = groupId
        self.requestMessage = requestMessage
        self.resolveDate = resolveDate
        self.resolveMessage = resolveMessage
        self.resolveState = resolveState
        self.resolvedByMembershipId = resolvedByMembershipId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        bungieNetUserInfo = try container.decodeIfPresent("bungieNetUserInfo")
        creationDate = try container.decodeIfPresent("creationDate")
        destinyUserInfo = try container.decodeIfPresent("destinyUserInfo")
        groupId = try container.decodeIfPresent("groupId")
        requestMessage = try container.decodeIfPresent("requestMessage")
        resolveDate = try container.decodeIfPresent("resolveDate")
        resolveMessage = try container.decodeIfPresent("resolveMessage")
        resolveState = try container.decodeIfPresent("resolveState")
        resolvedByMembershipId = try container.decodeIfPresent("resolvedByMembershipId")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(bungieNetUserInfo, forKey: "bungieNetUserInfo")
        try container.encodeIfPresent(creationDate, forKey: "creationDate")
        try container.encodeIfPresent(destinyUserInfo, forKey: "destinyUserInfo")
        try container.encodeIfPresent(groupId, forKey: "groupId")
        try container.encodeIfPresent(requestMessage, forKey: "requestMessage")
        try container.encodeIfPresent(resolveDate, forKey: "resolveDate")
        try container.encodeIfPresent(resolveMessage, forKey: "resolveMessage")
        try container.encodeIfPresent(resolveState, forKey: "resolveState")
        try container.encodeIfPresent(resolvedByMembershipId, forKey: "resolvedByMembershipId")
    }

    public static func == (lhs: GroupsV2GroupMemberApplication, rhs: GroupsV2GroupMemberApplication) -> Bool {
        guard lhs.bungieNetUserInfo == rhs.bungieNetUserInfo else { return false }
        guard lhs.creationDate == rhs.creationDate else { return false }
        guard lhs.destinyUserInfo == rhs.destinyUserInfo else { return false }
        guard lhs.groupId == rhs.groupId else { return false }
        guard lhs.requestMessage == rhs.requestMessage else { return false }
        guard lhs.resolveDate == rhs.resolveDate else { return false }
        guard lhs.resolveMessage == rhs.resolveMessage else { return false }
        guard lhs.resolveState == rhs.resolveState else { return false }
        guard lhs.resolvedByMembershipId == rhs.resolvedByMembershipId else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Has character-agnostic information about an item being sold by a vendor.
Note that if you want instance, stats, etc... data for the item, you'll have to request additional components such as ItemInstances, ItemPerks etc... and acquire them from the DestinyVendorResponse's "items" property. For most of these, however, you'll have to ask for it in context of a specific character. */
public struct DestinyComponentsVendorsDestinyPublicVendorSaleItemComponent: APIModel {

    /** A summary of the current costs of the item. */
    public var costs: [DestinyDestinyItemQuantity]?

    /** The hash of the item being sold, as a quick shortcut for looking up the DestinyInventoryItemDefinition of the sale item. */
    public var itemHash: Int?

    /** If this item has its own custom date where it may be removed from the Vendor's rotation, this is that date.
Note that there's not actually any guarantee that it will go away: it could be chosen again and end up still being in the Vendor's sale items! But this is the next date where that test will occur, and is also the date that the game shows for availability on things like Bounties being sold. So it's the best we can give. */
    public var overrideNextRefreshDate: DateTime?

    /** If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.
If you don't do this, certain items whose styles are being overridden by socketed items - such as the "Recycle Shader" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate. */
    public var overrideStyleItemHash: Int?

    /** How much of the item you'll be getting. */
    public var quantity: Int?

    /** The index into the DestinyVendorDefinition.itemList property. Note that this means Vendor data *is* Content Version dependent: make sure you have the latest content before you use Vendor data, or these indexes may mismatch. 
Most systems avoid this problem, but Vendors is one area where we are unable to reasonably avoid content dependency at the moment. */
    public var vendorItemIndex: Int?

    public init(costs: [DestinyDestinyItemQuantity]? = nil, itemHash: Int? = nil, overrideNextRefreshDate: DateTime? = nil, overrideStyleItemHash: Int? = nil, quantity: Int? = nil, vendorItemIndex: Int? = nil) {
        self.costs = costs
        self.itemHash = itemHash
        self.overrideNextRefreshDate = overrideNextRefreshDate
        self.overrideStyleItemHash = overrideStyleItemHash
        self.quantity = quantity
        self.vendorItemIndex = vendorItemIndex
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        costs = try container.decodeArrayIfPresent("costs")
        itemHash = try container.decodeIfPresent("itemHash")
        overrideNextRefreshDate = try container.decodeIfPresent("overrideNextRefreshDate")
        overrideStyleItemHash = try container.decodeIfPresent("overrideStyleItemHash")
        quantity = try container.decodeIfPresent("quantity")
        vendorItemIndex = try container.decodeIfPresent("vendorItemIndex")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(costs, forKey: "costs")
        try container.encodeIfPresent(itemHash, forKey: "itemHash")
        try container.encodeIfPresent(overrideNextRefreshDate, forKey: "overrideNextRefreshDate")
        try container.encodeIfPresent(overrideStyleItemHash, forKey: "overrideStyleItemHash")
        try container.encodeIfPresent(quantity, forKey: "quantity")
        try container.encodeIfPresent(vendorItemIndex, forKey: "vendorItemIndex")
    }

    public static func == (lhs: DestinyComponentsVendorsDestinyPublicVendorSaleItemComponent, rhs: DestinyComponentsVendorsDestinyPublicVendorSaleItemComponent) -> Bool {
        guard lhs.costs == rhs.costs else { return false }
        guard lhs.itemHash == rhs.itemHash else { return false }
        guard lhs.overrideNextRefreshDate == rhs.overrideNextRefreshDate else { return false }
        guard lhs.overrideStyleItemHash == rhs.overrideStyleItemHash else { return false }
        guard lhs.quantity == rhs.quantity else { return false }
        guard lhs.vendorItemIndex == rhs.vendorItemIndex else { return false }
        return true
    }
}

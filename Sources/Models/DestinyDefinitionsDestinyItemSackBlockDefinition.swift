//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Some items are "sacks" - they can be "opened" to produce other items. This is information related to its sack status, mostly UI strings. Engrams are an example of items that are considered to be "Sacks". */
public struct DestinyDefinitionsDestinyItemSackBlockDefinition: APIModel {

    /** A description of what will happen when you open the sack. As far as I can tell, this is blank currently. Unknown whether it will eventually be populated with useful info. */
    public var detailAction: String?

    /** The localized name of the action being performed when you open the sack. */
    public var openAction: String?

    public var openOnAcquire: Bool?

    public var selectItemCount: Int?

    public var vendorSackType: String?

    public init(detailAction: String? = nil, openAction: String? = nil, openOnAcquire: Bool? = nil, selectItemCount: Int? = nil, vendorSackType: String? = nil) {
        self.detailAction = detailAction
        self.openAction = openAction
        self.openOnAcquire = openOnAcquire
        self.selectItemCount = selectItemCount
        self.vendorSackType = vendorSackType
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        detailAction = try container.decodeIfPresent("detailAction")
        openAction = try container.decodeIfPresent("openAction")
        openOnAcquire = try container.decodeIfPresent("openOnAcquire")
        selectItemCount = try container.decodeIfPresent("selectItemCount")
        vendorSackType = try container.decodeIfPresent("vendorSackType")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(detailAction, forKey: "detailAction")
        try container.encodeIfPresent(openAction, forKey: "openAction")
        try container.encodeIfPresent(openOnAcquire, forKey: "openOnAcquire")
        try container.encodeIfPresent(selectItemCount, forKey: "selectItemCount")
        try container.encodeIfPresent(vendorSackType, forKey: "vendorSackType")
    }

    public static func == (lhs: DestinyDefinitionsDestinyItemSackBlockDefinition, rhs: DestinyDefinitionsDestinyItemSackBlockDefinition) -> Bool {
        guard lhs.detailAction == rhs.detailAction else { return false }
        guard lhs.openAction == rhs.openAction else { return false }
        guard lhs.openOnAcquire == rhs.openOnAcquire else { return false }
        guard lhs.selectItemCount == rhs.selectItemCount else { return false }
        guard lhs.vendorSackType == rhs.vendorSackType else { return false }
        return true
    }
}

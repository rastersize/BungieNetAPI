//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** All damage types that are possible in the game are defined here, along with localized info and icons as needed. */
public struct DestinyDefinitionsDestinyDamageTypeDefinition: APIModel {

    /** The description of the damage type, icon etc... */
    public var displayProperties: [String: Any]?

    /** We have an enumeration for damage types for quick reference. This is the current definition's damage type enum value. */
    public var enumValue: Int?

    /** The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to. */
    public var hash: Int?

    /** The index of the entity as it was found in the investment tables. */
    public var index: Int?

    /** If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry! */
    public var redacted: Bool?

    /** If TRUE, the game shows this damage type's icon. Otherwise, it doesn't. Whether you show it or not is up to you. */
    public var showIcon: Bool?

    /** A variant of the icon that is transparent and colorless. */
    public var transparentIconPath: String?

    public init(displayProperties: [String: Any]? = nil, enumValue: Int? = nil, hash: Int? = nil, index: Int? = nil, redacted: Bool? = nil, showIcon: Bool? = nil, transparentIconPath: String? = nil) {
        self.displayProperties = displayProperties
        self.enumValue = enumValue
        self.hash = hash
        self.index = index
        self.redacted = redacted
        self.showIcon = showIcon
        self.transparentIconPath = transparentIconPath
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        displayProperties = try container.decodeAnyIfPresent("displayProperties")
        enumValue = try container.decodeIfPresent("enumValue")
        hash = try container.decodeIfPresent("hash")
        index = try container.decodeIfPresent("index")
        redacted = try container.decodeIfPresent("redacted")
        showIcon = try container.decodeIfPresent("showIcon")
        transparentIconPath = try container.decodeIfPresent("transparentIconPath")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeAnyIfPresent(displayProperties, forKey: "displayProperties")
        try container.encodeIfPresent(enumValue, forKey: "enumValue")
        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(index, forKey: "index")
        try container.encodeIfPresent(redacted, forKey: "redacted")
        try container.encodeIfPresent(showIcon, forKey: "showIcon")
        try container.encodeIfPresent(transparentIconPath, forKey: "transparentIconPath")
    }

    public static func == (lhs: DestinyDefinitionsDestinyDamageTypeDefinition, rhs: DestinyDefinitionsDestinyDamageTypeDefinition) -> Bool {
        guard NSDictionary(dictionary: lhs.displayProperties ?? [:]).isEqual(to: rhs.displayProperties ?? [:]) else { return false }
        guard lhs.enumValue == rhs.enumValue else { return false }
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.index == rhs.index else { return false }
        guard lhs.redacted == rhs.redacted else { return false }
        guard lhs.showIcon == rhs.showIcon else { return false }
        guard lhs.transparentIconPath == rhs.transparentIconPath else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Bare minimum summary information for an item, for the sake of 3D rendering the item. */
public struct DestinyCharacterDestinyItemPeerView: APIModel {

    /** The list of dyes that have been applied to this item. */
    public var dyes: [DestinyDyeReference]?

    /** The hash identifier of the item in question. Use it to look up the DestinyInventoryItemDefinition of the item for static rendering data. */
    public var itemHash: Int?

    public init(dyes: [DestinyDyeReference]? = nil, itemHash: Int? = nil) {
        self.dyes = dyes
        self.itemHash = itemHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        dyes = try container.decodeArrayIfPresent("dyes")
        itemHash = try container.decodeIfPresent("itemHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(dyes, forKey: "dyes")
        try container.encodeIfPresent(itemHash, forKey: "itemHash")
    }

    public static func == (lhs: DestinyCharacterDestinyItemPeerView, rhs: DestinyCharacterDestinyItemPeerView) -> Bool {
        guard lhs.dyes == rhs.dyes else { return false }
        guard lhs.itemHash == rhs.itemHash else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** If you are playing in an activity, this is some information about it.
Note that we cannot guarantee any of this resembles what ends up in the PGCR in any way. They are sourced by two entirely separate systems with their own logic, and the one we source this data from should be considered non-authoritative in comparison. */
public struct DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity: APIModel {

    /** If you're still in it but it "ended" (like when folks are dancing around the loot after they beat a boss), this is when the activity ended. */
    public var endTime: DateTime?

    /** If you have human opponents, this is the highest opposing team's score. */
    public var highestOpposingFactionScore: Float?

    /** This is how many human or poorly crafted aimbot opponents you have. */
    public var numberOfOpponents: Int?

    /** This is how many human or poorly crafted aimbots are on your team. */
    public var numberOfPlayers: Int?

    /** This is what our non-authoritative source thought the score was. */
    public var score: Float?

    /** When the activity started. */
    public var startTime: DateTime?

    public init(endTime: DateTime? = nil, highestOpposingFactionScore: Float? = nil, numberOfOpponents: Int? = nil, numberOfPlayers: Int? = nil, score: Float? = nil, startTime: DateTime? = nil) {
        self.endTime = endTime
        self.highestOpposingFactionScore = highestOpposingFactionScore
        self.numberOfOpponents = numberOfOpponents
        self.numberOfPlayers = numberOfPlayers
        self.score = score
        self.startTime = startTime
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        endTime = try container.decodeIfPresent("endTime")
        highestOpposingFactionScore = try container.decodeIfPresent("highestOpposingFactionScore")
        numberOfOpponents = try container.decodeIfPresent("numberOfOpponents")
        numberOfPlayers = try container.decodeIfPresent("numberOfPlayers")
        score = try container.decodeIfPresent("score")
        startTime = try container.decodeIfPresent("startTime")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(endTime, forKey: "endTime")
        try container.encodeIfPresent(highestOpposingFactionScore, forKey: "highestOpposingFactionScore")
        try container.encodeIfPresent(numberOfOpponents, forKey: "numberOfOpponents")
        try container.encodeIfPresent(numberOfPlayers, forKey: "numberOfPlayers")
        try container.encodeIfPresent(score, forKey: "score")
        try container.encodeIfPresent(startTime, forKey: "startTime")
    }

    public static func == (lhs: DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity, rhs: DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity) -> Bool {
        guard lhs.endTime == rhs.endTime else { return false }
        guard lhs.highestOpposingFactionScore == rhs.highestOpposingFactionScore else { return false }
        guard lhs.numberOfOpponents == rhs.numberOfOpponents else { return false }
        guard lhs.numberOfPlayers == rhs.numberOfPlayers else { return false }
        guard lhs.score == rhs.score else { return false }
        guard lhs.startTime == rhs.startTime else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct UserEmailViewDefinitionSetting: APIModel {

    /** A dictionary of localized text for the EMail setting, keyed by the locale. */
    public var localization: [String: UserEMailSettingLocalization]?

    /** The identifier for this UI Setting, which can be used to relate it to custom strings or other data as desired. */
    public var name: String?

    /** The OptInFlags value to set or clear if this setting is set or cleared in the UI. It is the aggregate of all underlying opt-in flags related to this setting. */
    public var optInAggregateValue: Int?

    /** If true, this setting should be set by default if the user hasn't chosen whether it's set or cleared yet. */
    public var setByDefault: Bool?

    /** The subscriptions to show as children of this setting, if any. */
    public var subscriptions: [UserEmailSubscriptionDefinition]?

    public init(localization: [String: UserEMailSettingLocalization]? = nil, name: String? = nil, optInAggregateValue: Int? = nil, setByDefault: Bool? = nil, subscriptions: [UserEmailSubscriptionDefinition]? = nil) {
        self.localization = localization
        self.name = name
        self.optInAggregateValue = optInAggregateValue
        self.setByDefault = setByDefault
        self.subscriptions = subscriptions
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        localization = try container.decodeIfPresent("localization")
        name = try container.decodeIfPresent("name")
        optInAggregateValue = try container.decodeIfPresent("optInAggregateValue")
        setByDefault = try container.decodeIfPresent("setByDefault")
        subscriptions = try container.decodeArrayIfPresent("subscriptions")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(localization, forKey: "localization")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(optInAggregateValue, forKey: "optInAggregateValue")
        try container.encodeIfPresent(setByDefault, forKey: "setByDefault")
        try container.encodeIfPresent(subscriptions, forKey: "subscriptions")
    }

    public static func == (lhs: UserEmailViewDefinitionSetting, rhs: UserEmailViewDefinitionSetting) -> Bool {
        guard lhs.localization == rhs.localization else { return false }
        guard lhs.name == rhs.name else { return false }
        guard lhs.optInAggregateValue == rhs.optInAggregateValue else { return false }
        guard lhs.setByDefault == rhs.setByDefault else { return false }
        guard lhs.subscriptions == rhs.subscriptions else { return false }
        return true
    }
}

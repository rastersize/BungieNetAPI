//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** This property has some history. A talent grid can provide stats on both the item it's related to and the character equipping the item. This returns data about those stat bonuses. */
public struct DestinyDestinyTalentNodeStatBlock: APIModel {

    /** The stat benefits conferred when this talent node is activated for the current Step that is active on the node. */
    public var currentStepStats: [DestinyDestinyStat]?

    /** This is a holdover from the old days of Destiny 1, when a node could be activated multiple times, conferring multiple steps worth of benefits: you would use this property to show what activating the "next" step on the node would provide vs. what the current step is providing. While Nodes are currently not being used this way, the underlying system for this functionality still exists. I hesitate to remove this property while the ability for designers to make such a talent grid still exists. Whether you want to show it is up to you. */
    public var nextStepStats: [DestinyDestinyStat]?

    public init(currentStepStats: [DestinyDestinyStat]? = nil, nextStepStats: [DestinyDestinyStat]? = nil) {
        self.currentStepStats = currentStepStats
        self.nextStepStats = nextStepStats
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        currentStepStats = try container.decodeArrayIfPresent("currentStepStats")
        nextStepStats = try container.decodeArrayIfPresent("nextStepStats")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(currentStepStats, forKey: "currentStepStats")
        try container.encodeIfPresent(nextStepStats, forKey: "nextStepStats")
    }

    public static func == (lhs: DestinyDestinyTalentNodeStatBlock, rhs: DestinyDestinyTalentNodeStatBlock) -> Bool {
        guard lhs.currentStepStats == rhs.currentStepStats else { return false }
        guard lhs.nextStepStats == rhs.nextStepStats else { return false }
        return true
    }
}

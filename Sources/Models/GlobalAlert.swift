//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct GlobalAlert: APIModel {

    public var alertHtml: String?

    public var alertKey: String?

    public var alertLevel: Int?

    public var alertLink: String?

    public var alertTimestamp: DateTime?

    public var alertType: Int?

    public var streamInfo: StreamInfo?

    public init(alertHtml: String? = nil, alertKey: String? = nil, alertLevel: Int? = nil, alertLink: String? = nil, alertTimestamp: DateTime? = nil, alertType: Int? = nil, streamInfo: StreamInfo? = nil) {
        self.alertHtml = alertHtml
        self.alertKey = alertKey
        self.alertLevel = alertLevel
        self.alertLink = alertLink
        self.alertTimestamp = alertTimestamp
        self.alertType = alertType
        self.streamInfo = streamInfo
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        alertHtml = try container.decodeIfPresent("AlertHtml")
        alertKey = try container.decodeIfPresent("AlertKey")
        alertLevel = try container.decodeIfPresent("AlertLevel")
        alertLink = try container.decodeIfPresent("AlertLink")
        alertTimestamp = try container.decodeIfPresent("AlertTimestamp")
        alertType = try container.decodeIfPresent("AlertType")
        streamInfo = try container.decodeIfPresent("StreamInfo")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(alertHtml, forKey: "AlertHtml")
        try container.encodeIfPresent(alertKey, forKey: "AlertKey")
        try container.encodeIfPresent(alertLevel, forKey: "AlertLevel")
        try container.encodeIfPresent(alertLink, forKey: "AlertLink")
        try container.encodeIfPresent(alertTimestamp, forKey: "AlertTimestamp")
        try container.encodeIfPresent(alertType, forKey: "AlertType")
        try container.encodeIfPresent(streamInfo, forKey: "StreamInfo")
    }

    public static func == (lhs: GlobalAlert, rhs: GlobalAlert) -> Bool {
        guard lhs.alertHtml == rhs.alertHtml else { return false }
        guard lhs.alertKey == rhs.alertKey else { return false }
        guard lhs.alertLevel == rhs.alertLevel else { return false }
        guard lhs.alertLink == rhs.alertLink else { return false }
        guard lhs.alertTimestamp == rhs.alertTimestamp else { return false }
        guard lhs.alertType == rhs.alertType else { return false }
        guard lhs.streamInfo == rhs.streamInfo else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Perks are modifiers to a character or item that can be applied situationally.
- Perks determine a weapons' damage type.
- Perks put the Mods in Modifiers (they are literally the entity that bestows the Sandbox benefit for whatever fluff text about the modifier in the Socket, Plug or Talent Node)
- Perks are applied for unique alterations of state in Objectives
Anyways, I'm sure you can see why perks are so interesting.
What Perks often don't have is human readable information, so we attempt to reverse engineer that by pulling that data from places that uniquely refer to these perks: namely, Talent Nodes and Plugs. That only gives us a subset of perks that are human readable, but those perks are the ones people generally care about anyways. The others are left as a mystery, their true purpose mostly unknown and undocumented. */
public struct DestinyDefinitionsDestinySandboxPerkDefinition: APIModel {

    /** If this perk grants a damage type to a weapon, the damage type will be defined here.
Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition. */
    public var damageType: Int?

    /** The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.
This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient. */
    public var damageTypeHash: Int?

    /** These display properties are by no means guaranteed to be populated. Usually when it is, it's only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk. */
    public var displayProperties: [String: Any]?

    /** The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to. */
    public var hash: Int?

    /** The index of the entity as it was found in the investment tables. */
    public var index: Int?

    /** If true, you can actually show the perk in the UI. Otherwise, it doesn't have useful player-facing information. */
    public var isDisplayable: Bool?

    /** An old holdover from the original Armory, this was an attempt to group perks by functionality.
It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order. */
    public var perkGroups: [String: Any]?

    /** The string identifier for the perk. */
    public var perkIdentifier: String?

    /** If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry! */
    public var redacted: Bool?

    public init(damageType: Int? = nil, damageTypeHash: Int? = nil, displayProperties: [String: Any]? = nil, hash: Int? = nil, index: Int? = nil, isDisplayable: Bool? = nil, perkGroups: [String: Any]? = nil, perkIdentifier: String? = nil, redacted: Bool? = nil) {
        self.damageType = damageType
        self.damageTypeHash = damageTypeHash
        self.displayProperties = displayProperties
        self.hash = hash
        self.index = index
        self.isDisplayable = isDisplayable
        self.perkGroups = perkGroups
        self.perkIdentifier = perkIdentifier
        self.redacted = redacted
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        damageType = try container.decodeIfPresent("damageType")
        damageTypeHash = try container.decodeIfPresent("damageTypeHash")
        displayProperties = try container.decodeAnyIfPresent("displayProperties")
        hash = try container.decodeIfPresent("hash")
        index = try container.decodeIfPresent("index")
        isDisplayable = try container.decodeIfPresent("isDisplayable")
        perkGroups = try container.decodeAnyIfPresent("perkGroups")
        perkIdentifier = try container.decodeIfPresent("perkIdentifier")
        redacted = try container.decodeIfPresent("redacted")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(damageType, forKey: "damageType")
        try container.encodeIfPresent(damageTypeHash, forKey: "damageTypeHash")
        try container.encodeAnyIfPresent(displayProperties, forKey: "displayProperties")
        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(index, forKey: "index")
        try container.encodeIfPresent(isDisplayable, forKey: "isDisplayable")
        try container.encodeAnyIfPresent(perkGroups, forKey: "perkGroups")
        try container.encodeIfPresent(perkIdentifier, forKey: "perkIdentifier")
        try container.encodeIfPresent(redacted, forKey: "redacted")
    }

    public static func == (lhs: DestinyDefinitionsDestinySandboxPerkDefinition, rhs: DestinyDefinitionsDestinySandboxPerkDefinition) -> Bool {
        guard lhs.damageType == rhs.damageType else { return false }
        guard lhs.damageTypeHash == rhs.damageTypeHash else { return false }
        guard NSDictionary(dictionary: lhs.displayProperties ?? [:]).isEqual(to: rhs.displayProperties ?? [:]) else { return false }
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.index == rhs.index else { return false }
        guard lhs.isDisplayable == rhs.isDisplayable else { return false }
        guard NSDictionary(dictionary: lhs.perkGroups ?? [:]).isEqual(to: rhs.perkGroups ?? [:]) else { return false }
        guard lhs.perkIdentifier == rhs.perkIdentifier else { return false }
        guard lhs.redacted == rhs.redacted else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** NOTE: GroupQuery, as of Destiny 2, has essentially two totally different and incompatible "modes".
If you are querying for a group, you can pass any of the properties below.
If you are querying for a Clan, you MUST NOT pass any of the following properties (they must be null or undefined in your request, not just empty string/default values):
- groupMemberCountFilter - localeFilter - tagText
If you pass these, you will get a useless InvalidParameters error. */
public struct GroupsV2GroupQuery: APIModel {

    /** NOTE: GroupQuery, as of Destiny 2, has essentially two totally different and incompatible "modes".
    If you are querying for a group, you can pass any of the properties below.
    If you are querying for a Clan, you MUST NOT pass any of the following properties (they must be null or undefined in your request, not just empty string/default values):
    - groupMemberCountFilter - localeFilter - tagText
    If you pass these, you will get a useless InvalidParameters error. */
    public enum GroupMemberCountFilter: Int, Codable, Equatable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    public var creationDate: Int?

    public var currentPage: Int?

    public var groupMemberCountFilter: GroupMemberCountFilter?

    public var groupType: Int?

    public var itemsPerPage: Int?

    public var localeFilter: String?

    public var name: String?

    public var requestContinuationToken: String?

    public var sortBy: Int?

    public var tagText: String?

    public init(creationDate: Int? = nil, currentPage: Int? = nil, groupMemberCountFilter: GroupMemberCountFilter? = nil, groupType: Int? = nil, itemsPerPage: Int? = nil, localeFilter: String? = nil, name: String? = nil, requestContinuationToken: String? = nil, sortBy: Int? = nil, tagText: String? = nil) {
        self.creationDate = creationDate
        self.currentPage = currentPage
        self.groupMemberCountFilter = groupMemberCountFilter
        self.groupType = groupType
        self.itemsPerPage = itemsPerPage
        self.localeFilter = localeFilter
        self.name = name
        self.requestContinuationToken = requestContinuationToken
        self.sortBy = sortBy
        self.tagText = tagText
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        creationDate = try container.decodeIfPresent("creationDate")
        currentPage = try container.decodeIfPresent("currentPage")
        groupMemberCountFilter = try container.decodeIfPresent("groupMemberCountFilter")
        groupType = try container.decodeIfPresent("groupType")
        itemsPerPage = try container.decodeIfPresent("itemsPerPage")
        localeFilter = try container.decodeIfPresent("localeFilter")
        name = try container.decodeIfPresent("name")
        requestContinuationToken = try container.decodeIfPresent("requestContinuationToken")
        sortBy = try container.decodeIfPresent("sortBy")
        tagText = try container.decodeIfPresent("tagText")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(creationDate, forKey: "creationDate")
        try container.encodeIfPresent(currentPage, forKey: "currentPage")
        try container.encodeIfPresent(groupMemberCountFilter, forKey: "groupMemberCountFilter")
        try container.encodeIfPresent(groupType, forKey: "groupType")
        try container.encodeIfPresent(itemsPerPage, forKey: "itemsPerPage")
        try container.encodeIfPresent(localeFilter, forKey: "localeFilter")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(requestContinuationToken, forKey: "requestContinuationToken")
        try container.encodeIfPresent(sortBy, forKey: "sortBy")
        try container.encodeIfPresent(tagText, forKey: "tagText")
    }

    public static func == (lhs: GroupsV2GroupQuery, rhs: GroupsV2GroupQuery) -> Bool {
        guard lhs.creationDate == rhs.creationDate else { return false }
        guard lhs.currentPage == rhs.currentPage else { return false }
        guard lhs.groupMemberCountFilter == rhs.groupMemberCountFilter else { return false }
        guard lhs.groupType == rhs.groupType else { return false }
        guard lhs.itemsPerPage == rhs.itemsPerPage else { return false }
        guard lhs.localeFilter == rhs.localeFilter else { return false }
        guard lhs.name == rhs.name else { return false }
        guard lhs.requestContinuationToken == rhs.requestContinuationToken else { return false }
        guard lhs.sortBy == rhs.sortBy else { return false }
        guard lhs.tagText == rhs.tagText else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ContentModelsContentPreview: APIModel {

    public var itemInSet: Bool?

    public var name: String?

    public var path: String?

    public var setNesting: Int?

    public var setTag: String?

    public var useSetId: Int?

    public init(itemInSet: Bool? = nil, name: String? = nil, path: String? = nil, setNesting: Int? = nil, setTag: String? = nil, useSetId: Int? = nil) {
        self.itemInSet = itemInSet
        self.name = name
        self.path = path
        self.setNesting = setNesting
        self.setTag = setTag
        self.useSetId = useSetId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        itemInSet = try container.decodeIfPresent("itemInSet")
        name = try container.decodeIfPresent("name")
        path = try container.decodeIfPresent("path")
        setNesting = try container.decodeIfPresent("setNesting")
        setTag = try container.decodeIfPresent("setTag")
        useSetId = try container.decodeIfPresent("useSetId")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(itemInSet, forKey: "itemInSet")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(path, forKey: "path")
        try container.encodeIfPresent(setNesting, forKey: "setNesting")
        try container.encodeIfPresent(setTag, forKey: "setTag")
        try container.encodeIfPresent(useSetId, forKey: "useSetId")
    }

    public static func == (lhs: ContentModelsContentPreview, rhs: ContentModelsContentPreview) -> Bool {
        guard lhs.itemInSet == rhs.itemInSet else { return false }
        guard lhs.name == rhs.name else { return false }
        guard lhs.path == rhs.path else { return false }
        guard lhs.setNesting == rhs.setNesting else { return false }
        guard lhs.setTag == rhs.setTag else { return false }
        guard lhs.useSetId == rhs.useSetId else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Items that can be equipped define this block. It contains information we need to understand how and when the item can be equipped. */
public struct DestinyDefinitionsDestinyEquippingBlockDefinition: APIModel {

    /** Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected. */
    public var ammoType: Int?

    /** These are custom attributes on the equippability of the item.
For now, this can only be "equip on acquire", which would mean that the item will be automatically equipped as soon as you pick it up. */
    public var attributes: Int?

    /** These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions. */
    public var displayStrings: [String]?

    /** An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped. */
    public var equipmentSlotTypeHash: Int?

    /** If the item is part of a gearset, this is a reference to that gearset item. */
    public var gearsetItemHash: Int?

    /** If defined, this is the label used to check if the item has other items of matching types already equipped. 
For instance, when you aren't allowed to equip more than one Exotic Weapon, that's because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item's uniqueLabel vs. all other already equipped items (other than the item in the slot that's about to be occupied). */
    public var uniqueLabel: String?

    /** The hash of that unique label. Does not point to a specific definition. */
    public var uniqueLabelHash: Int?

    public init(ammoType: Int? = nil, attributes: Int? = nil, displayStrings: [String]? = nil, equipmentSlotTypeHash: Int? = nil, gearsetItemHash: Int? = nil, uniqueLabel: String? = nil, uniqueLabelHash: Int? = nil) {
        self.ammoType = ammoType
        self.attributes = attributes
        self.displayStrings = displayStrings
        self.equipmentSlotTypeHash = equipmentSlotTypeHash
        self.gearsetItemHash = gearsetItemHash
        self.uniqueLabel = uniqueLabel
        self.uniqueLabelHash = uniqueLabelHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        ammoType = try container.decodeIfPresent("ammoType")
        attributes = try container.decodeIfPresent("attributes")
        displayStrings = try container.decodeArrayIfPresent("displayStrings")
        equipmentSlotTypeHash = try container.decodeIfPresent("equipmentSlotTypeHash")
        gearsetItemHash = try container.decodeIfPresent("gearsetItemHash")
        uniqueLabel = try container.decodeIfPresent("uniqueLabel")
        uniqueLabelHash = try container.decodeIfPresent("uniqueLabelHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(ammoType, forKey: "ammoType")
        try container.encodeIfPresent(attributes, forKey: "attributes")
        try container.encodeIfPresent(displayStrings, forKey: "displayStrings")
        try container.encodeIfPresent(equipmentSlotTypeHash, forKey: "equipmentSlotTypeHash")
        try container.encodeIfPresent(gearsetItemHash, forKey: "gearsetItemHash")
        try container.encodeIfPresent(uniqueLabel, forKey: "uniqueLabel")
        try container.encodeIfPresent(uniqueLabelHash, forKey: "uniqueLabelHash")
    }

    public static func == (lhs: DestinyDefinitionsDestinyEquippingBlockDefinition, rhs: DestinyDefinitionsDestinyEquippingBlockDefinition) -> Bool {
        guard lhs.ammoType == rhs.ammoType else { return false }
        guard lhs.attributes == rhs.attributes else { return false }
        guard lhs.displayStrings == rhs.displayStrings else { return false }
        guard lhs.equipmentSlotTypeHash == rhs.equipmentSlotTypeHash else { return false }
        guard lhs.gearsetItemHash == rhs.gearsetItemHash else { return false }
        guard lhs.uniqueLabel == rhs.uniqueLabel else { return false }
        guard lhs.uniqueLabelHash == rhs.uniqueLabelHash else { return false }
        return true
    }
}

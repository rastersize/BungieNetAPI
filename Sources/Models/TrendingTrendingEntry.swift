//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The list entry view for trending items. Returns just enough to show the item on the trending page. */
public struct TrendingTrendingEntry: APIModel {

    /** If the entry has a date at which it was created, this is that date. */
    public var creationDate: DateTime?

    /** The localized "display name/article title/'primary localized identifier'" of the entity. */
    public var displayName: String?

    public var endDate: DateTime?

    /** An enum - unfortunately - dictating all of the possible kinds of trending items that you might get in your result set, in case you want to do custom rendering or call to get the details of the item. */
    public var entityType: Int?

    /** If isFeatured, this image will be populated with whatever the featured image is. Note that this will likely be a very large image, so don't use it all the time. */
    public var featureImage: String?

    /** We don't know whether the identifier will be a string, a uint, or a long... so we're going to cast it all to a string. But either way, we need any trending item created to have a single unique identifier for its type. */
    public var identifier: String?

    public var image: String?

    public var isFeatured: Bool?

    /** If the item is of entityType TrendingEntryType.Container, it may have items - also Trending Entries - contained within it. This is the ordered list of those to display under the Container's header. */
    public var items: [TrendingTrendingEntry]?

    public var link: String?

    /** If this is populated, the entry has a related MP4 video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo */
    public var mp4Video: String?

    public var startDate: DateTime?

    /** If the entity has a localized tagline/subtitle/motto/whatever, that is found here. */
    public var tagline: String?

    /** If this is populated, the entry has a related WebM video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo */
    public var webmVideo: String?

    /** The weighted score of this trending item. */
    public var weight: Double?

    public init(creationDate: DateTime? = nil, displayName: String? = nil, endDate: DateTime? = nil, entityType: Int? = nil, featureImage: String? = nil, identifier: String? = nil, image: String? = nil, isFeatured: Bool? = nil, items: [TrendingTrendingEntry]? = nil, link: String? = nil, mp4Video: String? = nil, startDate: DateTime? = nil, tagline: String? = nil, webmVideo: String? = nil, weight: Double? = nil) {
        self.creationDate = creationDate
        self.displayName = displayName
        self.endDate = endDate
        self.entityType = entityType
        self.featureImage = featureImage
        self.identifier = identifier
        self.image = image
        self.isFeatured = isFeatured
        self.items = items
        self.link = link
        self.mp4Video = mp4Video
        self.startDate = startDate
        self.tagline = tagline
        self.webmVideo = webmVideo
        self.weight = weight
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        creationDate = try container.decodeIfPresent("creationDate")
        displayName = try container.decodeIfPresent("displayName")
        endDate = try container.decodeIfPresent("endDate")
        entityType = try container.decodeIfPresent("entityType")
        featureImage = try container.decodeIfPresent("featureImage")
        identifier = try container.decodeIfPresent("identifier")
        image = try container.decodeIfPresent("image")
        isFeatured = try container.decodeIfPresent("isFeatured")
        items = try container.decodeArrayIfPresent("items")
        link = try container.decodeIfPresent("link")
        mp4Video = try container.decodeIfPresent("mp4Video")
        startDate = try container.decodeIfPresent("startDate")
        tagline = try container.decodeIfPresent("tagline")
        webmVideo = try container.decodeIfPresent("webmVideo")
        weight = try container.decodeIfPresent("weight")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(creationDate, forKey: "creationDate")
        try container.encodeIfPresent(displayName, forKey: "displayName")
        try container.encodeIfPresent(endDate, forKey: "endDate")
        try container.encodeIfPresent(entityType, forKey: "entityType")
        try container.encodeIfPresent(featureImage, forKey: "featureImage")
        try container.encodeIfPresent(identifier, forKey: "identifier")
        try container.encodeIfPresent(image, forKey: "image")
        try container.encodeIfPresent(isFeatured, forKey: "isFeatured")
        try container.encodeIfPresent(items, forKey: "items")
        try container.encodeIfPresent(link, forKey: "link")
        try container.encodeIfPresent(mp4Video, forKey: "mp4Video")
        try container.encodeIfPresent(startDate, forKey: "startDate")
        try container.encodeIfPresent(tagline, forKey: "tagline")
        try container.encodeIfPresent(webmVideo, forKey: "webmVideo")
        try container.encodeIfPresent(weight, forKey: "weight")
    }

    public static func == (lhs: TrendingTrendingEntry, rhs: TrendingTrendingEntry) -> Bool {
        guard lhs.creationDate == rhs.creationDate else { return false }
        guard lhs.displayName == rhs.displayName else { return false }
        guard lhs.endDate == rhs.endDate else { return false }
        guard lhs.entityType == rhs.entityType else { return false }
        guard lhs.featureImage == rhs.featureImage else { return false }
        guard lhs.identifier == rhs.identifier else { return false }
        guard lhs.image == rhs.image else { return false }
        guard lhs.isFeatured == rhs.isFeatured else { return false }
        guard lhs.items == rhs.items else { return false }
        guard lhs.link == rhs.link else { return false }
        guard lhs.mp4Video == rhs.mp4Video else { return false }
        guard lhs.startDate == rhs.startDate else { return false }
        guard lhs.tagline == rhs.tagline else { return false }
        guard lhs.webmVideo == rhs.webmVideo else { return false }
        guard lhs.weight == rhs.weight else { return false }
        return true
    }
}

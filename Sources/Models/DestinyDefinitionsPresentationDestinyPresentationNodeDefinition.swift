//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A PresentationNode is an entity that represents a logical grouping of other entities visually/organizationally.
For now, Presentation Nodes may contain the following... but it may be used for more in the future:
- Collectibles - Records (Or, as the public will call them, "Triumphs." Don't ask me why we're overloading the term "Triumph", it still hurts me to think about it) - Other Presentation Nodes, allowing a tree of Presentation Nodes to be created
Part of me wants to break these into conceptual definitions per entity being collected, but the possibility of these different types being mixed in the same UI and the possibility that it could actually be more useful to return the "bare metal" presentation node concept has resulted in me deciding against that for the time being.
We'll see if I come to regret this as well. */
public struct DestinyDefinitionsPresentationDestinyPresentationNodeDefinition: APIModel {

    /** The child entities contained by this presentation node. */
    public var children: [String: Any]?

    /** If this presentation node has an associated "Record" that you can accomplish for completing its children, this is the identifier of that Record. */
    public var completionRecordHash: Int?

    /** If this presentation node has children, but the game doesn't let you inspect the details of those children, that is indicated here. */
    public var disableChildSubscreenNavigation: Bool?

    public var displayProperties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition?

    /** A hint for how to display this presentation node when it's shown in a list. */
    public var displayStyle: Int?

    /** The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to. */
    public var hash: Int?

    /** The index of the entity as it was found in the investment tables. */
    public var index: Int?

    public var nodeType: Int?

    /** If this presentation node shows a related objective (for instance, if it tracks the progress of its children), the objective being tracked is indicated here. */
    public var objectiveHash: Int?

    /** The original icon for this presentation node, before we futzed with it. */
    public var originalIcon: String?

    /** A quick reference to presentation nodes that have this node as a child. (presentation nodes can be parented under multiple parents) */
    public var parentNodeHashes: [Int]?

    /** If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry! */
    public var redacted: Bool?

    /** The requirements for being able to interact with this presentation node and its children. */
    public var requirements: [String: Any]?

    /** Some presentation nodes are meant to be explicitly shown on the "root" or "entry" screens for the feature to which they are related. You should use this icon when showing them on such a view, if you have a similar "entry point" view in your UI. If you don't have a UI, then I guess it doesn't matter either way does it? */
    public var rootViewIcon: String?

    /** Indicates whether this presentation node's state is determined on a per-character or on an account-wide basis. */
    public var scope: Int?

    /** A hint for how to display this presentation node when it's shown in its own detail screen. */
    public var screenStyle: Int?

    public init(children: [String: Any]? = nil, completionRecordHash: Int? = nil, disableChildSubscreenNavigation: Bool? = nil, displayProperties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition? = nil, displayStyle: Int? = nil, hash: Int? = nil, index: Int? = nil, nodeType: Int? = nil, objectiveHash: Int? = nil, originalIcon: String? = nil, parentNodeHashes: [Int]? = nil, redacted: Bool? = nil, requirements: [String: Any]? = nil, rootViewIcon: String? = nil, scope: Int? = nil, screenStyle: Int? = nil) {
        self.children = children
        self.completionRecordHash = completionRecordHash
        self.disableChildSubscreenNavigation = disableChildSubscreenNavigation
        self.displayProperties = displayProperties
        self.displayStyle = displayStyle
        self.hash = hash
        self.index = index
        self.nodeType = nodeType
        self.objectiveHash = objectiveHash
        self.originalIcon = originalIcon
        self.parentNodeHashes = parentNodeHashes
        self.redacted = redacted
        self.requirements = requirements
        self.rootViewIcon = rootViewIcon
        self.scope = scope
        self.screenStyle = screenStyle
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        children = try container.decodeAnyIfPresent("children")
        completionRecordHash = try container.decodeIfPresent("completionRecordHash")
        disableChildSubscreenNavigation = try container.decodeIfPresent("disableChildSubscreenNavigation")
        displayProperties = try container.decodeIfPresent("displayProperties")
        displayStyle = try container.decodeIfPresent("displayStyle")
        hash = try container.decodeIfPresent("hash")
        index = try container.decodeIfPresent("index")
        nodeType = try container.decodeIfPresent("nodeType")
        objectiveHash = try container.decodeIfPresent("objectiveHash")
        originalIcon = try container.decodeIfPresent("originalIcon")
        parentNodeHashes = try container.decodeArrayIfPresent("parentNodeHashes")
        redacted = try container.decodeIfPresent("redacted")
        requirements = try container.decodeAnyIfPresent("requirements")
        rootViewIcon = try container.decodeIfPresent("rootViewIcon")
        scope = try container.decodeIfPresent("scope")
        screenStyle = try container.decodeIfPresent("screenStyle")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeAnyIfPresent(children, forKey: "children")
        try container.encodeIfPresent(completionRecordHash, forKey: "completionRecordHash")
        try container.encodeIfPresent(disableChildSubscreenNavigation, forKey: "disableChildSubscreenNavigation")
        try container.encodeIfPresent(displayProperties, forKey: "displayProperties")
        try container.encodeIfPresent(displayStyle, forKey: "displayStyle")
        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(index, forKey: "index")
        try container.encodeIfPresent(nodeType, forKey: "nodeType")
        try container.encodeIfPresent(objectiveHash, forKey: "objectiveHash")
        try container.encodeIfPresent(originalIcon, forKey: "originalIcon")
        try container.encodeIfPresent(parentNodeHashes, forKey: "parentNodeHashes")
        try container.encodeIfPresent(redacted, forKey: "redacted")
        try container.encodeAnyIfPresent(requirements, forKey: "requirements")
        try container.encodeIfPresent(rootViewIcon, forKey: "rootViewIcon")
        try container.encodeIfPresent(scope, forKey: "scope")
        try container.encodeIfPresent(screenStyle, forKey: "screenStyle")
    }

    public static func == (lhs: DestinyDefinitionsPresentationDestinyPresentationNodeDefinition, rhs: DestinyDefinitionsPresentationDestinyPresentationNodeDefinition) -> Bool {
        guard NSDictionary(dictionary: lhs.children ?? [:]).isEqual(to: rhs.children ?? [:]) else { return false }
        guard lhs.completionRecordHash == rhs.completionRecordHash else { return false }
        guard lhs.disableChildSubscreenNavigation == rhs.disableChildSubscreenNavigation else { return false }
        guard lhs.displayProperties == rhs.displayProperties else { return false }
        guard lhs.displayStyle == rhs.displayStyle else { return false }
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.index == rhs.index else { return false }
        guard lhs.nodeType == rhs.nodeType else { return false }
        guard lhs.objectiveHash == rhs.objectiveHash else { return false }
        guard lhs.originalIcon == rhs.originalIcon else { return false }
        guard lhs.parentNodeHashes == rhs.parentNodeHashes else { return false }
        guard lhs.redacted == rhs.redacted else { return false }
        guard NSDictionary(dictionary: lhs.requirements ?? [:]).isEqual(to: rhs.requirements ?? [:]) else { return false }
        guard lhs.rootViewIcon == rhs.rootViewIcon else { return false }
        guard lhs.scope == rhs.scope else { return false }
        guard lhs.screenStyle == rhs.screenStyle else { return false }
        return true
    }
}

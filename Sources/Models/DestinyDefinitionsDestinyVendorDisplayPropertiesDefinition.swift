//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition: APIModel {

    public var description: String?

    public var hasIcon: Bool?

    /** If this item has a high-res icon (at least for now, many things won't), then the path to that icon will be here. */
    public var highResIcon: String?

    /** Note that "icon" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.
But usually, it will be a small square image that you can use as... well, an icon.
They are currently represented as 96px x 96px images. */
    public var icon: String?

    /** I regret calling this a "large icon". It's more like a medium-sized image with a picture of the vendor's mug on it, trying their best to look cool. Not what one would call an icon. */
    public var largeIcon: String?

    /** This is apparently the "Watermark". I am not certain offhand where this is actually used in the Game UI, but some people may find it useful. */
    public var largeTransparentIcon: String?

    /** This is the icon used in the map overview, when the vendor is located on the map. */
    public var mapIcon: String?

    public var name: String?

    /** If we replaced the icon with something more glitzy, this is the original icon that the vendor had according to the game's content. It may be more lame and/or have less razzle-dazzle. But who am I to tell you which icon to use. */
    public var originalIcon: String?

    /** Vendors, in addition to expected display property data, may also show some "common requirements" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor. */
    public var requirementsDisplay: [DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition]?

    /** This is the icon used in parts of the game UI such as the vendor's waypoint. */
    public var smallTransparentIcon: String?

    public var subtitle: String?

    public init(description: String? = nil, hasIcon: Bool? = nil, highResIcon: String? = nil, icon: String? = nil, largeIcon: String? = nil, largeTransparentIcon: String? = nil, mapIcon: String? = nil, name: String? = nil, originalIcon: String? = nil, requirementsDisplay: [DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition]? = nil, smallTransparentIcon: String? = nil, subtitle: String? = nil) {
        self.description = description
        self.hasIcon = hasIcon
        self.highResIcon = highResIcon
        self.icon = icon
        self.largeIcon = largeIcon
        self.largeTransparentIcon = largeTransparentIcon
        self.mapIcon = mapIcon
        self.name = name
        self.originalIcon = originalIcon
        self.requirementsDisplay = requirementsDisplay
        self.smallTransparentIcon = smallTransparentIcon
        self.subtitle = subtitle
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        description = try container.decodeIfPresent("description")
        hasIcon = try container.decodeIfPresent("hasIcon")
        highResIcon = try container.decodeIfPresent("highResIcon")
        icon = try container.decodeIfPresent("icon")
        largeIcon = try container.decodeIfPresent("largeIcon")
        largeTransparentIcon = try container.decodeIfPresent("largeTransparentIcon")
        mapIcon = try container.decodeIfPresent("mapIcon")
        name = try container.decodeIfPresent("name")
        originalIcon = try container.decodeIfPresent("originalIcon")
        requirementsDisplay = try container.decodeArrayIfPresent("requirementsDisplay")
        smallTransparentIcon = try container.decodeIfPresent("smallTransparentIcon")
        subtitle = try container.decodeIfPresent("subtitle")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(hasIcon, forKey: "hasIcon")
        try container.encodeIfPresent(highResIcon, forKey: "highResIcon")
        try container.encodeIfPresent(icon, forKey: "icon")
        try container.encodeIfPresent(largeIcon, forKey: "largeIcon")
        try container.encodeIfPresent(largeTransparentIcon, forKey: "largeTransparentIcon")
        try container.encodeIfPresent(mapIcon, forKey: "mapIcon")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(originalIcon, forKey: "originalIcon")
        try container.encodeIfPresent(requirementsDisplay, forKey: "requirementsDisplay")
        try container.encodeIfPresent(smallTransparentIcon, forKey: "smallTransparentIcon")
        try container.encodeIfPresent(subtitle, forKey: "subtitle")
    }

    public static func == (lhs: DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition, rhs: DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition) -> Bool {
        guard lhs.description == rhs.description else { return false }
        guard lhs.hasIcon == rhs.hasIcon else { return false }
        guard lhs.highResIcon == rhs.highResIcon else { return false }
        guard lhs.icon == rhs.icon else { return false }
        guard lhs.largeIcon == rhs.largeIcon else { return false }
        guard lhs.largeTransparentIcon == rhs.largeTransparentIcon else { return false }
        guard lhs.mapIcon == rhs.mapIcon else { return false }
        guard lhs.name == rhs.name else { return false }
        guard lhs.originalIcon == rhs.originalIcon else { return false }
        guard lhs.requirementsDisplay == rhs.requirementsDisplay else { return false }
        guard lhs.smallTransparentIcon == rhs.smallTransparentIcon else { return false }
        guard lhs.subtitle == rhs.subtitle else { return false }
        return true
    }
}

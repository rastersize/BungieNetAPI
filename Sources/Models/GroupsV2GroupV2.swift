//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct GroupsV2GroupV2: APIModel {

    public var about: String?

    public var allowChat: Bool?

    public var avatarImageIndex: Int?

    public var avatarPath: String?

    public var banExpireDate: DateTime?

    public var bannerPath: String?

    public var chatSecurity: Int?

    public var clanInfo: GroupsV2GroupV2ClanInfoAndInvestment?

    public var conversationId: Int?

    public var creationDate: DateTime?

    public var defaultPublicity: Int?

    public var enableInvitationMessagingForAdmins: Bool?

    public var features: GroupsV2GroupFeatures?

    public var groupId: Int?

    public var groupType: Int?

    public var homepage: Int?

    public var isDefaultPostPublic: Bool?

    public var isPublic: Bool?

    public var isPublicTopicAdminOnly: Bool?

    public var locale: String?

    public var memberCount: Int?

    public var membershipIdCreated: Int?

    public var membershipOption: Int?

    public var modificationDate: DateTime?

    public var motto: String?

    public var name: String?

    public var tags: [String]?

    public var theme: String?

    public init(about: String? = nil, allowChat: Bool? = nil, avatarImageIndex: Int? = nil, avatarPath: String? = nil, banExpireDate: DateTime? = nil, bannerPath: String? = nil, chatSecurity: Int? = nil, clanInfo: GroupsV2GroupV2ClanInfoAndInvestment? = nil, conversationId: Int? = nil, creationDate: DateTime? = nil, defaultPublicity: Int? = nil, enableInvitationMessagingForAdmins: Bool? = nil, features: GroupsV2GroupFeatures? = nil, groupId: Int? = nil, groupType: Int? = nil, homepage: Int? = nil, isDefaultPostPublic: Bool? = nil, isPublic: Bool? = nil, isPublicTopicAdminOnly: Bool? = nil, locale: String? = nil, memberCount: Int? = nil, membershipIdCreated: Int? = nil, membershipOption: Int? = nil, modificationDate: DateTime? = nil, motto: String? = nil, name: String? = nil, tags: [String]? = nil, theme: String? = nil) {
        self.about = about
        self.allowChat = allowChat
        self.avatarImageIndex = avatarImageIndex
        self.avatarPath = avatarPath
        self.banExpireDate = banExpireDate
        self.bannerPath = bannerPath
        self.chatSecurity = chatSecurity
        self.clanInfo = clanInfo
        self.conversationId = conversationId
        self.creationDate = creationDate
        self.defaultPublicity = defaultPublicity
        self.enableInvitationMessagingForAdmins = enableInvitationMessagingForAdmins
        self.features = features
        self.groupId = groupId
        self.groupType = groupType
        self.homepage = homepage
        self.isDefaultPostPublic = isDefaultPostPublic
        self.isPublic = isPublic
        self.isPublicTopicAdminOnly = isPublicTopicAdminOnly
        self.locale = locale
        self.memberCount = memberCount
        self.membershipIdCreated = membershipIdCreated
        self.membershipOption = membershipOption
        self.modificationDate = modificationDate
        self.motto = motto
        self.name = name
        self.tags = tags
        self.theme = theme
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        about = try container.decodeIfPresent("about")
        allowChat = try container.decodeIfPresent("allowChat")
        avatarImageIndex = try container.decodeIfPresent("avatarImageIndex")
        avatarPath = try container.decodeIfPresent("avatarPath")
        banExpireDate = try container.decodeIfPresent("banExpireDate")
        bannerPath = try container.decodeIfPresent("bannerPath")
        chatSecurity = try container.decodeIfPresent("chatSecurity")
        clanInfo = try container.decodeIfPresent("clanInfo")
        conversationId = try container.decodeIfPresent("conversationId")
        creationDate = try container.decodeIfPresent("creationDate")
        defaultPublicity = try container.decodeIfPresent("defaultPublicity")
        enableInvitationMessagingForAdmins = try container.decodeIfPresent("enableInvitationMessagingForAdmins")
        features = try container.decodeIfPresent("features")
        groupId = try container.decodeIfPresent("groupId")
        groupType = try container.decodeIfPresent("groupType")
        homepage = try container.decodeIfPresent("homepage")
        isDefaultPostPublic = try container.decodeIfPresent("isDefaultPostPublic")
        isPublic = try container.decodeIfPresent("isPublic")
        isPublicTopicAdminOnly = try container.decodeIfPresent("isPublicTopicAdminOnly")
        locale = try container.decodeIfPresent("locale")
        memberCount = try container.decodeIfPresent("memberCount")
        membershipIdCreated = try container.decodeIfPresent("membershipIdCreated")
        membershipOption = try container.decodeIfPresent("membershipOption")
        modificationDate = try container.decodeIfPresent("modificationDate")
        motto = try container.decodeIfPresent("motto")
        name = try container.decodeIfPresent("name")
        tags = try container.decodeArrayIfPresent("tags")
        theme = try container.decodeIfPresent("theme")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(about, forKey: "about")
        try container.encodeIfPresent(allowChat, forKey: "allowChat")
        try container.encodeIfPresent(avatarImageIndex, forKey: "avatarImageIndex")
        try container.encodeIfPresent(avatarPath, forKey: "avatarPath")
        try container.encodeIfPresent(banExpireDate, forKey: "banExpireDate")
        try container.encodeIfPresent(bannerPath, forKey: "bannerPath")
        try container.encodeIfPresent(chatSecurity, forKey: "chatSecurity")
        try container.encodeIfPresent(clanInfo, forKey: "clanInfo")
        try container.encodeIfPresent(conversationId, forKey: "conversationId")
        try container.encodeIfPresent(creationDate, forKey: "creationDate")
        try container.encodeIfPresent(defaultPublicity, forKey: "defaultPublicity")
        try container.encodeIfPresent(enableInvitationMessagingForAdmins, forKey: "enableInvitationMessagingForAdmins")
        try container.encodeIfPresent(features, forKey: "features")
        try container.encodeIfPresent(groupId, forKey: "groupId")
        try container.encodeIfPresent(groupType, forKey: "groupType")
        try container.encodeIfPresent(homepage, forKey: "homepage")
        try container.encodeIfPresent(isDefaultPostPublic, forKey: "isDefaultPostPublic")
        try container.encodeIfPresent(isPublic, forKey: "isPublic")
        try container.encodeIfPresent(isPublicTopicAdminOnly, forKey: "isPublicTopicAdminOnly")
        try container.encodeIfPresent(locale, forKey: "locale")
        try container.encodeIfPresent(memberCount, forKey: "memberCount")
        try container.encodeIfPresent(membershipIdCreated, forKey: "membershipIdCreated")
        try container.encodeIfPresent(membershipOption, forKey: "membershipOption")
        try container.encodeIfPresent(modificationDate, forKey: "modificationDate")
        try container.encodeIfPresent(motto, forKey: "motto")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(tags, forKey: "tags")
        try container.encodeIfPresent(theme, forKey: "theme")
    }

    public static func == (lhs: GroupsV2GroupV2, rhs: GroupsV2GroupV2) -> Bool {
        guard lhs.about == rhs.about else { return false }
        guard lhs.allowChat == rhs.allowChat else { return false }
        guard lhs.avatarImageIndex == rhs.avatarImageIndex else { return false }
        guard lhs.avatarPath == rhs.avatarPath else { return false }
        guard lhs.banExpireDate == rhs.banExpireDate else { return false }
        guard lhs.bannerPath == rhs.bannerPath else { return false }
        guard lhs.chatSecurity == rhs.chatSecurity else { return false }
        guard lhs.clanInfo == rhs.clanInfo else { return false }
        guard lhs.conversationId == rhs.conversationId else { return false }
        guard lhs.creationDate == rhs.creationDate else { return false }
        guard lhs.defaultPublicity == rhs.defaultPublicity else { return false }
        guard lhs.enableInvitationMessagingForAdmins == rhs.enableInvitationMessagingForAdmins else { return false }
        guard lhs.features == rhs.features else { return false }
        guard lhs.groupId == rhs.groupId else { return false }
        guard lhs.groupType == rhs.groupType else { return false }
        guard lhs.homepage == rhs.homepage else { return false }
        guard lhs.isDefaultPostPublic == rhs.isDefaultPostPublic else { return false }
        guard lhs.isPublic == rhs.isPublic else { return false }
        guard lhs.isPublicTopicAdminOnly == rhs.isPublicTopicAdminOnly else { return false }
        guard lhs.locale == rhs.locale else { return false }
        guard lhs.memberCount == rhs.memberCount else { return false }
        guard lhs.membershipIdCreated == rhs.membershipIdCreated else { return false }
        guard lhs.membershipOption == rhs.membershipOption else { return false }
        guard lhs.modificationDate == rhs.modificationDate else { return false }
        guard lhs.motto == rhs.motto else { return false }
        guard lhs.name == rhs.name else { return false }
        guard lhs.tags == rhs.tags else { return false }
        guard lhs.theme == rhs.theme else { return false }
        return true
    }
}

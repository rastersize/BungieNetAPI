//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinyHistoricalStatsDestinyHistoricalStatsValue: APIModel {

    /** When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property. */
    public var activityId: Int?

    /** Basic stat value. */
    public var basic: [String: Any]?

    /** Per game average for the statistic, if applicable */
    public var pga: [String: Any]?

    /** Unique ID for this stat */
    public var statId: String?

    /** Weighted value of the stat if a weight greater than 1 has been assigned. */
    public var weighted: [String: Any]?

    public init(activityId: Int? = nil, basic: [String: Any]? = nil, pga: [String: Any]? = nil, statId: String? = nil, weighted: [String: Any]? = nil) {
        self.activityId = activityId
        self.basic = basic
        self.pga = pga
        self.statId = statId
        self.weighted = weighted
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        activityId = try container.decodeIfPresent("activityId")
        basic = try container.decodeAnyIfPresent("basic")
        pga = try container.decodeAnyIfPresent("pga")
        statId = try container.decodeIfPresent("statId")
        weighted = try container.decodeAnyIfPresent("weighted")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(activityId, forKey: "activityId")
        try container.encodeAnyIfPresent(basic, forKey: "basic")
        try container.encodeAnyIfPresent(pga, forKey: "pga")
        try container.encodeIfPresent(statId, forKey: "statId")
        try container.encodeAnyIfPresent(weighted, forKey: "weighted")
    }

    public static func == (lhs: DestinyHistoricalStatsDestinyHistoricalStatsValue, rhs: DestinyHistoricalStatsDestinyHistoricalStatsValue) -> Bool {
        guard lhs.activityId == rhs.activityId else { return false }
        guard NSDictionary(dictionary: lhs.basic ?? [:]).isEqual(to: rhs.basic ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.pga ?? [:]).isEqual(to: rhs.pga ?? [:]) else { return false }
        guard lhs.statId == rhs.statId else { return false }
        guard NSDictionary(dictionary: lhs.weighted ?? [:]).isEqual(to: rhs.weighted ?? [:]) else { return false }
        return true
    }
}

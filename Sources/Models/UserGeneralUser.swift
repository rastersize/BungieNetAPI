//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct UserGeneralUser: APIModel {

    public var about: String?

    public var blizzardDisplayName: String?

    public var context: UserUserToUserContext?

    public var displayName: String?

    public var fbDisplayName: String?

    public var firstAccess: DateTime?

    public var isDeleted: Bool?

    public var lastBanReportId: Int?

    public var lastUpdate: DateTime?

    public var legacyPortalUID: Int?

    public var locale: String?

    public var localeInheritDefault: Bool?

    public var membershipId: Int?

    public var normalizedName: String?

    public var profileBanExpire: DateTime?

    public var profilePicture: Int?

    public var profilePicturePath: String?

    public var profilePictureWidePath: String?

    public var profileTheme: Int?

    public var profileThemeName: String?

    public var psnDisplayName: String?

    public var showActivity: Bool?

    public var showGroupMessaging: Bool?

    public var stadiaDisplayName: String?

    public var statusDate: DateTime?

    public var statusText: String?

    public var steamDisplayName: String?

    public var successMessageFlags: Int?

    public var uniqueName: String?

    public var userTitle: Int?

    public var userTitleDisplay: String?

    public var xboxDisplayName: String?

    public init(about: String? = nil, blizzardDisplayName: String? = nil, context: UserUserToUserContext? = nil, displayName: String? = nil, fbDisplayName: String? = nil, firstAccess: DateTime? = nil, isDeleted: Bool? = nil, lastBanReportId: Int? = nil, lastUpdate: DateTime? = nil, legacyPortalUID: Int? = nil, locale: String? = nil, localeInheritDefault: Bool? = nil, membershipId: Int? = nil, normalizedName: String? = nil, profileBanExpire: DateTime? = nil, profilePicture: Int? = nil, profilePicturePath: String? = nil, profilePictureWidePath: String? = nil, profileTheme: Int? = nil, profileThemeName: String? = nil, psnDisplayName: String? = nil, showActivity: Bool? = nil, showGroupMessaging: Bool? = nil, stadiaDisplayName: String? = nil, statusDate: DateTime? = nil, statusText: String? = nil, steamDisplayName: String? = nil, successMessageFlags: Int? = nil, uniqueName: String? = nil, userTitle: Int? = nil, userTitleDisplay: String? = nil, xboxDisplayName: String? = nil) {
        self.about = about
        self.blizzardDisplayName = blizzardDisplayName
        self.context = context
        self.displayName = displayName
        self.fbDisplayName = fbDisplayName
        self.firstAccess = firstAccess
        self.isDeleted = isDeleted
        self.lastBanReportId = lastBanReportId
        self.lastUpdate = lastUpdate
        self.legacyPortalUID = legacyPortalUID
        self.locale = locale
        self.localeInheritDefault = localeInheritDefault
        self.membershipId = membershipId
        self.normalizedName = normalizedName
        self.profileBanExpire = profileBanExpire
        self.profilePicture = profilePicture
        self.profilePicturePath = profilePicturePath
        self.profilePictureWidePath = profilePictureWidePath
        self.profileTheme = profileTheme
        self.profileThemeName = profileThemeName
        self.psnDisplayName = psnDisplayName
        self.showActivity = showActivity
        self.showGroupMessaging = showGroupMessaging
        self.stadiaDisplayName = stadiaDisplayName
        self.statusDate = statusDate
        self.statusText = statusText
        self.steamDisplayName = steamDisplayName
        self.successMessageFlags = successMessageFlags
        self.uniqueName = uniqueName
        self.userTitle = userTitle
        self.userTitleDisplay = userTitleDisplay
        self.xboxDisplayName = xboxDisplayName
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        about = try container.decodeIfPresent("about")
        blizzardDisplayName = try container.decodeIfPresent("blizzardDisplayName")
        context = try container.decodeIfPresent("context")
        displayName = try container.decodeIfPresent("displayName")
        fbDisplayName = try container.decodeIfPresent("fbDisplayName")
        firstAccess = try container.decodeIfPresent("firstAccess")
        isDeleted = try container.decodeIfPresent("isDeleted")
        lastBanReportId = try container.decodeIfPresent("lastBanReportId")
        lastUpdate = try container.decodeIfPresent("lastUpdate")
        legacyPortalUID = try container.decodeIfPresent("legacyPortalUID")
        locale = try container.decodeIfPresent("locale")
        localeInheritDefault = try container.decodeIfPresent("localeInheritDefault")
        membershipId = try container.decodeIfPresent("membershipId")
        normalizedName = try container.decodeIfPresent("normalizedName")
        profileBanExpire = try container.decodeIfPresent("profileBanExpire")
        profilePicture = try container.decodeIfPresent("profilePicture")
        profilePicturePath = try container.decodeIfPresent("profilePicturePath")
        profilePictureWidePath = try container.decodeIfPresent("profilePictureWidePath")
        profileTheme = try container.decodeIfPresent("profileTheme")
        profileThemeName = try container.decodeIfPresent("profileThemeName")
        psnDisplayName = try container.decodeIfPresent("psnDisplayName")
        showActivity = try container.decodeIfPresent("showActivity")
        showGroupMessaging = try container.decodeIfPresent("showGroupMessaging")
        stadiaDisplayName = try container.decodeIfPresent("stadiaDisplayName")
        statusDate = try container.decodeIfPresent("statusDate")
        statusText = try container.decodeIfPresent("statusText")
        steamDisplayName = try container.decodeIfPresent("steamDisplayName")
        successMessageFlags = try container.decodeIfPresent("successMessageFlags")
        uniqueName = try container.decodeIfPresent("uniqueName")
        userTitle = try container.decodeIfPresent("userTitle")
        userTitleDisplay = try container.decodeIfPresent("userTitleDisplay")
        xboxDisplayName = try container.decodeIfPresent("xboxDisplayName")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(about, forKey: "about")
        try container.encodeIfPresent(blizzardDisplayName, forKey: "blizzardDisplayName")
        try container.encodeIfPresent(context, forKey: "context")
        try container.encodeIfPresent(displayName, forKey: "displayName")
        try container.encodeIfPresent(fbDisplayName, forKey: "fbDisplayName")
        try container.encodeIfPresent(firstAccess, forKey: "firstAccess")
        try container.encodeIfPresent(isDeleted, forKey: "isDeleted")
        try container.encodeIfPresent(lastBanReportId, forKey: "lastBanReportId")
        try container.encodeIfPresent(lastUpdate, forKey: "lastUpdate")
        try container.encodeIfPresent(legacyPortalUID, forKey: "legacyPortalUID")
        try container.encodeIfPresent(locale, forKey: "locale")
        try container.encodeIfPresent(localeInheritDefault, forKey: "localeInheritDefault")
        try container.encodeIfPresent(membershipId, forKey: "membershipId")
        try container.encodeIfPresent(normalizedName, forKey: "normalizedName")
        try container.encodeIfPresent(profileBanExpire, forKey: "profileBanExpire")
        try container.encodeIfPresent(profilePicture, forKey: "profilePicture")
        try container.encodeIfPresent(profilePicturePath, forKey: "profilePicturePath")
        try container.encodeIfPresent(profilePictureWidePath, forKey: "profilePictureWidePath")
        try container.encodeIfPresent(profileTheme, forKey: "profileTheme")
        try container.encodeIfPresent(profileThemeName, forKey: "profileThemeName")
        try container.encodeIfPresent(psnDisplayName, forKey: "psnDisplayName")
        try container.encodeIfPresent(showActivity, forKey: "showActivity")
        try container.encodeIfPresent(showGroupMessaging, forKey: "showGroupMessaging")
        try container.encodeIfPresent(stadiaDisplayName, forKey: "stadiaDisplayName")
        try container.encodeIfPresent(statusDate, forKey: "statusDate")
        try container.encodeIfPresent(statusText, forKey: "statusText")
        try container.encodeIfPresent(steamDisplayName, forKey: "steamDisplayName")
        try container.encodeIfPresent(successMessageFlags, forKey: "successMessageFlags")
        try container.encodeIfPresent(uniqueName, forKey: "uniqueName")
        try container.encodeIfPresent(userTitle, forKey: "userTitle")
        try container.encodeIfPresent(userTitleDisplay, forKey: "userTitleDisplay")
        try container.encodeIfPresent(xboxDisplayName, forKey: "xboxDisplayName")
    }

    public static func == (lhs: UserGeneralUser, rhs: UserGeneralUser) -> Bool {
        guard lhs.about == rhs.about else { return false }
        guard lhs.blizzardDisplayName == rhs.blizzardDisplayName else { return false }
        guard lhs.context == rhs.context else { return false }
        guard lhs.displayName == rhs.displayName else { return false }
        guard lhs.fbDisplayName == rhs.fbDisplayName else { return false }
        guard lhs.firstAccess == rhs.firstAccess else { return false }
        guard lhs.isDeleted == rhs.isDeleted else { return false }
        guard lhs.lastBanReportId == rhs.lastBanReportId else { return false }
        guard lhs.lastUpdate == rhs.lastUpdate else { return false }
        guard lhs.legacyPortalUID == rhs.legacyPortalUID else { return false }
        guard lhs.locale == rhs.locale else { return false }
        guard lhs.localeInheritDefault == rhs.localeInheritDefault else { return false }
        guard lhs.membershipId == rhs.membershipId else { return false }
        guard lhs.normalizedName == rhs.normalizedName else { return false }
        guard lhs.profileBanExpire == rhs.profileBanExpire else { return false }
        guard lhs.profilePicture == rhs.profilePicture else { return false }
        guard lhs.profilePicturePath == rhs.profilePicturePath else { return false }
        guard lhs.profilePictureWidePath == rhs.profilePictureWidePath else { return false }
        guard lhs.profileTheme == rhs.profileTheme else { return false }
        guard lhs.profileThemeName == rhs.profileThemeName else { return false }
        guard lhs.psnDisplayName == rhs.psnDisplayName else { return false }
        guard lhs.showActivity == rhs.showActivity else { return false }
        guard lhs.showGroupMessaging == rhs.showGroupMessaging else { return false }
        guard lhs.stadiaDisplayName == rhs.stadiaDisplayName else { return false }
        guard lhs.statusDate == rhs.statusDate else { return false }
        guard lhs.statusText == rhs.statusText else { return false }
        guard lhs.steamDisplayName == rhs.steamDisplayName else { return false }
        guard lhs.successMessageFlags == rhs.successMessageFlags else { return false }
        guard lhs.uniqueName == rhs.uniqueName else { return false }
        guard lhs.userTitle == rhs.userTitle else { return false }
        guard lhs.userTitleDisplay == rhs.userTitleDisplay else { return false }
        guard lhs.xboxDisplayName == rhs.xboxDisplayName else { return false }
        return true
    }
}

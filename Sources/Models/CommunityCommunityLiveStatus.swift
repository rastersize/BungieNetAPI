//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct CommunityCommunityLiveStatus: APIModel {

    public var activityModeHash: Int?

    public var currentActivityHash: Int?

    public var currentViewers: Int?

    public var dateFeatured: DateTime?

    public var dateLastPlayed: DateTime?

    public var dateStatusUpdated: DateTime?

    public var dateStreamStarted: DateTime?

    public var destinyCharacterId: Int?

    public var followers: Int?

    public var isFeatured: Bool?

    public var isSubscribable: Bool?

    public var locale: String?

    public var overallViewers: Int?

    public var partnershipIdentifier: String?

    public var partnershipType: Int?

    public var thumbnail: String?

    public var thumbnailLarge: String?

    public var thumbnailSmall: String?

    public var title: String?

    public var trendingValue: Float?

    public var url: String?

    public var userInfo: UserUserInfoCard?

    public init(activityModeHash: Int? = nil, currentActivityHash: Int? = nil, currentViewers: Int? = nil, dateFeatured: DateTime? = nil, dateLastPlayed: DateTime? = nil, dateStatusUpdated: DateTime? = nil, dateStreamStarted: DateTime? = nil, destinyCharacterId: Int? = nil, followers: Int? = nil, isFeatured: Bool? = nil, isSubscribable: Bool? = nil, locale: String? = nil, overallViewers: Int? = nil, partnershipIdentifier: String? = nil, partnershipType: Int? = nil, thumbnail: String? = nil, thumbnailLarge: String? = nil, thumbnailSmall: String? = nil, title: String? = nil, trendingValue: Float? = nil, url: String? = nil, userInfo: UserUserInfoCard? = nil) {
        self.activityModeHash = activityModeHash
        self.currentActivityHash = currentActivityHash
        self.currentViewers = currentViewers
        self.dateFeatured = dateFeatured
        self.dateLastPlayed = dateLastPlayed
        self.dateStatusUpdated = dateStatusUpdated
        self.dateStreamStarted = dateStreamStarted
        self.destinyCharacterId = destinyCharacterId
        self.followers = followers
        self.isFeatured = isFeatured
        self.isSubscribable = isSubscribable
        self.locale = locale
        self.overallViewers = overallViewers
        self.partnershipIdentifier = partnershipIdentifier
        self.partnershipType = partnershipType
        self.thumbnail = thumbnail
        self.thumbnailLarge = thumbnailLarge
        self.thumbnailSmall = thumbnailSmall
        self.title = title
        self.trendingValue = trendingValue
        self.url = url
        self.userInfo = userInfo
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        activityModeHash = try container.decodeIfPresent("activityModeHash")
        currentActivityHash = try container.decodeIfPresent("currentActivityHash")
        currentViewers = try container.decodeIfPresent("currentViewers")
        dateFeatured = try container.decodeIfPresent("dateFeatured")
        dateLastPlayed = try container.decodeIfPresent("dateLastPlayed")
        dateStatusUpdated = try container.decodeIfPresent("dateStatusUpdated")
        dateStreamStarted = try container.decodeIfPresent("dateStreamStarted")
        destinyCharacterId = try container.decodeIfPresent("destinyCharacterId")
        followers = try container.decodeIfPresent("followers")
        isFeatured = try container.decodeIfPresent("isFeatured")
        isSubscribable = try container.decodeIfPresent("isSubscribable")
        locale = try container.decodeIfPresent("locale")
        overallViewers = try container.decodeIfPresent("overallViewers")
        partnershipIdentifier = try container.decodeIfPresent("partnershipIdentifier")
        partnershipType = try container.decodeIfPresent("partnershipType")
        thumbnail = try container.decodeIfPresent("thumbnail")
        thumbnailLarge = try container.decodeIfPresent("thumbnailLarge")
        thumbnailSmall = try container.decodeIfPresent("thumbnailSmall")
        title = try container.decodeIfPresent("title")
        trendingValue = try container.decodeIfPresent("trendingValue")
        url = try container.decodeIfPresent("url")
        userInfo = try container.decodeIfPresent("userInfo")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(activityModeHash, forKey: "activityModeHash")
        try container.encodeIfPresent(currentActivityHash, forKey: "currentActivityHash")
        try container.encodeIfPresent(currentViewers, forKey: "currentViewers")
        try container.encodeIfPresent(dateFeatured, forKey: "dateFeatured")
        try container.encodeIfPresent(dateLastPlayed, forKey: "dateLastPlayed")
        try container.encodeIfPresent(dateStatusUpdated, forKey: "dateStatusUpdated")
        try container.encodeIfPresent(dateStreamStarted, forKey: "dateStreamStarted")
        try container.encodeIfPresent(destinyCharacterId, forKey: "destinyCharacterId")
        try container.encodeIfPresent(followers, forKey: "followers")
        try container.encodeIfPresent(isFeatured, forKey: "isFeatured")
        try container.encodeIfPresent(isSubscribable, forKey: "isSubscribable")
        try container.encodeIfPresent(locale, forKey: "locale")
        try container.encodeIfPresent(overallViewers, forKey: "overallViewers")
        try container.encodeIfPresent(partnershipIdentifier, forKey: "partnershipIdentifier")
        try container.encodeIfPresent(partnershipType, forKey: "partnershipType")
        try container.encodeIfPresent(thumbnail, forKey: "thumbnail")
        try container.encodeIfPresent(thumbnailLarge, forKey: "thumbnailLarge")
        try container.encodeIfPresent(thumbnailSmall, forKey: "thumbnailSmall")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(trendingValue, forKey: "trendingValue")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(userInfo, forKey: "userInfo")
    }

    public static func == (lhs: CommunityCommunityLiveStatus, rhs: CommunityCommunityLiveStatus) -> Bool {
        guard lhs.activityModeHash == rhs.activityModeHash else { return false }
        guard lhs.currentActivityHash == rhs.currentActivityHash else { return false }
        guard lhs.currentViewers == rhs.currentViewers else { return false }
        guard lhs.dateFeatured == rhs.dateFeatured else { return false }
        guard lhs.dateLastPlayed == rhs.dateLastPlayed else { return false }
        guard lhs.dateStatusUpdated == rhs.dateStatusUpdated else { return false }
        guard lhs.dateStreamStarted == rhs.dateStreamStarted else { return false }
        guard lhs.destinyCharacterId == rhs.destinyCharacterId else { return false }
        guard lhs.followers == rhs.followers else { return false }
        guard lhs.isFeatured == rhs.isFeatured else { return false }
        guard lhs.isSubscribable == rhs.isSubscribable else { return false }
        guard lhs.locale == rhs.locale else { return false }
        guard lhs.overallViewers == rhs.overallViewers else { return false }
        guard lhs.partnershipIdentifier == rhs.partnershipIdentifier else { return false }
        guard lhs.partnershipType == rhs.partnershipType else { return false }
        guard lhs.thumbnail == rhs.thumbnail else { return false }
        guard lhs.thumbnailLarge == rhs.thumbnailLarge else { return false }
        guard lhs.thumbnailSmall == rhs.thumbnailSmall else { return false }
        guard lhs.title == rhs.title else { return false }
        guard lhs.trendingValue == rhs.trendingValue else { return false }
        guard lhs.url == rhs.url else { return false }
        guard lhs.userInfo == rhs.userInfo else { return false }
        return true
    }
}

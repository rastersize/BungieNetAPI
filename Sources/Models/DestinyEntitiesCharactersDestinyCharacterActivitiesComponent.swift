//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** This component holds activity data for a character. It will tell you about the character's current activity status, as well as activities that are available to the user. */
public struct DestinyEntitiesCharactersDestinyCharacterActivitiesComponent: APIModel {

    /** And the current activity's most specific mode type, if it can be found. */
    public enum CurrentActivityModeType: Int, Codable, Equatable, CaseIterable {
        case _0 = 0
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
        case _7 = 7
        case _9 = 9
        case _10 = 10
        case _11 = 11
        case _12 = 12
        case _13 = 13
        case _15 = 15
        case _16 = 16
        case _17 = 17
        case _18 = 18
        case _19 = 19
        case _20 = 20
        case _21 = 21
        case _22 = 22
        case _24 = 24
        case _25 = 25
        case _26 = 26
        case _27 = 27
        case _28 = 28
        case _29 = 29
        case _30 = 30
        case _31 = 31
        case _32 = 32
        case _37 = 37
        case _38 = 38
        case _39 = 39
        case _40 = 40
        case _41 = 41
        case _42 = 42
        case _43 = 43
        case _44 = 44
        case _45 = 45
        case _46 = 46
        case _47 = 47
        case _48 = 48
        case _49 = 49
        case _50 = 50
        case _51 = 51
        case _52 = 52
        case _53 = 53
        case _54 = 54
        case _55 = 55
        case _56 = 56
        case _57 = 57
        case _58 = 58
        case _59 = 59
        case _60 = 60
        case _61 = 61
        case _62 = 62
        case _63 = 63
        case _64 = 64
        case _65 = 65
        case _66 = 66
        case _67 = 67
        case _68 = 68
        case _69 = 69
        case _70 = 70
        case _71 = 71
        case _72 = 72
        case _73 = 73
        case _74 = 74
        case _75 = 75
        case _76 = 76
        case _77 = 77
        case _78 = 78
        case _79 = 79
        case _80 = 80
        case _81 = 81
    }

    /** The list of activities that the user can play. */
    public var availableActivities: [DestinyDestinyActivity]?

    /** If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP "Activities" are just maps: it's the ActivityMode that determines what type of PVP game they're playing. */
    public var currentActivityHash: Int?

    /** If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now. */
    public var currentActivityModeHash: Int?

    /** If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now. */
    public var currentActivityModeHashes: [Int]?

    /** And the current activity's most specific mode type, if it can be found. */
    public var currentActivityModeType: CurrentActivityModeType?

    /** All Activity Modes that apply to the current activity being played, in enum form. */
    public var currentActivityModeTypes: [Int]?

    /** If the user is in a playlist, this is the hash identifier for the playlist that they chose. */
    public var currentPlaylistActivityHash: Int?

    /** The last date that the user started playing an activity. */
    public var dateActivityStarted: DateTime?

    /** This will have the activity hash of the last completed story/campaign mission, in case you care about that. */
    public var lastCompletedStoryHash: Int?

    public init(availableActivities: [DestinyDestinyActivity]? = nil, currentActivityHash: Int? = nil, currentActivityModeHash: Int? = nil, currentActivityModeHashes: [Int]? = nil, currentActivityModeType: CurrentActivityModeType? = nil, currentActivityModeTypes: [Int]? = nil, currentPlaylistActivityHash: Int? = nil, dateActivityStarted: DateTime? = nil, lastCompletedStoryHash: Int? = nil) {
        self.availableActivities = availableActivities
        self.currentActivityHash = currentActivityHash
        self.currentActivityModeHash = currentActivityModeHash
        self.currentActivityModeHashes = currentActivityModeHashes
        self.currentActivityModeType = currentActivityModeType
        self.currentActivityModeTypes = currentActivityModeTypes
        self.currentPlaylistActivityHash = currentPlaylistActivityHash
        self.dateActivityStarted = dateActivityStarted
        self.lastCompletedStoryHash = lastCompletedStoryHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        availableActivities = try container.decodeArrayIfPresent("availableActivities")
        currentActivityHash = try container.decodeIfPresent("currentActivityHash")
        currentActivityModeHash = try container.decodeIfPresent("currentActivityModeHash")
        currentActivityModeHashes = try container.decodeArrayIfPresent("currentActivityModeHashes")
        currentActivityModeType = try container.decodeIfPresent("currentActivityModeType")
        currentActivityModeTypes = try container.decodeArrayIfPresent("currentActivityModeTypes")
        currentPlaylistActivityHash = try container.decodeIfPresent("currentPlaylistActivityHash")
        dateActivityStarted = try container.decodeIfPresent("dateActivityStarted")
        lastCompletedStoryHash = try container.decodeIfPresent("lastCompletedStoryHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(availableActivities, forKey: "availableActivities")
        try container.encodeIfPresent(currentActivityHash, forKey: "currentActivityHash")
        try container.encodeIfPresent(currentActivityModeHash, forKey: "currentActivityModeHash")
        try container.encodeIfPresent(currentActivityModeHashes, forKey: "currentActivityModeHashes")
        try container.encodeIfPresent(currentActivityModeType, forKey: "currentActivityModeType")
        try container.encodeIfPresent(currentActivityModeTypes, forKey: "currentActivityModeTypes")
        try container.encodeIfPresent(currentPlaylistActivityHash, forKey: "currentPlaylistActivityHash")
        try container.encodeIfPresent(dateActivityStarted, forKey: "dateActivityStarted")
        try container.encodeIfPresent(lastCompletedStoryHash, forKey: "lastCompletedStoryHash")
    }

    public static func == (lhs: DestinyEntitiesCharactersDestinyCharacterActivitiesComponent, rhs: DestinyEntitiesCharactersDestinyCharacterActivitiesComponent) -> Bool {
        guard lhs.availableActivities == rhs.availableActivities else { return false }
        guard lhs.currentActivityHash == rhs.currentActivityHash else { return false }
        guard lhs.currentActivityModeHash == rhs.currentActivityModeHash else { return false }
        guard lhs.currentActivityModeHashes == rhs.currentActivityModeHashes else { return false }
        guard lhs.currentActivityModeType == rhs.currentActivityModeType else { return false }
        guard lhs.currentActivityModeTypes == rhs.currentActivityModeTypes else { return false }
        guard lhs.currentPlaylistActivityHash == rhs.currentPlaylistActivityHash else { return false }
        guard lhs.dateActivityStarted == rhs.dateActivityStarted else { return false }
        guard lhs.lastCompletedStoryHash == rhs.lastCompletedStoryHash else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinyComponentsRecordsDestinyRecordComponent: APIModel {

    public var intervalObjectives: [DestinyQuestsDestinyObjectiveProgress]?

    public var intervalsRedeemedCount: Int?

    public var objectives: [DestinyQuestsDestinyObjectiveProgress]?

    public var state: Int?

    public init(intervalObjectives: [DestinyQuestsDestinyObjectiveProgress]? = nil, intervalsRedeemedCount: Int? = nil, objectives: [DestinyQuestsDestinyObjectiveProgress]? = nil, state: Int? = nil) {
        self.intervalObjectives = intervalObjectives
        self.intervalsRedeemedCount = intervalsRedeemedCount
        self.objectives = objectives
        self.state = state
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        intervalObjectives = try container.decodeArrayIfPresent("intervalObjectives")
        intervalsRedeemedCount = try container.decodeIfPresent("intervalsRedeemedCount")
        objectives = try container.decodeArrayIfPresent("objectives")
        state = try container.decodeIfPresent("state")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(intervalObjectives, forKey: "intervalObjectives")
        try container.encodeIfPresent(intervalsRedeemedCount, forKey: "intervalsRedeemedCount")
        try container.encodeIfPresent(objectives, forKey: "objectives")
        try container.encodeIfPresent(state, forKey: "state")
    }

    public static func == (lhs: DestinyComponentsRecordsDestinyRecordComponent, rhs: DestinyComponentsRecordsDestinyRecordComponent) -> Bool {
        guard lhs.intervalObjectives == rhs.intervalObjectives else { return false }
        guard lhs.intervalsRedeemedCount == rhs.intervalsRedeemedCount else { return false }
        guard lhs.objectives == rhs.objectives else { return false }
        guard lhs.state == rhs.state else { return false }
        return true
    }
}

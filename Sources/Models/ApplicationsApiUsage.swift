//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ApplicationsApiUsage: APIModel {

    /** Counts for on API calls made for the time range. */
    public var apiCalls: [ApplicationsSeries]?

    /** The date range for the data being reported. */
    public var range: [String: Any]?

    /** Instances of blocked requests or requests that crossed the warn threshold during the time range. */
    public var throttledRequests: [ApplicationsSeries]?

    public init(apiCalls: [ApplicationsSeries]? = nil, range: [String: Any]? = nil, throttledRequests: [ApplicationsSeries]? = nil) {
        self.apiCalls = apiCalls
        self.range = range
        self.throttledRequests = throttledRequests
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        apiCalls = try container.decodeArrayIfPresent("apiCalls")
        range = try container.decodeAnyIfPresent("range")
        throttledRequests = try container.decodeArrayIfPresent("throttledRequests")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(apiCalls, forKey: "apiCalls")
        try container.encodeAnyIfPresent(range, forKey: "range")
        try container.encodeIfPresent(throttledRequests, forKey: "throttledRequests")
    }

    public static func == (lhs: ApplicationsApiUsage, rhs: ApplicationsApiUsage) -> Bool {
        guard lhs.apiCalls == rhs.apiCalls else { return false }
        guard NSDictionary(dictionary: lhs.range ?? [:]).isEqual(to: rhs.range ?? [:]) else { return false }
        guard lhs.throttledRequests == rhs.throttledRequests else { return false }
        return true
    }
}

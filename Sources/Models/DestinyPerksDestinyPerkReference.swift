//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The list of perks to display in an item tooltip - and whether or not they have been activated.
Perks apply a variety of effects to a character, and are generally either intrinsic to the item or provided in activated talent nodes or sockets. */
public struct DestinyPerksDestinyPerkReference: APIModel {

    /** The icon for the perk. */
    public var iconPath: String?

    /** Whether this perk is currently active. (We may return perks that you have not actually activated yet: these represent perks that you should show in the item's tooltip, but that the user has not yet activated.) */
    public var isActive: Bool?

    /** The hash identifier for the perk, which can be used to look up DestinySandboxPerkDefinition if it exists. Be warned, perks frequently do not have user-viewable information. You should examine whether you actually found a name/description in the perk's definition before you show it to the user. */
    public var perkHash: Int?

    /** Some perks provide benefits, but aren't visible in the UI. This value will let you know if this is perk should be shown in your UI. */
    public var visible: Bool?

    public init(iconPath: String? = nil, isActive: Bool? = nil, perkHash: Int? = nil, visible: Bool? = nil) {
        self.iconPath = iconPath
        self.isActive = isActive
        self.perkHash = perkHash
        self.visible = visible
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        iconPath = try container.decodeIfPresent("iconPath")
        isActive = try container.decodeIfPresent("isActive")
        perkHash = try container.decodeIfPresent("perkHash")
        visible = try container.decodeIfPresent("visible")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(iconPath, forKey: "iconPath")
        try container.encodeIfPresent(isActive, forKey: "isActive")
        try container.encodeIfPresent(perkHash, forKey: "perkHash")
        try container.encodeIfPresent(visible, forKey: "visible")
    }

    public static func == (lhs: DestinyPerksDestinyPerkReference, rhs: DestinyPerksDestinyPerkReference) -> Bool {
        guard lhs.iconPath == rhs.iconPath else { return false }
        guard lhs.isActive == rhs.isActive else { return false }
        guard lhs.perkHash == rhs.perkHash else { return false }
        guard lhs.visible == rhs.visible else { return false }
        return true
    }
}

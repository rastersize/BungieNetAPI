//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Defines an "Objective".
An objective is a specific task you should accomplish in the game. These are referred to by:
- Quest Steps (which are DestinyInventoryItemDefinition entities with Objectives)
- Challenges (which are Objectives defined on an DestinyActivityDefintion)
- Milestones (which refer to Objectives that are defined on both Quest Steps and Activities)
- Anything else that the designers decide to do later.
Objectives have progress, a notion of having been Completed, human readable data describing the task to be accomplished, and a lot of optional tack-on data that can enhance the information provided about the task. */
public struct DestinyDefinitionsDestinyObjectiveDefinition: APIModel {

    /** If true, the value is allowed to go negative. */
    public var allowNegativeValue: Bool?

    /** If True, the progress will continue even beyond the point where the objective met its minimum completion requirements. Your UI will have to accommodate it. */
    public var allowOvercompletion: Bool?

    /** If true, you can effectively "un-complete" this objective if you lose progress after crossing the completion threshold. 
If False, once you complete the task it will remain completed forever by locking the value. */
    public var allowValueChangeWhenCompleted: Bool?

    /** The style to use when the objective is completed. */
    public var completedValueStyle: Int?

    /** The value that the unlock value defined in unlockValueHash must reach in order for the objective to be considered Completed. Used in calculating progress and completion status. */
    public var completionValue: Int?

    /** Ideally, this should tell you what your task is. I'm not going to lie to you though. Sometimes this doesn't have useful information at all. Which sucks, but there's nothing either of us can do about it. */
    public var displayProperties: [String: Any]?

    /** The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to. */
    public var hash: Int?

    /** The style to use when the objective is still in progress. */
    public var inProgressValueStyle: Int?

    /** The index of the entity as it was found in the investment tables. */
    public var index: Int?

    /** If true, completion means having an unlock value less than or equal to the completionValue.
If False, completion means having an unlock value greater than or equal to the completionValue. */
    public var isCountingDownward: Bool?

    /** OPTIONAL: a hash identifier for the location at which this objective must be accomplished, if there is a location defined. Look up the DestinyLocationDefinition for this hash for that additional location info. */
    public var locationHash: Int?

    /** If nonzero, this is the minimum value at which the objective's progression should be shown. Otherwise, don't show it yet. */
    public var minimumVisibilityThreshold: Int?

    /** If this objective enables Perks intrinsically, the conditions for that enabling are defined here. */
    public var perks: [String: Any]?

    /** Text to describe the progress bar. */
    public var progressDescription: String?

    /** If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry! */
    public var redacted: Bool?

    /** A shortcut for determining the most restrictive gating that this Objective is set to use. This includes both the dynamic determination of progress and of completion values. See the DestinyGatingScope enum's documentation for more details. */
    public var scope: Int?

    /** If True, you should continue showing the progression value in the UI after it's complete. I mean, we already do that in BNet anyways, but if you want to be better behaved than us you could honor this flag. */
    public var showValueOnComplete: Bool?

    /** If this objective enables modifications on a player's stats intrinsically, the conditions are defined here. */
    public var stats: [String: Any]?

    /** The UI style applied to the objective. It's an enum, take a look at DestinyUnlockValueUIStyle for details of the possible styles. Use this info as you wish to customize your UI. */
    public var valueStyle: Int?

    public init(allowNegativeValue: Bool? = nil, allowOvercompletion: Bool? = nil, allowValueChangeWhenCompleted: Bool? = nil, completedValueStyle: Int? = nil, completionValue: Int? = nil, displayProperties: [String: Any]? = nil, hash: Int? = nil, inProgressValueStyle: Int? = nil, index: Int? = nil, isCountingDownward: Bool? = nil, locationHash: Int? = nil, minimumVisibilityThreshold: Int? = nil, perks: [String: Any]? = nil, progressDescription: String? = nil, redacted: Bool? = nil, scope: Int? = nil, showValueOnComplete: Bool? = nil, stats: [String: Any]? = nil, valueStyle: Int? = nil) {
        self.allowNegativeValue = allowNegativeValue
        self.allowOvercompletion = allowOvercompletion
        self.allowValueChangeWhenCompleted = allowValueChangeWhenCompleted
        self.completedValueStyle = completedValueStyle
        self.completionValue = completionValue
        self.displayProperties = displayProperties
        self.hash = hash
        self.inProgressValueStyle = inProgressValueStyle
        self.index = index
        self.isCountingDownward = isCountingDownward
        self.locationHash = locationHash
        self.minimumVisibilityThreshold = minimumVisibilityThreshold
        self.perks = perks
        self.progressDescription = progressDescription
        self.redacted = redacted
        self.scope = scope
        self.showValueOnComplete = showValueOnComplete
        self.stats = stats
        self.valueStyle = valueStyle
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        allowNegativeValue = try container.decodeIfPresent("allowNegativeValue")
        allowOvercompletion = try container.decodeIfPresent("allowOvercompletion")
        allowValueChangeWhenCompleted = try container.decodeIfPresent("allowValueChangeWhenCompleted")
        completedValueStyle = try container.decodeIfPresent("completedValueStyle")
        completionValue = try container.decodeIfPresent("completionValue")
        displayProperties = try container.decodeAnyIfPresent("displayProperties")
        hash = try container.decodeIfPresent("hash")
        inProgressValueStyle = try container.decodeIfPresent("inProgressValueStyle")
        index = try container.decodeIfPresent("index")
        isCountingDownward = try container.decodeIfPresent("isCountingDownward")
        locationHash = try container.decodeIfPresent("locationHash")
        minimumVisibilityThreshold = try container.decodeIfPresent("minimumVisibilityThreshold")
        perks = try container.decodeAnyIfPresent("perks")
        progressDescription = try container.decodeIfPresent("progressDescription")
        redacted = try container.decodeIfPresent("redacted")
        scope = try container.decodeIfPresent("scope")
        showValueOnComplete = try container.decodeIfPresent("showValueOnComplete")
        stats = try container.decodeAnyIfPresent("stats")
        valueStyle = try container.decodeIfPresent("valueStyle")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(allowNegativeValue, forKey: "allowNegativeValue")
        try container.encodeIfPresent(allowOvercompletion, forKey: "allowOvercompletion")
        try container.encodeIfPresent(allowValueChangeWhenCompleted, forKey: "allowValueChangeWhenCompleted")
        try container.encodeIfPresent(completedValueStyle, forKey: "completedValueStyle")
        try container.encodeIfPresent(completionValue, forKey: "completionValue")
        try container.encodeAnyIfPresent(displayProperties, forKey: "displayProperties")
        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(inProgressValueStyle, forKey: "inProgressValueStyle")
        try container.encodeIfPresent(index, forKey: "index")
        try container.encodeIfPresent(isCountingDownward, forKey: "isCountingDownward")
        try container.encodeIfPresent(locationHash, forKey: "locationHash")
        try container.encodeIfPresent(minimumVisibilityThreshold, forKey: "minimumVisibilityThreshold")
        try container.encodeAnyIfPresent(perks, forKey: "perks")
        try container.encodeIfPresent(progressDescription, forKey: "progressDescription")
        try container.encodeIfPresent(redacted, forKey: "redacted")
        try container.encodeIfPresent(scope, forKey: "scope")
        try container.encodeIfPresent(showValueOnComplete, forKey: "showValueOnComplete")
        try container.encodeAnyIfPresent(stats, forKey: "stats")
        try container.encodeIfPresent(valueStyle, forKey: "valueStyle")
    }

    public static func == (lhs: DestinyDefinitionsDestinyObjectiveDefinition, rhs: DestinyDefinitionsDestinyObjectiveDefinition) -> Bool {
        guard lhs.allowNegativeValue == rhs.allowNegativeValue else { return false }
        guard lhs.allowOvercompletion == rhs.allowOvercompletion else { return false }
        guard lhs.allowValueChangeWhenCompleted == rhs.allowValueChangeWhenCompleted else { return false }
        guard lhs.completedValueStyle == rhs.completedValueStyle else { return false }
        guard lhs.completionValue == rhs.completionValue else { return false }
        guard NSDictionary(dictionary: lhs.displayProperties ?? [:]).isEqual(to: rhs.displayProperties ?? [:]) else { return false }
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.inProgressValueStyle == rhs.inProgressValueStyle else { return false }
        guard lhs.index == rhs.index else { return false }
        guard lhs.isCountingDownward == rhs.isCountingDownward else { return false }
        guard lhs.locationHash == rhs.locationHash else { return false }
        guard lhs.minimumVisibilityThreshold == rhs.minimumVisibilityThreshold else { return false }
        guard NSDictionary(dictionary: lhs.perks ?? [:]).isEqual(to: rhs.perks ?? [:]) else { return false }
        guard lhs.progressDescription == rhs.progressDescription else { return false }
        guard lhs.redacted == rhs.redacted else { return false }
        guard lhs.scope == rhs.scope else { return false }
        guard lhs.showValueOnComplete == rhs.showValueOnComplete else { return false }
        guard NSDictionary(dictionary: lhs.stats ?? [:]).isEqual(to: rhs.stats ?? [:]) else { return false }
        guard lhs.valueStyle == rhs.valueStyle else { return false }
        return true
    }
}

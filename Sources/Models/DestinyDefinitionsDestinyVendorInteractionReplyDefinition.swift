//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** When the interaction is replied to, Reward sites will fire and items potentially selected based on whether the given unlock expression is TRUE.
You can potentially choose one from multiple replies when replying to an interaction: this is how you get either/or rewards from vendors. */
public struct DestinyDefinitionsDestinyVendorInteractionReplyDefinition: APIModel {

    /** The rewards granted upon responding to the vendor. */
    public var itemRewardsSelection: Int?

    /** The localized text for the reply. */
    public var reply: String?

    /** An enum indicating the type of reply being made. */
    public var replyType: Int?

    public init(itemRewardsSelection: Int? = nil, reply: String? = nil, replyType: Int? = nil) {
        self.itemRewardsSelection = itemRewardsSelection
        self.reply = reply
        self.replyType = replyType
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        itemRewardsSelection = try container.decodeIfPresent("itemRewardsSelection")
        reply = try container.decodeIfPresent("reply")
        replyType = try container.decodeIfPresent("replyType")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(itemRewardsSelection, forKey: "itemRewardsSelection")
        try container.encodeIfPresent(reply, forKey: "reply")
        try container.encodeIfPresent(replyType, forKey: "replyType")
    }

    public static func == (lhs: DestinyDefinitionsDestinyVendorInteractionReplyDefinition, rhs: DestinyDefinitionsDestinyVendorInteractionReplyDefinition) -> Bool {
        guard lhs.itemRewardsSelection == rhs.itemRewardsSelection else { return false }
        guard lhs.reply == rhs.reply else { return false }
        guard lhs.replyType == rhs.replyType else { return false }
        return true
    }
}

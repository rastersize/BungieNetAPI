//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** BNet attempts to group vendors into similar collections. These groups aren't technically game canonical, but they are helpful for filtering vendors or showing them organized into a clean view on a webpage or app.
These definitions represent the groups we've built. Unlike in Destiny 1, a Vendors' group may change dynamically as the game state changes: thus, you will want to check DestinyVendorComponent responses to find a vendor's currently active Group (if you care).
Using this will let you group your vendors in your UI in a similar manner to how we will do grouping in the Companion. */
public struct DestinyDefinitionsDestinyVendorGroupDefinition: APIModel {

    /** For now, a group just has a name. */
    public var categoryName: String?

    /** The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to. */
    public var hash: Int?

    /** The index of the entity as it was found in the investment tables. */
    public var index: Int?

    /** The recommended order in which to render the groups, Ascending order. */
    public var order: Int?

    /** If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry! */
    public var redacted: Bool?

    public init(categoryName: String? = nil, hash: Int? = nil, index: Int? = nil, order: Int? = nil, redacted: Bool? = nil) {
        self.categoryName = categoryName
        self.hash = hash
        self.index = index
        self.order = order
        self.redacted = redacted
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        categoryName = try container.decodeIfPresent("categoryName")
        hash = try container.decodeIfPresent("hash")
        index = try container.decodeIfPresent("index")
        order = try container.decodeIfPresent("order")
        redacted = try container.decodeIfPresent("redacted")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(categoryName, forKey: "categoryName")
        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(index, forKey: "index")
        try container.encodeIfPresent(order, forKey: "order")
        try container.encodeIfPresent(redacted, forKey: "redacted")
    }

    public static func == (lhs: DestinyDefinitionsDestinyVendorGroupDefinition, rhs: DestinyDefinitionsDestinyVendorGroupDefinition) -> Bool {
        guard lhs.categoryName == rhs.categoryName else { return false }
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.index == rhs.index else { return false }
        guard lhs.order == rhs.order else { return false }
        guard lhs.redacted == rhs.redacted else { return false }
        return true
    }
}

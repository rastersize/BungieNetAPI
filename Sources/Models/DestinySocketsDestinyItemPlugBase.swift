//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinySocketsDestinyItemPlugBase: APIModel {

    /** If true, this plug has met all of its insertion requirements. Big if true. */
    public var canInsert: Bool?

    /** If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.
This list will be empty if the plug is enabled. */
    public var enableFailIndexes: [Int]?

    /** If true, this plug will provide its benefits while inserted. */
    public var enabled: Bool?

    /** If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.
This list will be empty if the plug can be inserted. */
    public var insertFailIndexes: [Int]?

    /** The hash identifier of the DestinyInventoryItemDefinition that represents this plug. */
    public var plugItemHash: Int?

    public init(canInsert: Bool? = nil, enableFailIndexes: [Int]? = nil, enabled: Bool? = nil, insertFailIndexes: [Int]? = nil, plugItemHash: Int? = nil) {
        self.canInsert = canInsert
        self.enableFailIndexes = enableFailIndexes
        self.enabled = enabled
        self.insertFailIndexes = insertFailIndexes
        self.plugItemHash = plugItemHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        canInsert = try container.decodeIfPresent("canInsert")
        enableFailIndexes = try container.decodeArrayIfPresent("enableFailIndexes")
        enabled = try container.decodeIfPresent("enabled")
        insertFailIndexes = try container.decodeArrayIfPresent("insertFailIndexes")
        plugItemHash = try container.decodeIfPresent("plugItemHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(canInsert, forKey: "canInsert")
        try container.encodeIfPresent(enableFailIndexes, forKey: "enableFailIndexes")
        try container.encodeIfPresent(enabled, forKey: "enabled")
        try container.encodeIfPresent(insertFailIndexes, forKey: "insertFailIndexes")
        try container.encodeIfPresent(plugItemHash, forKey: "plugItemHash")
    }

    public static func == (lhs: DestinySocketsDestinyItemPlugBase, rhs: DestinySocketsDestinyItemPlugBase) -> Bool {
        guard lhs.canInsert == rhs.canInsert else { return false }
        guard lhs.enableFailIndexes == rhs.enableFailIndexes else { return false }
        guard lhs.enabled == rhs.enabled else { return false }
        guard lhs.insertFailIndexes == rhs.insertFailIndexes else { return false }
        guard lhs.plugItemHash == rhs.plugItemHash else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct GroupsV2GroupResponse: APIModel {

    public var allianceStatus: Int?

    public var alliedIds: [Int]?

    /** This property will be populated if the authenticated user is a member of the group. Note that because of account linking, a user can sometimes be part of a clan more than once. As such, this returns the highest member type available. */
    public var currentUserMemberMap: [String: GroupsV2GroupMember]?

    /** A convenience property that indicates if every membership you (the current user) have that is a part of this group are part of an account that is considered inactive - for example, overridden accounts in Cross Save. */
    public var currentUserMembershipsInactiveForDestiny: Bool?

    /** This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join. Note that because of account linking, a user can sometimes be part of a clan more than once. */
    public var currentUserPotentialMemberMap: [String: GroupsV2GroupPotentialMember]?

    public var detail: GroupsV2GroupV2?

    public var founder: GroupsV2GroupMember?

    public var groupJoinInviteCount: Int?

    public var parentGroup: GroupsV2GroupV2?

    public init(allianceStatus: Int? = nil, alliedIds: [Int]? = nil, currentUserMemberMap: [String: GroupsV2GroupMember]? = nil, currentUserMembershipsInactiveForDestiny: Bool? = nil, currentUserPotentialMemberMap: [String: GroupsV2GroupPotentialMember]? = nil, detail: GroupsV2GroupV2? = nil, founder: GroupsV2GroupMember? = nil, groupJoinInviteCount: Int? = nil, parentGroup: GroupsV2GroupV2? = nil) {
        self.allianceStatus = allianceStatus
        self.alliedIds = alliedIds
        self.currentUserMemberMap = currentUserMemberMap
        self.currentUserMembershipsInactiveForDestiny = currentUserMembershipsInactiveForDestiny
        self.currentUserPotentialMemberMap = currentUserPotentialMemberMap
        self.detail = detail
        self.founder = founder
        self.groupJoinInviteCount = groupJoinInviteCount
        self.parentGroup = parentGroup
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        allianceStatus = try container.decodeIfPresent("allianceStatus")
        alliedIds = try container.decodeArrayIfPresent("alliedIds")
        currentUserMemberMap = try container.decodeIfPresent("currentUserMemberMap")
        currentUserMembershipsInactiveForDestiny = try container.decodeIfPresent("currentUserMembershipsInactiveForDestiny")
        currentUserPotentialMemberMap = try container.decodeIfPresent("currentUserPotentialMemberMap")
        detail = try container.decodeIfPresent("detail")
        founder = try container.decodeIfPresent("founder")
        groupJoinInviteCount = try container.decodeIfPresent("groupJoinInviteCount")
        parentGroup = try container.decodeIfPresent("parentGroup")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(allianceStatus, forKey: "allianceStatus")
        try container.encodeIfPresent(alliedIds, forKey: "alliedIds")
        try container.encodeIfPresent(currentUserMemberMap, forKey: "currentUserMemberMap")
        try container.encodeIfPresent(currentUserMembershipsInactiveForDestiny, forKey: "currentUserMembershipsInactiveForDestiny")
        try container.encodeIfPresent(currentUserPotentialMemberMap, forKey: "currentUserPotentialMemberMap")
        try container.encodeIfPresent(detail, forKey: "detail")
        try container.encodeIfPresent(founder, forKey: "founder")
        try container.encodeIfPresent(groupJoinInviteCount, forKey: "groupJoinInviteCount")
        try container.encodeIfPresent(parentGroup, forKey: "parentGroup")
    }

    public static func == (lhs: GroupsV2GroupResponse, rhs: GroupsV2GroupResponse) -> Bool {
        guard lhs.allianceStatus == rhs.allianceStatus else { return false }
        guard lhs.alliedIds == rhs.alliedIds else { return false }
        guard lhs.currentUserMemberMap == rhs.currentUserMemberMap else { return false }
        guard lhs.currentUserMembershipsInactiveForDestiny == rhs.currentUserMembershipsInactiveForDestiny else { return false }
        guard lhs.currentUserPotentialMemberMap == rhs.currentUserPotentialMemberMap else { return false }
        guard lhs.detail == rhs.detail else { return false }
        guard lhs.founder == rhs.founder else { return false }
        guard lhs.groupJoinInviteCount == rhs.groupJoinInviteCount else { return false }
        guard lhs.parentGroup == rhs.parentGroup else { return false }
        return true
    }
}

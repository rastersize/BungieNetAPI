//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Items can have objectives and progression. When you request this block, you will obtain information about any Objectives and progression tied to this item. */
public struct DestinyEntitiesItemsDestinyItemObjectivesComponent: APIModel {

    /** If we have any information on when these objectives were completed, this will be the date of that completion. This won't be on many items, but could be interesting for some items that do store this information. */
    public var dateCompleted: DateTime?

    /** I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for "flavor" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item. */
    public var flavorObjective: [String: Any]?

    /** If the item has a hard association with objectives, your progress on them will be defined here. 
Objectives are our standard way to describe a series of tasks that have to be completed for a reward. */
    public var objectives: [DestinyQuestsDestinyObjectiveProgress]?

    public init(dateCompleted: DateTime? = nil, flavorObjective: [String: Any]? = nil, objectives: [DestinyQuestsDestinyObjectiveProgress]? = nil) {
        self.dateCompleted = dateCompleted
        self.flavorObjective = flavorObjective
        self.objectives = objectives
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        dateCompleted = try container.decodeIfPresent("dateCompleted")
        flavorObjective = try container.decodeAnyIfPresent("flavorObjective")
        objectives = try container.decodeArrayIfPresent("objectives")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(dateCompleted, forKey: "dateCompleted")
        try container.encodeAnyIfPresent(flavorObjective, forKey: "flavorObjective")
        try container.encodeIfPresent(objectives, forKey: "objectives")
    }

    public static func == (lhs: DestinyEntitiesItemsDestinyItemObjectivesComponent, rhs: DestinyEntitiesItemsDestinyItemObjectivesComponent) -> Bool {
        guard lhs.dateCompleted == rhs.dateCompleted else { return false }
        guard NSDictionary(dictionary: lhs.flavorObjective ?? [:]).isEqual(to: rhs.flavorObjective ?? [:]) else { return false }
        guard lhs.objectives == rhs.objectives else { return false }
        return true
    }
}

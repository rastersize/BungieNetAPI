//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The character-specific data for a milestone's reward entry. See DestinyMilestoneDefinition for more information about Reward Entries. */
public struct DestinyMilestonesDestinyMilestoneRewardEntry: APIModel {

    /** If TRUE, the player has earned this reward. */
    public var earned: Bool?

    /** If TRUE, the player has redeemed/picked up/obtained this reward. Feel free to alias this to "gotTheShinyBauble" in your own codebase. */
    public var redeemed: Bool?

    /** The identifier for the reward entry in question. It is important to look up the related DestinyMilestoneRewardEntryDefinition to get the static details about the reward, which you can do by looking up the milestone's DestinyMilestoneDefinition and examining the DestinyMilestoneDefinition.rewards[rewardCategoryHash].rewardEntries[rewardEntryHash] data. */
    public var rewardEntryHash: Int?

    public init(earned: Bool? = nil, redeemed: Bool? = nil, rewardEntryHash: Int? = nil) {
        self.earned = earned
        self.redeemed = redeemed
        self.rewardEntryHash = rewardEntryHash
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        earned = try container.decodeIfPresent("earned")
        redeemed = try container.decodeIfPresent("redeemed")
        rewardEntryHash = try container.decodeIfPresent("rewardEntryHash")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(earned, forKey: "earned")
        try container.encodeIfPresent(redeemed, forKey: "redeemed")
        try container.encodeIfPresent(rewardEntryHash, forKey: "rewardEntryHash")
    }

    public static func == (lhs: DestinyMilestonesDestinyMilestoneRewardEntry, rhs: DestinyMilestonesDestinyMilestoneRewardEntry) -> Bool {
        guard lhs.earned == rhs.earned else { return false }
        guard lhs.redeemed == rhs.redeemed else { return false }
        guard lhs.rewardEntryHash == rhs.rewardEntryHash else { return false }
        return true
    }
}

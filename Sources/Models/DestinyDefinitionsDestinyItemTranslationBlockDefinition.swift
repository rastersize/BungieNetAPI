//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** This Block defines the rendering data associated with the item, if any. */
public struct DestinyDefinitionsDestinyItemTranslationBlockDefinition: APIModel {

    public var arrangements: [DestinyDefinitionsDestinyGearArtArrangementReference]?

    public var customDyes: [DestinyDyeReference]?

    public var defaultDyes: [DestinyDyeReference]?

    public var hasGeometry: Bool?

    public var lockedDyes: [DestinyDyeReference]?

    public var weaponPatternHash: Int?

    public var weaponPatternIdentifier: String?

    public init(arrangements: [DestinyDefinitionsDestinyGearArtArrangementReference]? = nil, customDyes: [DestinyDyeReference]? = nil, defaultDyes: [DestinyDyeReference]? = nil, hasGeometry: Bool? = nil, lockedDyes: [DestinyDyeReference]? = nil, weaponPatternHash: Int? = nil, weaponPatternIdentifier: String? = nil) {
        self.arrangements = arrangements
        self.customDyes = customDyes
        self.defaultDyes = defaultDyes
        self.hasGeometry = hasGeometry
        self.lockedDyes = lockedDyes
        self.weaponPatternHash = weaponPatternHash
        self.weaponPatternIdentifier = weaponPatternIdentifier
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        arrangements = try container.decodeArrayIfPresent("arrangements")
        customDyes = try container.decodeArrayIfPresent("customDyes")
        defaultDyes = try container.decodeArrayIfPresent("defaultDyes")
        hasGeometry = try container.decodeIfPresent("hasGeometry")
        lockedDyes = try container.decodeArrayIfPresent("lockedDyes")
        weaponPatternHash = try container.decodeIfPresent("weaponPatternHash")
        weaponPatternIdentifier = try container.decodeIfPresent("weaponPatternIdentifier")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(arrangements, forKey: "arrangements")
        try container.encodeIfPresent(customDyes, forKey: "customDyes")
        try container.encodeIfPresent(defaultDyes, forKey: "defaultDyes")
        try container.encodeIfPresent(hasGeometry, forKey: "hasGeometry")
        try container.encodeIfPresent(lockedDyes, forKey: "lockedDyes")
        try container.encodeIfPresent(weaponPatternHash, forKey: "weaponPatternHash")
        try container.encodeIfPresent(weaponPatternIdentifier, forKey: "weaponPatternIdentifier")
    }

    public static func == (lhs: DestinyDefinitionsDestinyItemTranslationBlockDefinition, rhs: DestinyDefinitionsDestinyItemTranslationBlockDefinition) -> Bool {
        guard lhs.arrangements == rhs.arrangements else { return false }
        guard lhs.customDyes == rhs.customDyes else { return false }
        guard lhs.defaultDyes == rhs.defaultDyes else { return false }
        guard lhs.hasGeometry == rhs.hasGeometry else { return false }
        guard lhs.lockedDyes == rhs.lockedDyes else { return false }
        guard lhs.weaponPatternHash == rhs.weaponPatternHash else { return false }
        guard lhs.weaponPatternIdentifier == rhs.weaponPatternIdentifier else { return false }
        return true
    }
}

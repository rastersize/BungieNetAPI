//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Represents that a vendor could sell this item, and provides a quick link to that vendor and sale item.
 Note that we do not and cannot make a guarantee that the vendor will ever *actually* sell this item, only that the Vendor has a definition that indicates it *could* be sold.
 Note also that a vendor may sell the same item in multiple "ways", which means there may be multiple vendorItemIndexes for a single Vendor hash. */
public struct DestinyDefinitionsDestinyItemVendorSourceReference: APIModel {

    /** The identifier for the vendor that may sell this item. */
    public var vendorHash: Int?

    /** The Vendor sale item indexes that represent the sale information for this item. The same vendor may sell an item in multiple "ways", hence why this is a list. (for instance, a weapon may be "sold" as a reward in a quest, for Glimmer, and for Masterwork Cores: each of those ways would be represented by a different vendor sale item with a different index) */
    public var vendorItemIndexes: [Int]?

    public init(vendorHash: Int? = nil, vendorItemIndexes: [Int]? = nil) {
        self.vendorHash = vendorHash
        self.vendorItemIndexes = vendorItemIndexes
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        vendorHash = try container.decodeIfPresent("vendorHash")
        vendorItemIndexes = try container.decodeArrayIfPresent("vendorItemIndexes")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(vendorHash, forKey: "vendorHash")
        try container.encodeIfPresent(vendorItemIndexes, forKey: "vendorItemIndexes")
    }

    public static func == (lhs: DestinyDefinitionsDestinyItemVendorSourceReference, rhs: DestinyDefinitionsDestinyItemVendorSourceReference) -> Bool {
        guard lhs.vendorHash == rhs.vendorHash else { return false }
        guard lhs.vendorItemIndexes == rhs.vendorItemIndexes else { return false }
        return true
    }
}

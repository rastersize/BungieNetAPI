//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Defines a single opt-in category: a wide-scoped permission to send emails for the subject related to the opt-in. */
public struct UserEmailOptInDefinition: APIModel {

    /** Information about the dependent subscriptions for this opt-in. */
    public var dependentSubscriptions: [UserEmailSubscriptionDefinition]?

    /** The unique identifier for this opt-in category. */
    public var name: String?

    /** If true, this opt-in setting should be set by default in situations where accounts are created without explicit choices about what they're opting into. */
    public var setByDefault: Bool?

    /** The flag value for this opt-in category. For historical reasons, this is defined as a flags enum. */
    public var value: Int?

    public init(dependentSubscriptions: [UserEmailSubscriptionDefinition]? = nil, name: String? = nil, setByDefault: Bool? = nil, value: Int? = nil) {
        self.dependentSubscriptions = dependentSubscriptions
        self.name = name
        self.setByDefault = setByDefault
        self.value = value
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        dependentSubscriptions = try container.decodeArrayIfPresent("dependentSubscriptions")
        name = try container.decodeIfPresent("name")
        setByDefault = try container.decodeIfPresent("setByDefault")
        value = try container.decodeIfPresent("value")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(dependentSubscriptions, forKey: "dependentSubscriptions")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(setByDefault, forKey: "setByDefault")
        try container.encodeIfPresent(value, forKey: "value")
    }

    public static func == (lhs: UserEmailOptInDefinition, rhs: UserEmailOptInDefinition) -> Bool {
        guard lhs.dependentSubscriptions == rhs.dependentSubscriptions else { return false }
        guard lhs.name == rhs.name else { return false }
        guard lhs.setByDefault == rhs.setByDefault else { return false }
        guard lhs.value == rhs.value else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Summary information about the activity that was played. */
public struct DestinyHistoricalStatsDestinyHistoricalStatsActivity: APIModel {

    /** The unique hash identifier of the DestinyActivityDefinition that was played. */
    public var directorActivityHash: Int?

    /** The unique identifier for this *specific* match that was played.
This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint. */
    public var instanceId: Int?

    /** Whether or not the match was a private match. There's no private matches in Destiny 2... yet... DUN DUN DUNNNN */
    public var isPrivate: Bool?

    /** The Membership Type indicating the platform on which this match was played. */
    public var membershipType: Int?

    /** Indicates the most specific game mode of the activity that we could find. */
    public var mode: Int?

    /** The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event. */
    public var modes: [Int]?

    /** The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it'd be named activityHash. Too late now. */
    public var referenceId: Int?

    public init(directorActivityHash: Int? = nil, instanceId: Int? = nil, isPrivate: Bool? = nil, membershipType: Int? = nil, mode: Int? = nil, modes: [Int]? = nil, referenceId: Int? = nil) {
        self.directorActivityHash = directorActivityHash
        self.instanceId = instanceId
        self.isPrivate = isPrivate
        self.membershipType = membershipType
        self.mode = mode
        self.modes = modes
        self.referenceId = referenceId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        directorActivityHash = try container.decodeIfPresent("directorActivityHash")
        instanceId = try container.decodeIfPresent("instanceId")
        isPrivate = try container.decodeIfPresent("isPrivate")
        membershipType = try container.decodeIfPresent("membershipType")
        mode = try container.decodeIfPresent("mode")
        modes = try container.decodeArrayIfPresent("modes")
        referenceId = try container.decodeIfPresent("referenceId")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(directorActivityHash, forKey: "directorActivityHash")
        try container.encodeIfPresent(instanceId, forKey: "instanceId")
        try container.encodeIfPresent(isPrivate, forKey: "isPrivate")
        try container.encodeIfPresent(membershipType, forKey: "membershipType")
        try container.encodeIfPresent(mode, forKey: "mode")
        try container.encodeIfPresent(modes, forKey: "modes")
        try container.encodeIfPresent(referenceId, forKey: "referenceId")
    }

    public static func == (lhs: DestinyHistoricalStatsDestinyHistoricalStatsActivity, rhs: DestinyHistoricalStatsDestinyHistoricalStatsActivity) -> Bool {
        guard lhs.directorActivityHash == rhs.directorActivityHash else { return false }
        guard lhs.instanceId == rhs.instanceId else { return false }
        guard lhs.isPrivate == rhs.isPrivate else { return false }
        guard lhs.membershipType == rhs.membershipType else { return false }
        guard lhs.mode == rhs.mode else { return false }
        guard lhs.modes == rhs.modes else { return false }
        guard lhs.referenceId == rhs.referenceId else { return false }
        return true
    }
}

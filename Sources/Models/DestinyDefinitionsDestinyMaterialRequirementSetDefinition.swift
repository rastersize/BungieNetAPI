//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Represent a set of material requirements: Items that either need to be owned or need to be consumed in order to perform an action.
A variety of other entities refer to these as gatekeepers and payments for actions that can be performed in game. */
public struct DestinyDefinitionsDestinyMaterialRequirementSetDefinition: APIModel {

    /** The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to. */
    public var hash: Int?

    /** The index of the entity as it was found in the investment tables. */
    public var index: Int?

    /** The list of all materials that are required. */
    public var materials: [DestinyDefinitionsDestinyMaterialRequirement]?

    /** If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry! */
    public var redacted: Bool?

    public init(hash: Int? = nil, index: Int? = nil, materials: [DestinyDefinitionsDestinyMaterialRequirement]? = nil, redacted: Bool? = nil) {
        self.hash = hash
        self.index = index
        self.materials = materials
        self.redacted = redacted
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        hash = try container.decodeIfPresent("hash")
        index = try container.decodeIfPresent("index")
        materials = try container.decodeArrayIfPresent("materials")
        redacted = try container.decodeIfPresent("redacted")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(index, forKey: "index")
        try container.encodeIfPresent(materials, forKey: "materials")
        try container.encodeIfPresent(redacted, forKey: "redacted")
    }

    public static func == (lhs: DestinyDefinitionsDestinyMaterialRequirementSetDefinition, rhs: DestinyDefinitionsDestinyMaterialRequirementSetDefinition) -> Bool {
        guard lhs.hash == rhs.hash else { return false }
        guard lhs.index == rhs.index else { return false }
        guard lhs.materials == rhs.materials else { return false }
        guard lhs.redacted == rhs.redacted else { return false }
        return true
    }
}

//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct ForumPostResponse: APIModel {

    public var isPinned: Bool?

    public var ignoreStatus: IgnoresIgnoreResponse?

    public var isActive: Bool?

    public var isAnnouncement: Bool?

    public var lastReplyTimestamp: DateTime?

    public var latestReplyAuthorId: Int?

    public var latestReplyPostId: Int?

    public var locale: String?

    public var popularity: Int?

    public var thumbnail: String?

    public var urlMediaType: Int?

    public var userHasMutedPost: Bool?

    public var userHasRated: Bool?

    public var userRating: Int?

    public init(isPinned: Bool? = nil, ignoreStatus: IgnoresIgnoreResponse? = nil, isActive: Bool? = nil, isAnnouncement: Bool? = nil, lastReplyTimestamp: DateTime? = nil, latestReplyAuthorId: Int? = nil, latestReplyPostId: Int? = nil, locale: String? = nil, popularity: Int? = nil, thumbnail: String? = nil, urlMediaType: Int? = nil, userHasMutedPost: Bool? = nil, userHasRated: Bool? = nil, userRating: Int? = nil) {
        self.isPinned = isPinned
        self.ignoreStatus = ignoreStatus
        self.isActive = isActive
        self.isAnnouncement = isAnnouncement
        self.lastReplyTimestamp = lastReplyTimestamp
        self.latestReplyAuthorId = latestReplyAuthorId
        self.latestReplyPostId = latestReplyPostId
        self.locale = locale
        self.popularity = popularity
        self.thumbnail = thumbnail
        self.urlMediaType = urlMediaType
        self.userHasMutedPost = userHasMutedPost
        self.userHasRated = userHasRated
        self.userRating = userRating
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        isPinned = try container.decodeIfPresent("IsPinned")
        ignoreStatus = try container.decodeIfPresent("ignoreStatus")
        isActive = try container.decodeIfPresent("isActive")
        isAnnouncement = try container.decodeIfPresent("isAnnouncement")
        lastReplyTimestamp = try container.decodeIfPresent("lastReplyTimestamp")
        latestReplyAuthorId = try container.decodeIfPresent("latestReplyAuthorId")
        latestReplyPostId = try container.decodeIfPresent("latestReplyPostId")
        locale = try container.decodeIfPresent("locale")
        popularity = try container.decodeIfPresent("popularity")
        thumbnail = try container.decodeIfPresent("thumbnail")
        urlMediaType = try container.decodeIfPresent("urlMediaType")
        userHasMutedPost = try container.decodeIfPresent("userHasMutedPost")
        userHasRated = try container.decodeIfPresent("userHasRated")
        userRating = try container.decodeIfPresent("userRating")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(isPinned, forKey: "IsPinned")
        try container.encodeIfPresent(ignoreStatus, forKey: "ignoreStatus")
        try container.encodeIfPresent(isActive, forKey: "isActive")
        try container.encodeIfPresent(isAnnouncement, forKey: "isAnnouncement")
        try container.encodeIfPresent(lastReplyTimestamp, forKey: "lastReplyTimestamp")
        try container.encodeIfPresent(latestReplyAuthorId, forKey: "latestReplyAuthorId")
        try container.encodeIfPresent(latestReplyPostId, forKey: "latestReplyPostId")
        try container.encodeIfPresent(locale, forKey: "locale")
        try container.encodeIfPresent(popularity, forKey: "popularity")
        try container.encodeIfPresent(thumbnail, forKey: "thumbnail")
        try container.encodeIfPresent(urlMediaType, forKey: "urlMediaType")
        try container.encodeIfPresent(userHasMutedPost, forKey: "userHasMutedPost")
        try container.encodeIfPresent(userHasRated, forKey: "userHasRated")
        try container.encodeIfPresent(userRating, forKey: "userRating")
    }

    public static func == (lhs: ForumPostResponse, rhs: ForumPostResponse) -> Bool {
        guard lhs.isPinned == rhs.isPinned else { return false }
        guard lhs.ignoreStatus == rhs.ignoreStatus else { return false }
        guard lhs.isActive == rhs.isActive else { return false }
        guard lhs.isAnnouncement == rhs.isAnnouncement else { return false }
        guard lhs.lastReplyTimestamp == rhs.lastReplyTimestamp else { return false }
        guard lhs.latestReplyAuthorId == rhs.latestReplyAuthorId else { return false }
        guard lhs.latestReplyPostId == rhs.latestReplyPostId else { return false }
        guard lhs.locale == rhs.locale else { return false }
        guard lhs.popularity == rhs.popularity else { return false }
        guard lhs.thumbnail == rhs.thumbnail else { return false }
        guard lhs.urlMediaType == rhs.urlMediaType else { return false }
        guard lhs.userHasMutedPost == rhs.userHasMutedPost else { return false }
        guard lhs.userHasRated == rhs.userHasRated else { return false }
        guard lhs.userRating == rhs.userRating else { return false }
        return true
    }
}

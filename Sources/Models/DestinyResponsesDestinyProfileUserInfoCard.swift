//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct DestinyResponsesDestinyProfileUserInfoCard: APIModel {

    /** If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.
     For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile's original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.
     If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can't get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it. */
    public enum UnpairedGameVersions: Int, Codable, Equatable, CaseIterable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _4 = 4
        case _8 = 8
        case _16 = 16
        case _32 = 32
    }

    /** The list of Membership Types indicating the platforms on which this Membership can be used.
 Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list */
    public var applicableMembershipTypes: [Int]?

    /** If there is a cross save override in effect, this value will tell you the type that is overridding this one. */
    public var crossSaveOverride: Int?

    public var dateLastPlayed: DateTime?

    /** Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API. */
    public var displayName: String?

    /** URL the Icon if available. */
    public var iconPath: String?

    /** If true, this account is hooked up as the "Primary" cross save account for one or more platforms. */
    public var isCrossSavePrimary: Bool?

    /** If this profile is being overridden/obscured by Cross Save, this will be set to true. We will still return the profile for display purposes where users need to know the info: it is up to any given area of the app/site to determine if this profile should still be shown. */
    public var isOverridden: Bool?

    /** If True, this is a public user membership. */
    public var isPublic: Bool?

    /** Membership ID as they user is known in the Accounts service */
    public var membershipId: Int?

    /** Type of the membership. Not necessarily the native type. */
    public var membershipType: Int?

    /** This is the silver available on this Profile across any platforms on which they have purchased silver.
 This is only available if you are requesting yourself. */
    public var platformSilver: [String: Any]?

    /** A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc. */
    public var supplementalDisplayName: String?

    /** If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.
 For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile's original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.
 If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can't get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it. */
    public var unpairedGameVersions: UnpairedGameVersions?

    public init(applicableMembershipTypes: [Int]? = nil, crossSaveOverride: Int? = nil, dateLastPlayed: DateTime? = nil, displayName: String? = nil, iconPath: String? = nil, isCrossSavePrimary: Bool? = nil, isOverridden: Bool? = nil, isPublic: Bool? = nil, membershipId: Int? = nil, membershipType: Int? = nil, platformSilver: [String: Any]? = nil, supplementalDisplayName: String? = nil, unpairedGameVersions: UnpairedGameVersions? = nil) {
        self.applicableMembershipTypes = applicableMembershipTypes
        self.crossSaveOverride = crossSaveOverride
        self.dateLastPlayed = dateLastPlayed
        self.displayName = displayName
        self.iconPath = iconPath
        self.isCrossSavePrimary = isCrossSavePrimary
        self.isOverridden = isOverridden
        self.isPublic = isPublic
        self.membershipId = membershipId
        self.membershipType = membershipType
        self.platformSilver = platformSilver
        self.supplementalDisplayName = supplementalDisplayName
        self.unpairedGameVersions = unpairedGameVersions
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        applicableMembershipTypes = try container.decodeArrayIfPresent("applicableMembershipTypes")
        crossSaveOverride = try container.decodeIfPresent("crossSaveOverride")
        dateLastPlayed = try container.decodeIfPresent("dateLastPlayed")
        displayName = try container.decodeIfPresent("displayName")
        iconPath = try container.decodeIfPresent("iconPath")
        isCrossSavePrimary = try container.decodeIfPresent("isCrossSavePrimary")
        isOverridden = try container.decodeIfPresent("isOverridden")
        isPublic = try container.decodeIfPresent("isPublic")
        membershipId = try container.decodeIfPresent("membershipId")
        membershipType = try container.decodeIfPresent("membershipType")
        platformSilver = try container.decodeAnyIfPresent("platformSilver")
        supplementalDisplayName = try container.decodeIfPresent("supplementalDisplayName")
        unpairedGameVersions = try container.decodeIfPresent("unpairedGameVersions")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(applicableMembershipTypes, forKey: "applicableMembershipTypes")
        try container.encodeIfPresent(crossSaveOverride, forKey: "crossSaveOverride")
        try container.encodeIfPresent(dateLastPlayed, forKey: "dateLastPlayed")
        try container.encodeIfPresent(displayName, forKey: "displayName")
        try container.encodeIfPresent(iconPath, forKey: "iconPath")
        try container.encodeIfPresent(isCrossSavePrimary, forKey: "isCrossSavePrimary")
        try container.encodeIfPresent(isOverridden, forKey: "isOverridden")
        try container.encodeIfPresent(isPublic, forKey: "isPublic")
        try container.encodeIfPresent(membershipId, forKey: "membershipId")
        try container.encodeIfPresent(membershipType, forKey: "membershipType")
        try container.encodeAnyIfPresent(platformSilver, forKey: "platformSilver")
        try container.encodeIfPresent(supplementalDisplayName, forKey: "supplementalDisplayName")
        try container.encodeIfPresent(unpairedGameVersions, forKey: "unpairedGameVersions")
    }

    public static func == (lhs: DestinyResponsesDestinyProfileUserInfoCard, rhs: DestinyResponsesDestinyProfileUserInfoCard) -> Bool {
        guard lhs.applicableMembershipTypes == rhs.applicableMembershipTypes else { return false }
        guard lhs.crossSaveOverride == rhs.crossSaveOverride else { return false }
        guard lhs.dateLastPlayed == rhs.dateLastPlayed else { return false }
        guard lhs.displayName == rhs.displayName else { return false }
        guard lhs.iconPath == rhs.iconPath else { return false }
        guard lhs.isCrossSavePrimary == rhs.isCrossSavePrimary else { return false }
        guard lhs.isOverridden == rhs.isOverridden else { return false }
        guard lhs.isPublic == rhs.isPublic else { return false }
        guard lhs.membershipId == rhs.membershipId else { return false }
        guard lhs.membershipType == rhs.membershipType else { return false }
        guard NSDictionary(dictionary: lhs.platformSilver ?? [:]).isEqual(to: rhs.platformSilver ?? [:]) else { return false }
        guard lhs.supplementalDisplayName == rhs.supplementalDisplayName else { return false }
        guard lhs.unpairedGameVersions == rhs.unpairedGameVersions else { return false }
        return true
    }
}

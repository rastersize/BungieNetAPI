//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A response containing all of the components for a vendor. */
public struct DestinyResponsesDestinyVendorResponse: APIModel {

    /** Categories that the vendor has available, and references to the sales therein.
COMPONENT TYPE: VendorCategories */
    public var categories: [String: Any]?

    /** A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
COMPONENT TYPE: CurrencyLookups */
    public var currencyLookups: [String: Any]?

    /** Item components, keyed by the vendorItemIndex of the active sale items.
COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.] */
    public var itemComponents: [String: Any]?

    /** Sales, keyed by the vendorItemIndex of the item being sold.
COMPONENT TYPE: VendorSales */
    public var sales: [String: Any]?

    /** The base properties of the vendor.
COMPONENT TYPE: Vendors */
    public var vendor: [String: Any]?

    public init(categories: [String: Any]? = nil, currencyLookups: [String: Any]? = nil, itemComponents: [String: Any]? = nil, sales: [String: Any]? = nil, vendor: [String: Any]? = nil) {
        self.categories = categories
        self.currencyLookups = currencyLookups
        self.itemComponents = itemComponents
        self.sales = sales
        self.vendor = vendor
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        categories = try container.decodeAnyIfPresent("categories")
        currencyLookups = try container.decodeAnyIfPresent("currencyLookups")
        itemComponents = try container.decodeAnyIfPresent("itemComponents")
        sales = try container.decodeAnyIfPresent("sales")
        vendor = try container.decodeAnyIfPresent("vendor")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeAnyIfPresent(categories, forKey: "categories")
        try container.encodeAnyIfPresent(currencyLookups, forKey: "currencyLookups")
        try container.encodeAnyIfPresent(itemComponents, forKey: "itemComponents")
        try container.encodeAnyIfPresent(sales, forKey: "sales")
        try container.encodeAnyIfPresent(vendor, forKey: "vendor")
    }

    public static func == (lhs: DestinyResponsesDestinyVendorResponse, rhs: DestinyResponsesDestinyVendorResponse) -> Bool {
        guard NSDictionary(dictionary: lhs.categories ?? [:]).isEqual(to: rhs.categories ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.currencyLookups ?? [:]).isEqual(to: rhs.currencyLookups ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.itemComponents ?? [:]).isEqual(to: rhs.itemComponents ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.sales ?? [:]).isEqual(to: rhs.sales ?? [:]) else { return false }
        guard NSDictionary(dictionary: lhs.vendor ?? [:]).isEqual(to: rhs.vendor ?? [:]) else { return false }
        return true
    }
}
